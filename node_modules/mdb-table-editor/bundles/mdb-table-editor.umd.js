(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('mdb-table-editor', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['mdb-table-editor'] = {}, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common));
}(this, (function (exports, core, rxjs, operators, common) { 'use strict';

    var MdbTableEditorDirective = /** @class */ (function () {
        function MdbTableEditorDirective(renderer, el, ngZone) {
            var _this = this;
            this.renderer = renderer;
            this.el = el;
            this.ngZone = ngZone;
            this.itemsPerPage = 10;
            this.rowHighlight = new core.EventEmitter();
            this.highlightedTableRow = null;
            this.dataArrayUnmodified = [];
            this.currentPage = 1;
            this.nextShouldBeDisabled = false;
            this.data = [];
            this.isDesc = true;
            this._searchKey = '';
            this._dataArray$ = new rxjs.Subject();
            this._iterableDataArray = [];
            this._iterableDataArray$ = new rxjs.Subject();
            this.paginationInfo = {
                firstItem: 1,
                lastItem: this.itemsPerPage,
                allItems: this.dataArrayUnmodified.length,
                activePage: this.currentPage,
            };
            this.dataArrayChange()
                .pipe()
                .subscribe(function (newData) {
                _this.dataArrayUnmodified = newData;
                setTimeout(function () {
                    _this.iterableDataArray = _this.dataArrayUnmodified.slice(_this.itemsPerPage * (_this.currentPage - 1), _this.itemsPerPage * (_this.currentPage - 1) + _this.itemsPerPage);
                    _this.data = _this.iterableDataArray;
                    _this.updatePaginationInfo();
                }, 0);
            });
            this.iterableDataArrayChange()
                .pipe(operators.distinctUntilChanged())
                .subscribe(function () {
                if (_this.data && _this._searchKey.length == 0 && _this.currentPage == 1) {
                    _this.paginationInfo.firstItem = _this.data.findIndex(function (el) { return el === _this.data[0]; }) + 1;
                    _this.paginationInfo.lastItem =
                        _this.data.findIndex(function (el) { return el == _this.data[_this.data.length - 1]; }) + 1;
                }
                if (_this.iterableDataArray &&
                    _this.iterableDataArray.findIndex(function (el) { return el == _this.highlightedTableRow; }) === -1) {
                    if (_this.highlightedTableRow !== null) {
                        _this.highlightedTableRow = null;
                        _this.rowHighlight.emit(null);
                    }
                }
            });
            var click$ = rxjs.fromEvent(this.el.nativeElement, 'click');
            click$.subscribe(function (event) {
                // Workaround for situation when fromEvent is not able to emit value from EventEmitter
                _this.ngZone.run(function () {
                    _this.markHighlightAndEmit(event);
                });
            });
        }
        Object.defineProperty(MdbTableEditorDirective.prototype, "dataArray", {
            get: function () {
                return this._dataArray;
            },
            set: function (data) {
                this._dataArray = data;
                this._dataArray$.next(this.dataArray);
            },
            enumerable: false,
            configurable: true
        });
        MdbTableEditorDirective.prototype.dataArrayChange = function () {
            return this._dataArray$;
        };
        Object.defineProperty(MdbTableEditorDirective.prototype, "iterableDataArray", {
            get: function () {
                return this._iterableDataArray;
            },
            set: function (data) {
                this._iterableDataArray = data;
                this._iterableDataArray$.next(this.iterableDataArray);
            },
            enumerable: false,
            configurable: true
        });
        MdbTableEditorDirective.prototype.iterableDataArrayChange = function () {
            return this._iterableDataArray$;
        };
        MdbTableEditorDirective.prototype.ngOnChanges = function (changes) {
            if (changes['itemsPerPage']) {
                this.iterableDataArray = this.dataArrayUnmodified.slice(this.itemsPerPage * (this.currentPage - 1), this.itemsPerPage * (this.currentPage - 1) + this.itemsPerPage);
                if (!changes['itemsPerPage'].isFirstChange()) {
                    this.updatePaginationInfo();
                }
            }
        };
        MdbTableEditorDirective.prototype.calculatePagesNumber = function () {
            return Math.ceil(this.dataArrayUnmodified.length / this.itemsPerPage);
        };
        MdbTableEditorDirective.prototype.updatePaginationInfo = function () {
            var _this = this;
            if (this.dataArray) {
                var firstAndLastIndexes = {
                    first: this.dataArray.findIndex(function (el) { return el === _this.iterableDataArray[0]; }) + 1 ||
                        this.iterableDataArray.findIndex(function (el) { return el === _this.iterableDataArray[0]; }) + 1,
                    last: this.dataArray.findIndex(function (el) { return el === _this.iterableDataArray[_this.iterableDataArray.length - 1]; }) + 1 ||
                        this.iterableDataArray.findIndex(function (el) { return el === _this.iterableDataArray[_this.iterableDataArray.length - 1]; }) + 1,
                };
                this.paginationInfo = {
                    firstItem: firstAndLastIndexes.first,
                    lastItem: firstAndLastIndexes.last,
                    allItems: this.dataArrayUnmodified.length,
                    activePage: this.currentPage,
                };
            }
        };
        MdbTableEditorDirective.prototype.nextPage = function (switchToLastPage) {
            var _this = this;
            if (this.currentPage < this.calculatePagesNumber()) {
                if (switchToLastPage) {
                    this.currentPage = this.calculatePagesNumber();
                }
                else {
                    this.currentPage++;
                }
                this.iterableDataArray = this.dataArrayUnmodified.slice(this.itemsPerPage * (this.currentPage - 1), this.itemsPerPage * (this.currentPage - 1) + this.itemsPerPage);
                this.updatePaginationInfo();
                var firstAndLastIndexes = {
                    first: this.dataArrayUnmodified.findIndex(function (el) { return el == _this.iterableDataArray[0]; }) + 1,
                    last: this.dataArrayUnmodified.findIndex(function (el) { return el == _this.iterableDataArray[_this.iterableDataArray.length - 1]; }) + 1,
                };
                this.paginationInfo.firstItem = firstAndLastIndexes.first;
                this.paginationInfo.lastItem = firstAndLastIndexes.last;
            }
        };
        MdbTableEditorDirective.prototype.prevPage = function (switchToFirstPage) {
            var _this = this;
            if (this.currentPage > 1) {
                if (switchToFirstPage) {
                    this.currentPage = 1;
                }
                else {
                    this.currentPage--;
                }
                this.iterableDataArray = this.dataArrayUnmodified.slice(this.itemsPerPage * (this.currentPage - 1), this.itemsPerPage * (this.currentPage - 1) + this.itemsPerPage);
                this.updatePaginationInfo();
            }
            var firstAndLastIndexes = {
                first: this.dataArrayUnmodified.findIndex(function (el) { return el == _this.iterableDataArray[0]; }) + 1,
                last: this.dataArrayUnmodified.findIndex(function (el) { return el == _this.iterableDataArray[_this.iterableDataArray.length - 1]; }) + 1,
            };
            this.paginationInfo.firstItem = firstAndLastIndexes.first;
            this.paginationInfo.lastItem = firstAndLastIndexes.last;
        };
        MdbTableEditorDirective.prototype.disablePrevious = function () {
            return this.currentPage === 1;
        };
        MdbTableEditorDirective.prototype.disableNext = function () {
            if (this.dataArrayUnmodified) {
                return this.currentPage >= this.calculatePagesNumber() || this.nextShouldBeDisabled;
            }
        };
        MdbTableEditorDirective.prototype.filterIterableArray = function (searchKey) {
            if (this.dataArray) {
                var filter = this.dataArray.filter(function (obj) {
                    return Object.keys(obj).some(function (key) {
                        if (obj[key] !== null) {
                            return obj[key]
                                .toString()
                                .toLowerCase()
                                .includes(searchKey);
                        }
                    });
                });
                this.iterableDataArray = filter.slice(this.itemsPerPage * (this.currentPage - 1), this.itemsPerPage * (this.currentPage - 1) + this.itemsPerPage);
                this.nextShouldBeDisabled = this.iterableDataArray.length < this.itemsPerPage;
                this.updatePaginationInfo();
                return this.iterableDataArray;
            }
        };
        MdbTableEditorDirective.prototype.performSearch = function (searchKey) {
            this._searchKey = searchKey;
            if (!searchKey && this.dataArray) {
                this.nextShouldBeDisabled = false;
                this.data = this.dataArray.slice(this.itemsPerPage * (this.currentPage - 1), this.itemsPerPage * (this.currentPage - 1) + this.itemsPerPage);
                this._iterableDataArray$.next(this.data);
                return this.dataArray.slice(this.itemsPerPage * (this.currentPage - 1), this.itemsPerPage * (this.currentPage - 1) + this.itemsPerPage);
            }
            else {
                this.data = this.filterIterableArray(searchKey.toLowerCase());
                return this.filterIterableArray(searchKey.toLowerCase());
            }
        };
        MdbTableEditorDirective.prototype.sortArray = function (property) {
            this.dataArray = this.dataArrayUnmodified.slice();
            this.isDesc = !this.isDesc; //change the direction
            property = property.replace(/ /g, '_').toLowerCase();
            var direction = this.isDesc ? 1 : -1;
            this.dataArray.sort(function (a, b) {
                if (a[property] < b[property]) {
                    return -1 * direction;
                }
                else if (a[property] > b[property]) {
                    return 1 * direction;
                }
                else {
                    return 0;
                }
            });
        };
        MdbTableEditorDirective.prototype._getClosestEl = function (el, selector) {
            for (; el && el !== document; el = el.parentNode) {
                if (el.matches && el.matches(selector)) {
                    return el;
                }
            }
            return null;
        };
        MdbTableEditorDirective.prototype.markHighlightAndEmit = function (event) {
            var _this = this;
            var tableRow = this._getClosestEl(event.target, 'tr');
            var tbody = this._getClosestEl(event.target, 'tbody');
            if (tbody && event.target) {
                tbody.childNodes.forEach(function (row, index) {
                    if (row === tableRow) {
                        _this.highlightedTableRow = _this.iterableDataArray[index];
                    }
                    if (row !== tableRow) {
                        if (row.classList && row.classList.contains('tr-color-selected')) {
                            _this.renderer.removeClass(row, 'tr-color-selected');
                        }
                    }
                });
                this.rowHighlight.emit(this.highlightedTableRow);
                this.renderer.addClass(tableRow, 'tr-color-selected');
            }
        };
        return MdbTableEditorDirective;
    }());
    MdbTableEditorDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[mdbTableEditor]',
                    exportAs: 'mdbEditor',
                },] }
    ];
    MdbTableEditorDirective.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    MdbTableEditorDirective.propDecorators = {
        itemsPerPage: [{ type: core.Input }],
        rowHighlight: [{ type: core.Output }]
    };

    var MdbTableEditorModule = /** @class */ (function () {
        function MdbTableEditorModule() {
        }
        return MdbTableEditorModule;
    }());
    MdbTableEditorModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [MdbTableEditorDirective],
                    imports: [common.CommonModule],
                    exports: [MdbTableEditorDirective],
                    providers: []
                },] }
    ];

    /*
     * Public API Surface of mdb-table-editor
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbTableEditorDirective = MdbTableEditorDirective;
    exports.MdbTableEditorModule = MdbTableEditorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-table-editor.umd.js.map
