import { ElementRef, EventEmitter, OnChanges, Renderer2, SimpleChanges, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class MdbTableEditorDirective implements OnChanges {
    private renderer;
    private el;
    private ngZone;
    itemsPerPage: number;
    rowHighlight: EventEmitter<any>;
    private highlightedTableRow;
    private dataArrayUnmodified;
    private currentPage;
    private nextShouldBeDisabled;
    private data;
    private isDesc;
    private _searchKey;
    private _dataArray;
    private _dataArray$;
    private _iterableDataArray;
    private _iterableDataArray$;
    paginationInfo: {
        firstItem: number;
        lastItem: number;
        allItems: number;
        activePage: number;
    };
    set dataArray(data: any[]);
    get dataArray(): any[];
    dataArrayChange(): Observable<any[]>;
    set iterableDataArray(data: any[]);
    get iterableDataArray(): any[];
    iterableDataArrayChange(): Observable<any[]>;
    constructor(renderer: Renderer2, el: ElementRef, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    calculatePagesNumber(): number;
    updatePaginationInfo(): void;
    nextPage(switchToLastPage?: boolean): void;
    prevPage(switchToFirstPage?: boolean): void;
    disablePrevious(): boolean;
    disableNext(): boolean | undefined;
    private filterIterableArray;
    performSearch(searchKey: string): any;
    sortArray(property: string): any;
    private _getClosestEl;
    private markHighlightAndEmit;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MdbTableEditorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MdbTableEditorDirective, "[mdbTableEditor]", ["mdbEditor"], { "itemsPerPage": "itemsPerPage"; }, { "rowHighlight": "rowHighlight"; }, never>;
}

//# sourceMappingURL=mdb-table-editor.directive.d.ts.map