{"version":3,"file":"mdb-color-picker.service.d.ts","sources":["mdb-color-picker.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Coords } from './../interfaces/coords.interface';\nimport { Observable } from 'rxjs';\nexport declare class MdbColorPickerService {\n    private _segmentedColor;\n    private _segmentedColorChange;\n    private _alpha;\n    private _alphaChange;\n    private _coords;\n    private _coordsChange;\n    private _rgbaColor;\n    private _rgbaSegments;\n    private _color;\n    private _colorChange;\n    private _colorPalette;\n    private _colorPaletteChange;\n    setColorPalette(colorArray: Array<any>): void;\n    addColorToPalette(color: any): void;\n    getColorPalette(): any[];\n    removeColorFromPalette(index: number): void;\n    colorPaletteWasChanged(): Observable<Array<any>>;\n    private setColor;\n    getColor(): {\n        rgbaColor: string;\n        hexColor: string;\n    };\n    colorWasChanged(): Observable<{\n        rgbaColor: string;\n        hexColor: string;\n    }>;\n    setSegmentedColor(value: string): void;\n    getSegmentedColor(): string;\n    colorSegmentedWasChanged(): Observable<string>;\n    setAlpha(value: string): void;\n    getAlpha(): string;\n    alphaWasChanged(): Observable<string>;\n    setCoords(value: Coords): void;\n    getCoords(): Coords;\n    coordsWasChanged(): Observable<Coords>;\n    protected convertToRGBA(): string;\n    getRgbaColor(): string;\n    getHexColor(): string;\n    rgbaToHex(value: any): string;\n    hexToRgba(value: string, alpha?: string): string;\n    constructor();\n}\n"]}