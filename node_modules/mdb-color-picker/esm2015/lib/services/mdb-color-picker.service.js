import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class MdbColorPickerService {
    constructor() {
        this._segmentedColorChange = new Subject();
        this._alpha = '0.5';
        this._alphaChange = new Subject();
        this._coordsChange = new Subject();
        this._rgbaSegments = ['255', '255', '255', '0.5'];
        this._color = { rgbaColor: '', hexColor: '' };
        this._colorChange = new Subject();
        this._colorPalette = [];
        this._colorPaletteChange = new Subject();
    }
    setColorPalette(colorArray) {
        this._colorPalette = colorArray;
        this._colorPaletteChange.next(this.getColorPalette());
    }
    addColorToPalette(color) {
        this._colorPalette.push(color);
        this._colorPaletteChange.next(this.getColorPalette());
    }
    getColorPalette() {
        return this._colorPalette;
    }
    removeColorFromPalette(index) {
        this._colorPalette.splice(index, 1);
    }
    colorPaletteWasChanged() {
        return this._colorPaletteChange;
    }
    setColor(rgbaColor, hexColor) {
        this._color.rgbaColor = rgbaColor;
        this._color.hexColor = hexColor;
        this._colorChange.next(this.getColor());
    }
    getColor() {
        return this._color;
    }
    colorWasChanged() {
        return this._colorChange;
    }
    setSegmentedColor(value) {
        this._segmentedColor = value;
        this._segmentedColorChange.next(this.getSegmentedColor());
        const rgbaColor = this.convertToRGBA();
        const hexColor = this.rgbaToHex(this.getRgbaColor());
        this.setColor(rgbaColor, hexColor);
    }
    getSegmentedColor() {
        return this._segmentedColor;
    }
    colorSegmentedWasChanged() {
        return this._segmentedColorChange;
    }
    setAlpha(value) {
        this._alpha = value;
        this._alphaChange.next(this.getAlpha());
        const rgbaColor = this.convertToRGBA();
        const hexColor = this.rgbaToHex(this.getRgbaColor());
        this.setColor(rgbaColor, hexColor);
    }
    getAlpha() {
        return this._alpha;
    }
    alphaWasChanged() {
        return this._alphaChange;
    }
    setCoords(value) {
        this._coords = value;
        this._coordsChange.next(this.getCoords());
    }
    getCoords() {
        return this._coords;
    }
    coordsWasChanged() {
        return this._coordsChange;
    }
    convertToRGBA() {
        this._rgbaColor = this.getSegmentedColor().split(',');
        const alphaChannel = this.getAlpha();
        this._rgbaSegments[0] = this._rgbaColor[0];
        this._rgbaSegments[1] = this._rgbaColor[1];
        this._rgbaSegments[2] = this._rgbaColor[2];
        this._rgbaSegments[3] = alphaChannel;
        return 'rgba(' + this._rgbaSegments.toString() + ')';
    }
    getRgbaColor() {
        return this.convertToRGBA();
    }
    getHexColor() {
        return this.rgbaToHex(this.getSegmentedColor() + ',' + this.getAlpha());
    }
    rgbaToHex(value) {
        value = value.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
        return (value && value.length === 4) ? '#' +
            ('0' + parseInt(value[1], 10).toString(16)).slice(-2) +
            ('0' + parseInt(value[2], 10).toString(16)).slice(-2) +
            ('0' + parseInt(value[3], 10).toString(16)).slice(-2) : '';
    }
    hexToRgba(value, alpha) {
        const r = parseInt(value.slice(1, 3), 16);
        const g = parseInt(value.slice(3, 5), 16);
        const b = parseInt(value.slice(5, 7), 16);
        if (alpha) {
            return `rgba(${r}, ${g}, ${b}, ${alpha})`;
        }
        else {
            return `rgb(${r}, ${g}, ${b})`;
        }
    }
}
MdbColorPickerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MdbColorPickerService_Factory() { return new MdbColorPickerService(); }, token: MdbColorPickerService, providedIn: "root" });
MdbColorPickerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
MdbColorPickerService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,