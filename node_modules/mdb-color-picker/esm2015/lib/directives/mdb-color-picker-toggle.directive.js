import { Directive, HostListener, Input, Renderer2 } from '@angular/core';
export class MdbColorPickerToggleDirective {
    constructor(renderer) {
        this.renderer = renderer;
        this.transitionTime = 200;
        this._isPickerVisible = false;
        this._clickEventTarget = null;
    }
    onClick(event) {
        this._clickEventTarget = event.target;
        this.toggleColorPicker();
    }
    onWindowClick(event) {
        if (event.target !== this._clickEventTarget &&
            this._isPickerVisible &&
            !this._getClosestEl(event.target, 'mdb-color-picker')) {
            this.toggleColorPicker();
        }
    }
    toggleColorPicker() {
        const opacityStyle = this._isPickerVisible ? '0' : '1';
        const visibilityStyle = this._isPickerVisible ? 'hidden' : 'visible';
        this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'transition', `opacity ${this.transitionTime}ms`);
        this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'opacity', opacityStyle);
        this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'visibility', 'visible');
        setTimeout(() => {
            this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'visibility', visibilityStyle);
        }, this.transitionTime);
        this._isPickerVisible = !this._isPickerVisible;
    }
    _getClosestEl(el, selector) {
        for (; el && el !== document; el = el.parentNode) {
            if (el.matches && el.matches(selector)) {
                return el;
            }
        }
        return null;
    }
}
MdbColorPickerToggleDirective.decorators = [
    { type: Directive, args: [{ selector: '[mdbColorPickerToggle]' },] }
];
MdbColorPickerToggleDirective.ctorParameters = () => [
    { type: Renderer2 }
];
MdbColorPickerToggleDirective.propDecorators = {
    mdbColorPickerToggle: [{ type: Input }],
    transitionTime: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onWindowClick: [{ type: HostListener, args: ['window:click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWNvbG9yLXBpY2tlci10b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWRiLWNvbG9yLXBpY2tlci9zcmMvbGliL2RpcmVjdGl2ZXMvbWRiLWNvbG9yLXBpY2tlci10b2dnbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJMUUsTUFBTSxPQUFPLDZCQUE2QjtJQU94QyxZQUFvQixRQUFtQjtRQUFuQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBTDlCLG1CQUFjLEdBQVcsR0FBRyxDQUFDO1FBRTlCLHFCQUFnQixHQUFZLEtBQUssQ0FBQztRQUNsQyxzQkFBaUIsR0FBUSxJQUFJLENBQUM7SUFFSSxDQUFDO0lBRVIsT0FBTyxDQUFDLEtBQVU7UUFDbkQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDdEMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUV5QyxhQUFhLENBQUMsS0FBVTtRQUNoRSxJQUNFLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLGlCQUFpQjtZQUN2QyxJQUFJLENBQUMsZ0JBQWdCO1lBQ3JCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLEVBQ3JEO1lBQ0EsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU0saUJBQWlCO1FBQ3RCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDdkQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNyRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FDcEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQzFDLFlBQVksRUFDWixXQUFXLElBQUksQ0FBQyxjQUFjLElBQUksQ0FDbkMsQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUNwQixJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDMUMsU0FBUyxFQUNULFlBQVksQ0FDYixDQUFDO1FBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUMxQyxZQUFZLEVBQ1osU0FBUyxDQUNWLENBQUM7UUFDRixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUMxQyxZQUFZLEVBQ1osZUFBZSxDQUNoQixDQUFDO1FBQ0osQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDakQsQ0FBQztJQUVPLGFBQWEsQ0FBQyxFQUFPLEVBQUUsUUFBZ0I7UUFDN0MsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLFFBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRTtZQUNoRCxJQUFJLEVBQUUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDdEMsT0FBTyxFQUFFLENBQUM7YUFDWDtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7WUE1REYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFOzs7WUFIUixTQUFTOzs7bUNBSy9DLEtBQUs7NkJBQ0wsS0FBSztzQkFPTCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOzRCQUtoQyxZQUFZLFNBQUMsY0FBYyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1kYkNvbG9yUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9tZGItY29sb3ItcGlja2VyL21kYi1jb2xvci1waWNrZXIuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW21kYkNvbG9yUGlja2VyVG9nZ2xlXScgfSlcbmV4cG9ydCBjbGFzcyBNZGJDb2xvclBpY2tlclRvZ2dsZURpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIG1kYkNvbG9yUGlja2VyVG9nZ2xlOiBNZGJDb2xvclBpY2tlckNvbXBvbmVudDtcbiAgQElucHV0KCkgdHJhbnNpdGlvblRpbWU6IG51bWJlciA9IDIwMDtcblxuICBwcml2YXRlIF9pc1BpY2tlclZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfY2xpY2tFdmVudFRhcmdldDogYW55ID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKSBvbkNsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICB0aGlzLl9jbGlja0V2ZW50VGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIHRoaXMudG9nZ2xlQ29sb3JQaWNrZXIoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpjbGljaycsIFsnJGV2ZW50J10pIG9uV2luZG93Q2xpY2soZXZlbnQ6IGFueSkge1xuICAgIGlmIChcbiAgICAgIGV2ZW50LnRhcmdldCAhPT0gdGhpcy5fY2xpY2tFdmVudFRhcmdldCAmJlxuICAgICAgdGhpcy5faXNQaWNrZXJWaXNpYmxlICYmXG4gICAgICAhdGhpcy5fZ2V0Q2xvc2VzdEVsKGV2ZW50LnRhcmdldCwgJ21kYi1jb2xvci1waWNrZXInKVxuICAgICkge1xuICAgICAgdGhpcy50b2dnbGVDb2xvclBpY2tlcigpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGVDb2xvclBpY2tlcigpIHtcbiAgICBjb25zdCBvcGFjaXR5U3R5bGUgPSB0aGlzLl9pc1BpY2tlclZpc2libGUgPyAnMCcgOiAnMSc7XG4gICAgY29uc3QgdmlzaWJpbGl0eVN0eWxlID0gdGhpcy5faXNQaWNrZXJWaXNpYmxlID8gJ2hpZGRlbicgOiAndmlzaWJsZSc7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgIHRoaXMubWRiQ29sb3JQaWNrZXJUb2dnbGUuZWwubmF0aXZlRWxlbWVudCxcbiAgICAgICd0cmFuc2l0aW9uJyxcbiAgICAgIGBvcGFjaXR5ICR7dGhpcy50cmFuc2l0aW9uVGltZX1tc2BcbiAgICApO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG4gICAgICB0aGlzLm1kYkNvbG9yUGlja2VyVG9nZ2xlLmVsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAnb3BhY2l0eScsXG4gICAgICBvcGFjaXR5U3R5bGVcbiAgICApO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG4gICAgICB0aGlzLm1kYkNvbG9yUGlja2VyVG9nZ2xlLmVsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAndmlzaWJpbGl0eScsXG4gICAgICAndmlzaWJsZSdcbiAgICApO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgICAgdGhpcy5tZGJDb2xvclBpY2tlclRvZ2dsZS5lbC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAndmlzaWJpbGl0eScsXG4gICAgICAgIHZpc2liaWxpdHlTdHlsZVxuICAgICAgKTtcbiAgICB9LCB0aGlzLnRyYW5zaXRpb25UaW1lKTtcbiAgICB0aGlzLl9pc1BpY2tlclZpc2libGUgPSAhdGhpcy5faXNQaWNrZXJWaXNpYmxlO1xuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0Q2xvc2VzdEVsKGVsOiBhbnksIHNlbGVjdG9yOiBzdHJpbmcpIHtcbiAgICBmb3IgKDsgZWwgJiYgZWwgIT09IGRvY3VtZW50OyBlbCA9IGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChlbC5tYXRjaGVzICYmIGVsLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdfQ==