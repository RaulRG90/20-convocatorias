import { Directive, ElementRef, HostBinding, HostListener } from '@angular/core';
export class MdbColorDraggableDirective {
    constructor(el) {
        this.el = el;
        this.elementPosition = { x: 0 };
        this.movable = true;
    }
    onStartMove(event) {
        this.isElementMoving = true;
        this.startMoving(event);
    }
    onMove(event) {
        if (!this.isElementMoving) {
            return;
        }
        this.movingOver(event);
    }
    onEndMove() {
        if (!this.isElementMoving) {
            return;
        }
        this.isElementMoving = false;
    }
    startMoving(event) {
        if (event.type === 'mousedown') {
            this.startingPosition = {
                x: event.clientX - this.elementPosition.x
            };
        }
        else {
            this.startingPosition = {
                x: event.changedTouches[0].clientX - this.elementPosition.x
            };
        }
    }
    movingOver(event) {
        if (event.type === 'mousemove') {
            this.elementPosition.x = event.clientX - this.startingPosition.x;
        }
        else {
            this.elementPosition.x =
                event.changedTouches[0].clientX - this.startingPosition.x;
        }
        this.updatePosition();
    }
    moveTo(value) {
        this.elementPosition.x = value;
        this.updatePosition();
    }
    updatePosition() {
        if (this.elementPosition.x >= 1 &&
            this.elementPosition.x <= this.el.nativeElement.parentElement.offsetWidth) {
            requestAnimationFrame(() => {
                this.el.nativeElement.style.transform = `
                translateX(${this.elementPosition.x}px)
              `;
            });
        }
    }
}
MdbColorDraggableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mdbColorDraggable]'
            },] }
];
MdbColorDraggableDirective.ctorParameters = () => [
    { type: ElementRef }
];
MdbColorDraggableDirective.propDecorators = {
    movable: [{ type: HostBinding, args: ['class.mdb-movable',] }],
    onStartMove: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }],
    onMove: [{ type: HostListener, args: ['document:mousemove', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event'],] }],
    onEndMove: [{ type: HostListener, args: ['document:mouseup',] }, { type: HostListener, args: ['touchend',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWNvbG9yLWRyYWdnYWJsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tZGItY29sb3ItcGlja2VyL3NyYy9saWIvZGlyZWN0aXZlcy9tZGItY29sb3ItZHJhZ2dhYmxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBU3ZCLE1BQU0sT0FBTywwQkFBMEI7SUFLckMsWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFKM0Isb0JBQWUsR0FBYSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQU81QyxZQUFPLEdBQUcsSUFBSSxDQUFDO0lBSHNCLENBQUM7SUFTdEMsV0FBVyxDQUFDLEtBQVU7UUFDcEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBSUQsTUFBTSxDQUFDLEtBQVU7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFJRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDekIsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQUVPLFdBQVcsQ0FBQyxLQUFVO1FBQzVCLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHO2dCQUN0QixDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDMUMsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsZ0JBQWdCLEdBQUc7Z0JBQ3RCLENBQUMsRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDNUQsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUFVO1FBQzNCLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1NBQ2xFO2FBQU07WUFDTCxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQ3BCLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7U0FDN0Q7UUFDRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFVO1FBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUMvQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVPLGNBQWM7UUFDcEIsSUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzNCLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQ3pFO1lBQ0EscUJBQXFCLENBQUMsR0FBRyxFQUFFO2dCQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHOzZCQUNuQixJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7ZUFDcEMsQ0FBQztZQUNWLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7WUEvRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7YUFDaEM7OztZQVhDLFVBQVU7OztzQkFtQlQsV0FBVyxTQUFDLG1CQUFtQjswQkFLL0IsWUFBWSxTQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUNwQyxZQUFZLFNBQUMsWUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDO3FCQU1yQyxZQUFZLFNBQUMsb0JBQW9CLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FDN0MsWUFBWSxTQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQzt3QkFTcEMsWUFBWSxTQUFDLGtCQUFrQixjQUMvQixZQUFZLFNBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW50ZXJmYWNlIFBvc2l0aW9uIHtcbiAgeDogbnVtYmVyO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWRiQ29sb3JEcmFnZ2FibGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBNZGJDb2xvckRyYWdnYWJsZURpcmVjdGl2ZSB7XG4gIHB1YmxpYyBlbGVtZW50UG9zaXRpb246IFBvc2l0aW9uID0geyB4OiAwIH07XG5cbiAgcHJpdmF0ZSBzdGFydGluZ1Bvc2l0aW9uOiBQb3NpdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MubWRiLW1vdmFibGUnKVxuICBtb3ZhYmxlID0gdHJ1ZTtcblxuICBwcml2YXRlIGlzRWxlbWVudE1vdmluZzogYm9vbGVhbjtcblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWRvd24nLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgWyckZXZlbnQnXSlcbiAgb25TdGFydE1vdmUoZXZlbnQ6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuaXNFbGVtZW50TW92aW5nID0gdHJ1ZTtcbiAgICB0aGlzLnN0YXJ0TW92aW5nKGV2ZW50KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50Om1vdXNlbW92ZScsIFsnJGV2ZW50J10pXG4gIEBIb3N0TGlzdGVuZXIoJ3RvdWNobW92ZScsIFsnJGV2ZW50J10pXG4gIG9uTW92ZShldmVudDogYW55KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzRWxlbWVudE1vdmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubW92aW5nT3ZlcihldmVudCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDptb3VzZXVwJylcbiAgQEhvc3RMaXN0ZW5lcigndG91Y2hlbmQnKVxuICBvbkVuZE1vdmUoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzRWxlbWVudE1vdmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlzRWxlbWVudE1vdmluZyA9IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGFydE1vdmluZyhldmVudDogYW55KSB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nKSB7XG4gICAgICB0aGlzLnN0YXJ0aW5nUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IGV2ZW50LmNsaWVudFggLSB0aGlzLmVsZW1lbnRQb3NpdGlvbi54XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXJ0aW5nUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSB0aGlzLmVsZW1lbnRQb3NpdGlvbi54XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbW92aW5nT3ZlcihldmVudDogYW55KSB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZW1vdmUnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRQb3NpdGlvbi54ID0gZXZlbnQuY2xpZW50WCAtIHRoaXMuc3RhcnRpbmdQb3NpdGlvbi54O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnRQb3NpdGlvbi54ID1cbiAgICAgICAgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHRoaXMuc3RhcnRpbmdQb3NpdGlvbi54O1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gIH1cblxuICBwdWJsaWMgbW92ZVRvKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmVsZW1lbnRQb3NpdGlvbi54ID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVQb3NpdGlvbigpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmVsZW1lbnRQb3NpdGlvbi54ID49IDEgJiZcbiAgICAgIHRoaXMuZWxlbWVudFBvc2l0aW9uLnggPD0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQub2Zmc2V0V2lkdGhcbiAgICApIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlWCgke3RoaXMuZWxlbWVudFBvc2l0aW9uLnh9cHgpXG4gICAgICAgICAgICAgIGA7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==