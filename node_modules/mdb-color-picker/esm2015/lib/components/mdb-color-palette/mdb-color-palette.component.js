import { MdbColorPickerService } from './../../services/mdb-color-picker.service';
import { Component, ViewChild, Input, Output, EventEmitter, HostListener, Renderer2, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
export class MdbColorPaletteComponent {
    constructor(renderer, colorService, platformId) {
        this.renderer = renderer;
        this.colorService = colorService;
        this.platformId = platformId;
        this.color = new EventEmitter(true);
        this.mousedown = false;
        this.isBrowser = false;
        this.isBrowser = isPlatformBrowser(this.platformId);
        this.colorService.coordsWasChanged().subscribe((data) => {
            this.getColorAtPosition(data.x, data.y);
            this.selectedPosition = { x: data.x, y: data.y };
            this.draw();
        });
        this.colorService.colorWasChanged().subscribe(() => {
            this.draw();
        });
    }
    onmouseup() {
        this.mousedown = false;
    }
    draw() {
        if (this.isBrowser) {
            if (!this.ctx) {
                this.ctx = this.canvas.nativeElement.getContext('2d');
            }
            setTimeout(() => {
                const canvasParentWidth = this.canvas.nativeElement.parentElement
                    .parentElement.clientWidth;
                this.renderer.setAttribute(this.canvas.nativeElement, 'width', canvasParentWidth + 'px');
                const width = this.canvas.nativeElement.clientWidth;
                const height = this.canvas.nativeElement.clientHeight;
                this.ctx.fillStyle = this.hue || 'rgba(255, 255, 255, 1)';
                this.ctx.fillRect(0, 0, width, height);
                const whiteGrad = this.ctx.createLinearGradient(0, 0, width, 0);
                whiteGrad.addColorStop(0, 'rgba(255, 255, 255, 1)');
                whiteGrad.addColorStop(1, 'rgba(255, 255, 255, 0)');
                this.ctx.fillStyle = whiteGrad;
                this.ctx.fillRect(0, 0, width, height);
                const blackGrad = this.ctx.createLinearGradient(0, 0, 0, height);
                blackGrad.addColorStop(0, 'rgba(0, 0, 0, 0)');
                blackGrad.addColorStop(1, 'rgba(0, 0, 0, 1)');
                this.ctx.fillStyle = blackGrad;
                this.ctx.fillRect(0, 0, width, height);
                if (this.selectedPosition) {
                    this.ctx.strokeStyle = 'white';
                    this.ctx.fillStyle = 'white';
                    this.ctx.beginPath();
                    this.ctx.arc(this.selectedPosition.x, this.selectedPosition.y, 5, 0, 2 * Math.PI);
                    this.ctx.lineWidth = 2;
                    this.ctx.stroke();
                }
            }, 0);
        }
    }
    ngOnChanges(changes) {
        if (changes['hue']) {
            this.draw();
            const pos = this.selectedPosition;
            if (pos) {
                this.getColorAtPosition(pos.x, pos.y);
            }
        }
    }
    onMouseDown(event) {
        this.mousedown = true;
        if (event.type === 'touchstart') {
            const rect = event.target.getBoundingClientRect();
            this.selectedPosition = {
                x: event.targetTouches[0].pageX - rect.left,
                y: event.targetTouches[0].pageY - rect.top
            };
        }
        else if (event.type === 'mousedown') {
            this.selectedPosition = { x: event.offsetX, y: event.offsetY };
        }
        this.draw();
        this.getColorAtPosition(this.selectedPosition.x, this.selectedPosition.y);
    }
    onMouseMove(event) {
        if (this.mousedown) {
            if (event.type === 'touchmove') {
                event.preventDefault();
                const rect = event.target.getBoundingClientRect();
                this.selectedPosition = {
                    x: event.targetTouches[0].pageX - rect.left,
                    y: event.targetTouches[0].pageY - rect.top
                };
            }
            else if (event.type === 'mousemove') {
                this.selectedPosition = { x: event.offsetX, y: event.offsetY };
            }
            this.draw();
            this.getColorAtPosition(this.selectedPosition.x, this.selectedPosition.y);
        }
    }
    getColorAtPosition(x, y) {
        if (this.isBrowser) {
            const imageData = this.ctx.getImageData(x, y, 1, 1).data;
            this.colorService.setSegmentedColor(`${imageData[0]},${imageData[1]},${imageData[2]}`);
            return ('rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)');
        }
    }
    pickColorAtStart(x, y) {
        if (this.isBrowser) {
            this.selectedPosition = { x: x, y: y };
            this.ctx.strokeStyle = 'white';
            this.ctx.fillStyle = 'white';
            this.ctx.beginPath();
            this.ctx.arc(this.selectedPosition.x, this.selectedPosition.y, 10, 0, 2 * Math.PI);
            this.ctx.lineWidth = 5;
            this.ctx.stroke();
            this.getColorAtPosition(x, y);
            this.colorService.setCoords({ x: x, y: y });
        }
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.pickColorAtStart(195, 75);
            this.draw();
        }, 0);
    }
}
MdbColorPaletteComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-color-palette',
                template: "<canvas #canvas class=\"color-palette\" (mousedown)=\"onMouseDown($event)\" (touchstart)=\"onMouseDown($event)\" (touchmove)=\"onMouseMove($event)\" (mousemove)=\"onMouseMove($event)\">\n</canvas>\n",
                styles: [".color-palette:hover{cursor:pointer}\n"]
            },] }
];
MdbColorPaletteComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: MdbColorPickerService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
MdbColorPaletteComponent.propDecorators = {
    hue: [{ type: Input }],
    color: [{ type: Output }],
    canvas: [{ type: ViewChild, args: ['canvas', { static: true },] }],
    onmouseup: [{ type: HostListener, args: ['window:mouseup',] }]
};
//# sourceMappingURL=data:application/json;base64,