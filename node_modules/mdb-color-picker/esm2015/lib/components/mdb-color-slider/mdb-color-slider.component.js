import { MdbColorDraggableDirective } from './../../directives/mdb-color-draggable.directive';
import { Component, ViewChild, ElementRef, Output, EventEmitter, Renderer2, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
export class MdbColorSliderComponent {
    constructor(renderer, el, platformId) {
        this.renderer = renderer;
        this.el = el;
        this.platformId = platformId;
        this.color = new EventEmitter();
        this.mousedown = false;
        this.previousImageData = null;
        this.isBrowser = false;
        this.isBrowser = isPlatformBrowser(this.platformId);
    }
    handleMouseDown() {
        if (this.isBrowser) {
            this.mousedown = true;
            this.renderer.addClass(this.handle.nativeElement, 'pop');
            this.renderer.addClass(this.slider.nativeElement, 'grad');
            this.renderer.setStyle(this.canvas.nativeElement, 'margin-left', '-13px');
        }
    }
    moveColorCircleToPosition(event) {
        const rect = event.target.getBoundingClientRect();
        let pos = null;
        if (event.type === 'touchmove') {
            event.preventDefault();
            this.drag.moveTo(event.targetTouches[0].pageX - rect.left);
            this.drag.elementPosition.x = event.targetTouches[0].pageX - rect.left;
            pos = {
                x: event.targetTouches[0].pageX -
                    this.slider.nativeElement.getBoundingClientRect().left,
                y: event.targetTouches[0].pageY -
                    this.slider.nativeElement.getBoundingClientRect().top
            };
        }
        else if (event.type === 'click') {
            this.drag.moveTo(event.layerX);
            this.drag.elementPosition.x = event.layerX;
            pos = {
                x: event.x - this.slider.nativeElement.getBoundingClientRect().x,
                y: event.y - this.slider.nativeElement.getBoundingClientRect().y
            };
        }
        if (pos !== null) {
            this.draw();
            this.emitColor(pos.x, pos.y);
            this.renderer.setStyle(this.handle.nativeElement, 'background-color', this.getColorAtPosition(pos.x, pos.y));
        }
    }
    handleMouseUp() {
        this.mousedown = false;
        this.renderer.removeClass(this.handle.nativeElement, 'pop');
        this.renderer.removeClass(this.slider.nativeElement, 'grad');
    }
    handleMouseMove(event) {
        if (this.mousedown) {
            let left = 0;
            let pos = null;
            if (event.type === 'touchmove') {
                event.preventDefault();
                left =
                    event.targetTouches[0].pageX -
                        this.slider.nativeElement.getBoundingClientRect().left +
                        5;
                const rect = event.target.getBoundingClientRect();
                pos = {
                    x: event.targetTouches[0].pageX - rect.left,
                    y: event.targetTouches[0].pageY - rect.top
                };
            }
            else if (event.type === 'mousemove') {
                left =
                    event.clientX -
                        this.slider.nativeElement.getBoundingClientRect().left +
                        5;
                pos = {
                    x: event.x - this.slider.nativeElement.getBoundingClientRect().x,
                    y: event.y - this.slider.nativeElement.getBoundingClientRect().y
                };
            }
            if (left <= this.sliderParent.clientWidth && pos !== null) {
                this.draw();
                this.emitColor(pos.x, pos.y);
                this.renderer.setStyle(this.handle.nativeElement, 'background-color', this.getColorAtPosition(pos.x, pos.y));
            }
        }
    }
    draw() {
        if (this.isBrowser) {
            if (!this.ctx) {
                this.ctx = this.canvas.nativeElement.getContext('2d');
            }
            setTimeout(() => {
                const width = this.sliderParent.clientWidth;
                const height = 12;
                this.renderer.setAttribute(this.canvas.nativeElement, 'width', width + 'px');
                let grd;
                grd = this.ctx.createLinearGradient(0.0, 150.0, width, 12);
                grd.addColorStop(0.0, 'rgba(255, 0, 0, 1.000)');
                grd.addColorStop(0.2, 'rgba(255, 0, 255, 1.000)');
                grd.addColorStop(0.35, 'rgba(0, 0, 255, 1.000)');
                grd.addColorStop(0.52, 'rgba(0, 255, 255, 1.000)');
                grd.addColorStop(0.71, 'rgba(0, 255, 0, 1.000)');
                grd.addColorStop(0.88, 'rgba(255, 255, 0, 1.000)');
                grd.addColorStop(1.0, 'rgba(255, 0, 148, 1.000)');
                this.ctx.fillStyle = grd;
                this.ctx.fillRect(0, 0, width, height);
            }, 0);
        }
    }
    ngAfterViewInit() {
        if (this.isBrowser) {
            this.sliderParent = this.slider.nativeElement.parentElement.parentElement.parentElement;
            this.renderer.setStyle(this.slider.nativeElement, 'width', this.sliderParent.clientWidth + 'px');
            this.draw();
            this.renderer.setStyle(this.canvas.nativeElement, 'margin-left', '-13px');
            this.setCanvasParentsWidth();
        }
    }
    setCanvasParentsWidth() {
        setTimeout(() => {
            this.renderer.setStyle(this.el.nativeElement, 'width', this.sliderParent.clientWidth + 'px');
        }, 0);
    }
    emitColor(x, y) {
        const rgbaColor = this.getColorAtPosition(x, y);
        this.color.emit(rgbaColor);
    }
    getColorAtPosition(x, y) {
        if (this.isBrowser) {
            const imageData = this.ctx.getImageData(x, y, 1, 1).data;
            if (imageData[0] + imageData[1] + imageData[2] > 0 ||
                this.previousImageData == null) {
                this.previousImageData = imageData;
            }
            else {
                return `rgba(${this.previousImageData[0]},${this.previousImageData[1]}, ${this.previousImageData[2]}, 1)`;
            }
            return ('rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)');
        }
    }
}
MdbColorSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-color-slider',
                template: "<div class=\"row\">\n  <div class=\"col-md-12 slider\" #slider>\n    <canvas #canvas class=\"color-slider\" height=\"12\"\n            (touchmove)=\"moveColorCircleToPosition($event)\"\n            (click)=\"moveColorCircleToPosition($event)\"\n            (mousedown)=\"handleMouseDown()\"\n            (touchstart)=\"handleMouseDown()\"\n            (mouseup)=\"handleMouseUp()\"\n            (touchend)=\"handleMouseUp()\">\n    </canvas>\n    <div class=\"handle\" #handle\n         (mousemove)=\"handleMouseMove($event)\"\n         (mousedown)=\"handleMouseDown()\"\n         (mouseup)=\"handleMouseUp()\"\n         (touchmove)=\"handleMouseMove($event)\"\n         (touchstart)=\"handleMouseDown()\"\n         (touchend)=\"handleMouseUp()\"\n         mdbColorDraggable></div>\n  </div>\n</div>\n",
                styles: [".color-slider:hover{cursor:pointer}.slider{position:relative;width:100%;height:12px;border-radius:2px}.color-slider{margin-bottom:10px}.handle{position:absolute;top:-8px;left:0;width:24px;height:24px;border-radius:12px;background:red;transition:box-shadow .2s}.handle:before{content:\"\";position:absolute;top:8px;left:50%;margin-left:-2px;background:inherit;width:4px;height:4px;border-radius:20px;transition:top .2s,left .2s,margin-left .2s,height .2s,width .2s}.handle.pop:before{top:-50px;left:50%;margin-left:-20px;background:inherit;width:40px;height:40px;border-radius:20px;box-shadow:0 4px 10px #0000004d}\n"]
            },] }
];
MdbColorSliderComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
MdbColorSliderComponent.propDecorators = {
    handle: [{ type: ViewChild, args: ['handle', { static: true },] }],
    slider: [{ type: ViewChild, args: ['slider', { static: true },] }],
    canvas: [{ type: ViewChild, args: ['canvas', { static: true },] }],
    drag: [{ type: ViewChild, args: [MdbColorDraggableDirective, { static: true },] }],
    color: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,