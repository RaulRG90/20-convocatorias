import { Component, ChangeDetectorRef, Input, ElementRef, Renderer2 } from '@angular/core';
import { MdbColorPickerService } from '../../services/mdb-color-picker.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class MdbColorPickerComponent {
    constructor(colorService, cdRef, el, renderer) {
        this.colorService = colorService;
        this.cdRef = cdRef;
        this.el = el;
        this.renderer = renderer;
        this.colorPalette = [];
        this.defaultRangeSlider = true;
        this.config = {
            showPalette: true,
            showOpacitySlider: true,
            showRgbaHexColorText: true
        };
        this.alphaChannel = '0.5';
        this.opacityValue = '';
        this.colorSegments = ['255', '255', '255', '1'];
        this.switchValue = false;
        this.isBrowser = false;
        this.showPicker = false;
        this.componentDestroyed = new Subject();
        this.colorService
            .colorSegmentedWasChanged()
            .pipe(takeUntil(this.componentDestroyed))
            .subscribe((data) => {
            this.colorString =
                'rgba(' + data.split(',') + ', ' + this.alphaChannel + ')';
            this.color = this.colorService.getSegmentedColor();
            this.color = this.color.split(',');
            this.change();
            this.cdRef.detectChanges();
        });
        this.colorService.alphaWasChanged().subscribe(() => {
            this.alphaChannel = this.colorService.getAlpha();
        });
        this.colorService.coordsWasChanged().subscribe(() => {
            this.colorService.colorWasChanged().subscribe((color) => {
                if (this.switchValue === false) {
                    this.colorString = color.rgbaColor;
                }
                else {
                    this.colorString = color.hexColor;
                }
            });
        });
        this.colorService.colorPaletteWasChanged().subscribe((data) => {
            this.colorPalette = data;
        });
        // Resolves problem with hidden canvas of color picker and color slider
        // when color picker component was placed inside of static modal
        this.observer = new MutationObserver(mutations => {
            mutations.forEach((mutation) => {
                const stylesAttribute = mutation.target.getAttribute('style');
                if (stylesAttribute) {
                    this.showPicker = stylesAttribute.includes('visibility: visible');
                    this.cdRef.detectChanges();
                }
            });
        });
        this.observer.observe(this.el.nativeElement, {
            attributes: true,
            childList: true,
            characterData: true
        });
    }
    setOptions() {
        if (this.options !== undefined) {
            Object.keys(this.options).forEach((k) => {
                this.config[k] = this.options[k];
            });
        }
    }
    onAlphaInput(event) {
        this.colorService.setAlpha(event.target.value);
        this.colorSegments[0] = this.color[0];
        this.colorSegments[1] = this.color[1];
        this.colorSegments[2] = this.color[2];
        this.colorSegments[3] = this.alphaChannel;
        this.colorString = 'rgba(' + this.colorSegments.toString() + ')';
        this.change();
    }
    copyToClipboard(type) {
        const el = this.renderer.createElement('textarea');
        if (type === 'color') {
            el.value = this.colorString;
        }
        else if (type === 'palette') {
            this.colorService.getColorPalette().forEach((color) => {
                el.value += '{';
                el.value += 'rgbaColor: ' + `'${color.rgbaColor}'` + ', ';
                el.value += 'hexColor: ' + `'${color.hexColor}'`;
                el.value += '}, ';
            });
        }
        this.renderer.setAttribute(el, 'readonly', '');
        this.renderer.setStyle(el, 'position', 'absolute');
        this.renderer.setStyle(el, 'left', '-9999px');
        this.renderer.appendChild(document.body, el);
        el.select();
        document.execCommand('copy');
        this.renderer.removeChild(document.body, el);
    }
    clearColor() {
        if (this.colorService.getCoords()) {
            this.colorService.setCoords({
                x: this.colorService.getCoords().x,
                y: this.colorService.getCoords().y
            });
        }
        else {
            this.colorService.setCoords({ x: 122, y: 137 });
        }
        this.change();
        if (this.colorService.getAlpha() !== '0.5') {
            this.colorService.setAlpha(this.colorService.getAlpha());
        }
        else {
            this.colorService.setAlpha('0.5');
        }
        this.colorService.setColorPalette([]);
    }
    addColorToPalette() {
        this.colorService.addColorToPalette({
            rgbaColor: this.colorService.getColor().rgbaColor,
            hexColor: this.colorService.getColor().hexColor
        });
        this.colorPalette = this.colorService.getColorPalette();
    }
    setColorPaletteCircleColor(index) {
        if (!this.switchValue) {
            return this.colorPalette[index].rgbaColor;
        }
        else if (this.switchValue) {
            return this.colorPalette[index].hexColor;
        }
    }
    changeColorSystemTo(colorSystem) {
        if (colorSystem === 'rgba') {
            this.colorString = this.colorService.getColor().rgbaColor;
            return 'rgba';
        }
        else {
            this.colorString = this.colorService.getColor().hexColor;
            return 'hex';
        }
    }
    change() {
        if (!this.switchValue) {
            this.changeColorSystemTo('rgba');
        }
        else {
            this.changeColorSystemTo('hex');
        }
    }
    changeColorType() {
        this.switchValue = !this.switchValue;
        this.change();
    }
    ngAfterViewInit() {
        this.changeColorSystemTo('rgba');
        if (this.colorPalette) {
            this.colorService.setColorPalette(this.colorPalette);
        }
        this.setOptions();
        this.cdRef.detectChanges();
    }
    ngOnDestroy() {
        this.observer.disconnect();
        this.componentDestroyed.next();
        this.componentDestroyed.complete();
    }
}
MdbColorPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-color-picker',
                template: "<div class=\"card d-flex\" *ngIf=\"showPicker\">\n\n  <div class=\"card-body color-picker-card flex-column flex-center\">\n    <div class=\"row w-100\">\n      <div class=\"col-md-12 w-100 d-flex flex-column flex-center\">\n        <mdb-color-palette [hue]=\"hue\" (color)=\"color = $event\"></mdb-color-palette>\n      </div>\n    </div>\n\n    <div class=\"row w-100\">\n      <div class=\"col-md-12 py-2 d-flex\">\n        <mdb-color-slider (color)=\"hue = $event\"></mdb-color-slider>\n      </div>\n    </div>\n\n    <div class=\"row w-100\" *ngIf=\"config.showOpacitySlider\">\n      <div class=\"col-md-12 py-2 d-flex p-0\">\n        <mdb-color-picker-alpha-slider\n          class=\"w-100\"\n          id=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.01\"\n          [value]=\"alphaChannel\"\n          (input)=\"onAlphaInput($event)\"\n          [(ngModel)]=\"opacityValue\"\n          [default]=\"defaultRangeSlider\">\n        </mdb-color-picker-alpha-slider>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 d-flex flex-center flex-column\">\n        <div class=\"flex-row py-2 flex-center\" *ngIf=\"config.showRgbaHexColorText\">\n          <div class=\"color-div z-depth-1 mx-2\" [ngStyle]=\"{'background-color': colorString || 'white'}\"></div>\n          <p class=\"\">{{colorString}}</p>\n        </div>\n        <ng-content select=\".color-picker-switch\"></ng-content>\n      </div>\n\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 d-flex flex-center text-center\">\n        <ng-content select=\".color-picker-buttons\"></ng-content>\n      </div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"config.showPalette\">\n      <div class=\"col-md-12 d-flex flex-center text-center flex-wrap\">\n        <div class=\"color-palette-circle m-1 d-flex flex-center\"\n             [ngStyle]=\"{'background-color': setColorPaletteCircleColor(i)}\"\n             *ngFor=\"let color of colorPalette; let i = index\">\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                exportAs: 'mdb-color-picker',
                styles: [".input-wrapper{margin-top:16px;display:flex;border-radius:1px;border:1px solid gainsboro;padding:8px;height:32px;justify-content:center}.color-div{width:1rem;height:1rem;border-radius:50%}.color-slider-text{margin-top:-5px}.switch.primary-switch label input[type=checkbox]:checked+.lever{background-color:#689df6}.switch label input[type=checkbox]:checked+.lever:after{background-color:#4285f4}.color-palette-circle{width:2rem;height:2rem;border-radius:50%}\n"]
            },] }
];
MdbColorPickerComponent.ctorParameters = () => [
    { type: MdbColorPickerService },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: Renderer2 }
];
MdbColorPickerComponent.propDecorators = {
    colorPalette: [{ type: Input }],
    options: [{ type: Input }],
    defaultRangeSlider: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,