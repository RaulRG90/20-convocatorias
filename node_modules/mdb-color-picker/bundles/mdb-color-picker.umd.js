(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common'), require('rxjs/operators'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('mdb-color-picker', ['exports', '@angular/core', 'rxjs', '@angular/common', 'rxjs/operators', '@angular/forms'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['mdb-color-picker'] = {}, global.ng.core, global.rxjs, global.ng.common, global.rxjs.operators, global.ng.forms));
}(this, (function (exports, i0, rxjs, common, operators, forms) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var MdbColorPickerService = /** @class */ (function () {
        function MdbColorPickerService() {
            this._segmentedColorChange = new rxjs.Subject();
            this._alpha = '0.5';
            this._alphaChange = new rxjs.Subject();
            this._coordsChange = new rxjs.Subject();
            this._rgbaSegments = ['255', '255', '255', '0.5'];
            this._color = { rgbaColor: '', hexColor: '' };
            this._colorChange = new rxjs.Subject();
            this._colorPalette = [];
            this._colorPaletteChange = new rxjs.Subject();
        }
        MdbColorPickerService.prototype.setColorPalette = function (colorArray) {
            this._colorPalette = colorArray;
            this._colorPaletteChange.next(this.getColorPalette());
        };
        MdbColorPickerService.prototype.addColorToPalette = function (color) {
            this._colorPalette.push(color);
            this._colorPaletteChange.next(this.getColorPalette());
        };
        MdbColorPickerService.prototype.getColorPalette = function () {
            return this._colorPalette;
        };
        MdbColorPickerService.prototype.removeColorFromPalette = function (index) {
            this._colorPalette.splice(index, 1);
        };
        MdbColorPickerService.prototype.colorPaletteWasChanged = function () {
            return this._colorPaletteChange;
        };
        MdbColorPickerService.prototype.setColor = function (rgbaColor, hexColor) {
            this._color.rgbaColor = rgbaColor;
            this._color.hexColor = hexColor;
            this._colorChange.next(this.getColor());
        };
        MdbColorPickerService.prototype.getColor = function () {
            return this._color;
        };
        MdbColorPickerService.prototype.colorWasChanged = function () {
            return this._colorChange;
        };
        MdbColorPickerService.prototype.setSegmentedColor = function (value) {
            this._segmentedColor = value;
            this._segmentedColorChange.next(this.getSegmentedColor());
            var rgbaColor = this.convertToRGBA();
            var hexColor = this.rgbaToHex(this.getRgbaColor());
            this.setColor(rgbaColor, hexColor);
        };
        MdbColorPickerService.prototype.getSegmentedColor = function () {
            return this._segmentedColor;
        };
        MdbColorPickerService.prototype.colorSegmentedWasChanged = function () {
            return this._segmentedColorChange;
        };
        MdbColorPickerService.prototype.setAlpha = function (value) {
            this._alpha = value;
            this._alphaChange.next(this.getAlpha());
            var rgbaColor = this.convertToRGBA();
            var hexColor = this.rgbaToHex(this.getRgbaColor());
            this.setColor(rgbaColor, hexColor);
        };
        MdbColorPickerService.prototype.getAlpha = function () {
            return this._alpha;
        };
        MdbColorPickerService.prototype.alphaWasChanged = function () {
            return this._alphaChange;
        };
        MdbColorPickerService.prototype.setCoords = function (value) {
            this._coords = value;
            this._coordsChange.next(this.getCoords());
        };
        MdbColorPickerService.prototype.getCoords = function () {
            return this._coords;
        };
        MdbColorPickerService.prototype.coordsWasChanged = function () {
            return this._coordsChange;
        };
        MdbColorPickerService.prototype.convertToRGBA = function () {
            this._rgbaColor = this.getSegmentedColor().split(',');
            var alphaChannel = this.getAlpha();
            this._rgbaSegments[0] = this._rgbaColor[0];
            this._rgbaSegments[1] = this._rgbaColor[1];
            this._rgbaSegments[2] = this._rgbaColor[2];
            this._rgbaSegments[3] = alphaChannel;
            return 'rgba(' + this._rgbaSegments.toString() + ')';
        };
        MdbColorPickerService.prototype.getRgbaColor = function () {
            return this.convertToRGBA();
        };
        MdbColorPickerService.prototype.getHexColor = function () {
            return this.rgbaToHex(this.getSegmentedColor() + ',' + this.getAlpha());
        };
        MdbColorPickerService.prototype.rgbaToHex = function (value) {
            value = value.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
            return (value && value.length === 4) ? '#' +
                ('0' + parseInt(value[1], 10).toString(16)).slice(-2) +
                ('0' + parseInt(value[2], 10).toString(16)).slice(-2) +
                ('0' + parseInt(value[3], 10).toString(16)).slice(-2) : '';
        };
        MdbColorPickerService.prototype.hexToRgba = function (value, alpha) {
            var r = parseInt(value.slice(1, 3), 16);
            var g = parseInt(value.slice(3, 5), 16);
            var b = parseInt(value.slice(5, 7), 16);
            if (alpha) {
                return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
            }
            else {
                return "rgb(" + r + ", " + g + ", " + b + ")";
            }
        };
        return MdbColorPickerService;
    }());
    MdbColorPickerService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function MdbColorPickerService_Factory() { return new MdbColorPickerService(); }, token: MdbColorPickerService, providedIn: "root" });
    MdbColorPickerService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    MdbColorPickerService.ctorParameters = function () { return []; };

    var MdbColorPaletteComponent = /** @class */ (function () {
        function MdbColorPaletteComponent(renderer, colorService, platformId) {
            var _this = this;
            this.renderer = renderer;
            this.colorService = colorService;
            this.platformId = platformId;
            this.color = new i0.EventEmitter(true);
            this.mousedown = false;
            this.isBrowser = false;
            this.isBrowser = common.isPlatformBrowser(this.platformId);
            this.colorService.coordsWasChanged().subscribe(function (data) {
                _this.getColorAtPosition(data.x, data.y);
                _this.selectedPosition = { x: data.x, y: data.y };
                _this.draw();
            });
            this.colorService.colorWasChanged().subscribe(function () {
                _this.draw();
            });
        }
        MdbColorPaletteComponent.prototype.onmouseup = function () {
            this.mousedown = false;
        };
        MdbColorPaletteComponent.prototype.draw = function () {
            var _this = this;
            if (this.isBrowser) {
                if (!this.ctx) {
                    this.ctx = this.canvas.nativeElement.getContext('2d');
                }
                setTimeout(function () {
                    var canvasParentWidth = _this.canvas.nativeElement.parentElement
                        .parentElement.clientWidth;
                    _this.renderer.setAttribute(_this.canvas.nativeElement, 'width', canvasParentWidth + 'px');
                    var width = _this.canvas.nativeElement.clientWidth;
                    var height = _this.canvas.nativeElement.clientHeight;
                    _this.ctx.fillStyle = _this.hue || 'rgba(255, 255, 255, 1)';
                    _this.ctx.fillRect(0, 0, width, height);
                    var whiteGrad = _this.ctx.createLinearGradient(0, 0, width, 0);
                    whiteGrad.addColorStop(0, 'rgba(255, 255, 255, 1)');
                    whiteGrad.addColorStop(1, 'rgba(255, 255, 255, 0)');
                    _this.ctx.fillStyle = whiteGrad;
                    _this.ctx.fillRect(0, 0, width, height);
                    var blackGrad = _this.ctx.createLinearGradient(0, 0, 0, height);
                    blackGrad.addColorStop(0, 'rgba(0, 0, 0, 0)');
                    blackGrad.addColorStop(1, 'rgba(0, 0, 0, 1)');
                    _this.ctx.fillStyle = blackGrad;
                    _this.ctx.fillRect(0, 0, width, height);
                    if (_this.selectedPosition) {
                        _this.ctx.strokeStyle = 'white';
                        _this.ctx.fillStyle = 'white';
                        _this.ctx.beginPath();
                        _this.ctx.arc(_this.selectedPosition.x, _this.selectedPosition.y, 5, 0, 2 * Math.PI);
                        _this.ctx.lineWidth = 2;
                        _this.ctx.stroke();
                    }
                }, 0);
            }
        };
        MdbColorPaletteComponent.prototype.ngOnChanges = function (changes) {
            if (changes['hue']) {
                this.draw();
                var pos = this.selectedPosition;
                if (pos) {
                    this.getColorAtPosition(pos.x, pos.y);
                }
            }
        };
        MdbColorPaletteComponent.prototype.onMouseDown = function (event) {
            this.mousedown = true;
            if (event.type === 'touchstart') {
                var rect = event.target.getBoundingClientRect();
                this.selectedPosition = {
                    x: event.targetTouches[0].pageX - rect.left,
                    y: event.targetTouches[0].pageY - rect.top
                };
            }
            else if (event.type === 'mousedown') {
                this.selectedPosition = { x: event.offsetX, y: event.offsetY };
            }
            this.draw();
            this.getColorAtPosition(this.selectedPosition.x, this.selectedPosition.y);
        };
        MdbColorPaletteComponent.prototype.onMouseMove = function (event) {
            if (this.mousedown) {
                if (event.type === 'touchmove') {
                    event.preventDefault();
                    var rect = event.target.getBoundingClientRect();
                    this.selectedPosition = {
                        x: event.targetTouches[0].pageX - rect.left,
                        y: event.targetTouches[0].pageY - rect.top
                    };
                }
                else if (event.type === 'mousemove') {
                    this.selectedPosition = { x: event.offsetX, y: event.offsetY };
                }
                this.draw();
                this.getColorAtPosition(this.selectedPosition.x, this.selectedPosition.y);
            }
        };
        MdbColorPaletteComponent.prototype.getColorAtPosition = function (x, y) {
            if (this.isBrowser) {
                var imageData = this.ctx.getImageData(x, y, 1, 1).data;
                this.colorService.setSegmentedColor(imageData[0] + "," + imageData[1] + "," + imageData[2]);
                return ('rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)');
            }
        };
        MdbColorPaletteComponent.prototype.pickColorAtStart = function (x, y) {
            if (this.isBrowser) {
                this.selectedPosition = { x: x, y: y };
                this.ctx.strokeStyle = 'white';
                this.ctx.fillStyle = 'white';
                this.ctx.beginPath();
                this.ctx.arc(this.selectedPosition.x, this.selectedPosition.y, 10, 0, 2 * Math.PI);
                this.ctx.lineWidth = 5;
                this.ctx.stroke();
                this.getColorAtPosition(x, y);
                this.colorService.setCoords({ x: x, y: y });
            }
        };
        MdbColorPaletteComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.pickColorAtStart(195, 75);
                _this.draw();
            }, 0);
        };
        return MdbColorPaletteComponent;
    }());
    MdbColorPaletteComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'mdb-color-palette',
                    template: "<canvas #canvas class=\"color-palette\" (mousedown)=\"onMouseDown($event)\" (touchstart)=\"onMouseDown($event)\" (touchmove)=\"onMouseMove($event)\" (mousemove)=\"onMouseMove($event)\">\n</canvas>\n",
                    styles: [".color-palette:hover{cursor:pointer}\n"]
                },] }
    ];
    MdbColorPaletteComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: MdbColorPickerService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
    ]; };
    MdbColorPaletteComponent.propDecorators = {
        hue: [{ type: i0.Input }],
        color: [{ type: i0.Output }],
        canvas: [{ type: i0.ViewChild, args: ['canvas', { static: true },] }],
        onmouseup: [{ type: i0.HostListener, args: ['window:mouseup',] }]
    };

    var MdbColorPickerComponent = /** @class */ (function () {
        function MdbColorPickerComponent(colorService, cdRef, el, renderer) {
            var _this = this;
            this.colorService = colorService;
            this.cdRef = cdRef;
            this.el = el;
            this.renderer = renderer;
            this.colorPalette = [];
            this.defaultRangeSlider = true;
            this.config = {
                showPalette: true,
                showOpacitySlider: true,
                showRgbaHexColorText: true
            };
            this.alphaChannel = '0.5';
            this.opacityValue = '';
            this.colorSegments = ['255', '255', '255', '1'];
            this.switchValue = false;
            this.isBrowser = false;
            this.showPicker = false;
            this.componentDestroyed = new rxjs.Subject();
            this.colorService
                .colorSegmentedWasChanged()
                .pipe(operators.takeUntil(this.componentDestroyed))
                .subscribe(function (data) {
                _this.colorString =
                    'rgba(' + data.split(',') + ', ' + _this.alphaChannel + ')';
                _this.color = _this.colorService.getSegmentedColor();
                _this.color = _this.color.split(',');
                _this.change();
                _this.cdRef.detectChanges();
            });
            this.colorService.alphaWasChanged().subscribe(function () {
                _this.alphaChannel = _this.colorService.getAlpha();
            });
            this.colorService.coordsWasChanged().subscribe(function () {
                _this.colorService.colorWasChanged().subscribe(function (color) {
                    if (_this.switchValue === false) {
                        _this.colorString = color.rgbaColor;
                    }
                    else {
                        _this.colorString = color.hexColor;
                    }
                });
            });
            this.colorService.colorPaletteWasChanged().subscribe(function (data) {
                _this.colorPalette = data;
            });
            // Resolves problem with hidden canvas of color picker and color slider
            // when color picker component was placed inside of static modal
            this.observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    var stylesAttribute = mutation.target.getAttribute('style');
                    if (stylesAttribute) {
                        _this.showPicker = stylesAttribute.includes('visibility: visible');
                        _this.cdRef.detectChanges();
                    }
                });
            });
            this.observer.observe(this.el.nativeElement, {
                attributes: true,
                childList: true,
                characterData: true
            });
        }
        MdbColorPickerComponent.prototype.setOptions = function () {
            var _this = this;
            if (this.options !== undefined) {
                Object.keys(this.options).forEach(function (k) {
                    _this.config[k] = _this.options[k];
                });
            }
        };
        MdbColorPickerComponent.prototype.onAlphaInput = function (event) {
            this.colorService.setAlpha(event.target.value);
            this.colorSegments[0] = this.color[0];
            this.colorSegments[1] = this.color[1];
            this.colorSegments[2] = this.color[2];
            this.colorSegments[3] = this.alphaChannel;
            this.colorString = 'rgba(' + this.colorSegments.toString() + ')';
            this.change();
        };
        MdbColorPickerComponent.prototype.copyToClipboard = function (type) {
            var el = this.renderer.createElement('textarea');
            if (type === 'color') {
                el.value = this.colorString;
            }
            else if (type === 'palette') {
                this.colorService.getColorPalette().forEach(function (color) {
                    el.value += '{';
                    el.value += 'rgbaColor: ' + ("'" + color.rgbaColor + "'") + ', ';
                    el.value += 'hexColor: ' + ("'" + color.hexColor + "'");
                    el.value += '}, ';
                });
            }
            this.renderer.setAttribute(el, 'readonly', '');
            this.renderer.setStyle(el, 'position', 'absolute');
            this.renderer.setStyle(el, 'left', '-9999px');
            this.renderer.appendChild(document.body, el);
            el.select();
            document.execCommand('copy');
            this.renderer.removeChild(document.body, el);
        };
        MdbColorPickerComponent.prototype.clearColor = function () {
            if (this.colorService.getCoords()) {
                this.colorService.setCoords({
                    x: this.colorService.getCoords().x,
                    y: this.colorService.getCoords().y
                });
            }
            else {
                this.colorService.setCoords({ x: 122, y: 137 });
            }
            this.change();
            if (this.colorService.getAlpha() !== '0.5') {
                this.colorService.setAlpha(this.colorService.getAlpha());
            }
            else {
                this.colorService.setAlpha('0.5');
            }
            this.colorService.setColorPalette([]);
        };
        MdbColorPickerComponent.prototype.addColorToPalette = function () {
            this.colorService.addColorToPalette({
                rgbaColor: this.colorService.getColor().rgbaColor,
                hexColor: this.colorService.getColor().hexColor
            });
            this.colorPalette = this.colorService.getColorPalette();
        };
        MdbColorPickerComponent.prototype.setColorPaletteCircleColor = function (index) {
            if (!this.switchValue) {
                return this.colorPalette[index].rgbaColor;
            }
            else if (this.switchValue) {
                return this.colorPalette[index].hexColor;
            }
        };
        MdbColorPickerComponent.prototype.changeColorSystemTo = function (colorSystem) {
            if (colorSystem === 'rgba') {
                this.colorString = this.colorService.getColor().rgbaColor;
                return 'rgba';
            }
            else {
                this.colorString = this.colorService.getColor().hexColor;
                return 'hex';
            }
        };
        MdbColorPickerComponent.prototype.change = function () {
            if (!this.switchValue) {
                this.changeColorSystemTo('rgba');
            }
            else {
                this.changeColorSystemTo('hex');
            }
        };
        MdbColorPickerComponent.prototype.changeColorType = function () {
            this.switchValue = !this.switchValue;
            this.change();
        };
        MdbColorPickerComponent.prototype.ngAfterViewInit = function () {
            this.changeColorSystemTo('rgba');
            if (this.colorPalette) {
                this.colorService.setColorPalette(this.colorPalette);
            }
            this.setOptions();
            this.cdRef.detectChanges();
        };
        MdbColorPickerComponent.prototype.ngOnDestroy = function () {
            this.observer.disconnect();
            this.componentDestroyed.next();
            this.componentDestroyed.complete();
        };
        return MdbColorPickerComponent;
    }());
    MdbColorPickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'mdb-color-picker',
                    template: "<div class=\"card d-flex\" *ngIf=\"showPicker\">\n\n  <div class=\"card-body color-picker-card flex-column flex-center\">\n    <div class=\"row w-100\">\n      <div class=\"col-md-12 w-100 d-flex flex-column flex-center\">\n        <mdb-color-palette [hue]=\"hue\" (color)=\"color = $event\"></mdb-color-palette>\n      </div>\n    </div>\n\n    <div class=\"row w-100\">\n      <div class=\"col-md-12 py-2 d-flex\">\n        <mdb-color-slider (color)=\"hue = $event\"></mdb-color-slider>\n      </div>\n    </div>\n\n    <div class=\"row w-100\" *ngIf=\"config.showOpacitySlider\">\n      <div class=\"col-md-12 py-2 d-flex p-0\">\n        <mdb-color-picker-alpha-slider\n          class=\"w-100\"\n          id=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.01\"\n          [value]=\"alphaChannel\"\n          (input)=\"onAlphaInput($event)\"\n          [(ngModel)]=\"opacityValue\"\n          [default]=\"defaultRangeSlider\">\n        </mdb-color-picker-alpha-slider>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 d-flex flex-center flex-column\">\n        <div class=\"flex-row py-2 flex-center\" *ngIf=\"config.showRgbaHexColorText\">\n          <div class=\"color-div z-depth-1 mx-2\" [ngStyle]=\"{'background-color': colorString || 'white'}\"></div>\n          <p class=\"\">{{colorString}}</p>\n        </div>\n        <ng-content select=\".color-picker-switch\"></ng-content>\n      </div>\n\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 d-flex flex-center text-center\">\n        <ng-content select=\".color-picker-buttons\"></ng-content>\n      </div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"config.showPalette\">\n      <div class=\"col-md-12 d-flex flex-center text-center flex-wrap\">\n        <div class=\"color-palette-circle m-1 d-flex flex-center\"\n             [ngStyle]=\"{'background-color': setColorPaletteCircleColor(i)}\"\n             *ngFor=\"let color of colorPalette; let i = index\">\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n",
                    exportAs: 'mdb-color-picker',
                    styles: [".input-wrapper{margin-top:16px;display:flex;border-radius:1px;border:1px solid gainsboro;padding:8px;height:32px;justify-content:center}.color-div{width:1rem;height:1rem;border-radius:50%}.color-slider-text{margin-top:-5px}.switch.primary-switch label input[type=checkbox]:checked+.lever{background-color:#689df6}.switch label input[type=checkbox]:checked+.lever:after{background-color:#4285f4}.color-palette-circle{width:2rem;height:2rem;border-radius:50%}\n"]
                },] }
    ];
    MdbColorPickerComponent.ctorParameters = function () { return [
        { type: MdbColorPickerService },
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    MdbColorPickerComponent.propDecorators = {
        colorPalette: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        defaultRangeSlider: [{ type: i0.Input }]
    };

    var MdbColorDraggableDirective = /** @class */ (function () {
        function MdbColorDraggableDirective(el) {
            this.el = el;
            this.elementPosition = { x: 0 };
            this.movable = true;
        }
        MdbColorDraggableDirective.prototype.onStartMove = function (event) {
            this.isElementMoving = true;
            this.startMoving(event);
        };
        MdbColorDraggableDirective.prototype.onMove = function (event) {
            if (!this.isElementMoving) {
                return;
            }
            this.movingOver(event);
        };
        MdbColorDraggableDirective.prototype.onEndMove = function () {
            if (!this.isElementMoving) {
                return;
            }
            this.isElementMoving = false;
        };
        MdbColorDraggableDirective.prototype.startMoving = function (event) {
            if (event.type === 'mousedown') {
                this.startingPosition = {
                    x: event.clientX - this.elementPosition.x
                };
            }
            else {
                this.startingPosition = {
                    x: event.changedTouches[0].clientX - this.elementPosition.x
                };
            }
        };
        MdbColorDraggableDirective.prototype.movingOver = function (event) {
            if (event.type === 'mousemove') {
                this.elementPosition.x = event.clientX - this.startingPosition.x;
            }
            else {
                this.elementPosition.x =
                    event.changedTouches[0].clientX - this.startingPosition.x;
            }
            this.updatePosition();
        };
        MdbColorDraggableDirective.prototype.moveTo = function (value) {
            this.elementPosition.x = value;
            this.updatePosition();
        };
        MdbColorDraggableDirective.prototype.updatePosition = function () {
            var _this = this;
            if (this.elementPosition.x >= 1 &&
                this.elementPosition.x <= this.el.nativeElement.parentElement.offsetWidth) {
                requestAnimationFrame(function () {
                    _this.el.nativeElement.style.transform = "\n                translateX(" + _this.elementPosition.x + "px)\n              ";
                });
            }
        };
        return MdbColorDraggableDirective;
    }());
    MdbColorDraggableDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[mdbColorDraggable]'
                },] }
    ];
    MdbColorDraggableDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    MdbColorDraggableDirective.propDecorators = {
        movable: [{ type: i0.HostBinding, args: ['class.mdb-movable',] }],
        onStartMove: [{ type: i0.HostListener, args: ['mousedown', ['$event'],] }, { type: i0.HostListener, args: ['touchstart', ['$event'],] }],
        onMove: [{ type: i0.HostListener, args: ['document:mousemove', ['$event'],] }, { type: i0.HostListener, args: ['touchmove', ['$event'],] }],
        onEndMove: [{ type: i0.HostListener, args: ['document:mouseup',] }, { type: i0.HostListener, args: ['touchend',] }]
    };

    var MdbColorSliderComponent = /** @class */ (function () {
        function MdbColorSliderComponent(renderer, el, platformId) {
            this.renderer = renderer;
            this.el = el;
            this.platformId = platformId;
            this.color = new i0.EventEmitter();
            this.mousedown = false;
            this.previousImageData = null;
            this.isBrowser = false;
            this.isBrowser = common.isPlatformBrowser(this.platformId);
        }
        MdbColorSliderComponent.prototype.handleMouseDown = function () {
            if (this.isBrowser) {
                this.mousedown = true;
                this.renderer.addClass(this.handle.nativeElement, 'pop');
                this.renderer.addClass(this.slider.nativeElement, 'grad');
                this.renderer.setStyle(this.canvas.nativeElement, 'margin-left', '-13px');
            }
        };
        MdbColorSliderComponent.prototype.moveColorCircleToPosition = function (event) {
            var rect = event.target.getBoundingClientRect();
            var pos = null;
            if (event.type === 'touchmove') {
                event.preventDefault();
                this.drag.moveTo(event.targetTouches[0].pageX - rect.left);
                this.drag.elementPosition.x = event.targetTouches[0].pageX - rect.left;
                pos = {
                    x: event.targetTouches[0].pageX -
                        this.slider.nativeElement.getBoundingClientRect().left,
                    y: event.targetTouches[0].pageY -
                        this.slider.nativeElement.getBoundingClientRect().top
                };
            }
            else if (event.type === 'click') {
                this.drag.moveTo(event.layerX);
                this.drag.elementPosition.x = event.layerX;
                pos = {
                    x: event.x - this.slider.nativeElement.getBoundingClientRect().x,
                    y: event.y - this.slider.nativeElement.getBoundingClientRect().y
                };
            }
            if (pos !== null) {
                this.draw();
                this.emitColor(pos.x, pos.y);
                this.renderer.setStyle(this.handle.nativeElement, 'background-color', this.getColorAtPosition(pos.x, pos.y));
            }
        };
        MdbColorSliderComponent.prototype.handleMouseUp = function () {
            this.mousedown = false;
            this.renderer.removeClass(this.handle.nativeElement, 'pop');
            this.renderer.removeClass(this.slider.nativeElement, 'grad');
        };
        MdbColorSliderComponent.prototype.handleMouseMove = function (event) {
            if (this.mousedown) {
                var left = 0;
                var pos = null;
                if (event.type === 'touchmove') {
                    event.preventDefault();
                    left =
                        event.targetTouches[0].pageX -
                            this.slider.nativeElement.getBoundingClientRect().left +
                            5;
                    var rect = event.target.getBoundingClientRect();
                    pos = {
                        x: event.targetTouches[0].pageX - rect.left,
                        y: event.targetTouches[0].pageY - rect.top
                    };
                }
                else if (event.type === 'mousemove') {
                    left =
                        event.clientX -
                            this.slider.nativeElement.getBoundingClientRect().left +
                            5;
                    pos = {
                        x: event.x - this.slider.nativeElement.getBoundingClientRect().x,
                        y: event.y - this.slider.nativeElement.getBoundingClientRect().y
                    };
                }
                if (left <= this.sliderParent.clientWidth && pos !== null) {
                    this.draw();
                    this.emitColor(pos.x, pos.y);
                    this.renderer.setStyle(this.handle.nativeElement, 'background-color', this.getColorAtPosition(pos.x, pos.y));
                }
            }
        };
        MdbColorSliderComponent.prototype.draw = function () {
            var _this = this;
            if (this.isBrowser) {
                if (!this.ctx) {
                    this.ctx = this.canvas.nativeElement.getContext('2d');
                }
                setTimeout(function () {
                    var width = _this.sliderParent.clientWidth;
                    var height = 12;
                    _this.renderer.setAttribute(_this.canvas.nativeElement, 'width', width + 'px');
                    var grd;
                    grd = _this.ctx.createLinearGradient(0.0, 150.0, width, 12);
                    grd.addColorStop(0.0, 'rgba(255, 0, 0, 1.000)');
                    grd.addColorStop(0.2, 'rgba(255, 0, 255, 1.000)');
                    grd.addColorStop(0.35, 'rgba(0, 0, 255, 1.000)');
                    grd.addColorStop(0.52, 'rgba(0, 255, 255, 1.000)');
                    grd.addColorStop(0.71, 'rgba(0, 255, 0, 1.000)');
                    grd.addColorStop(0.88, 'rgba(255, 255, 0, 1.000)');
                    grd.addColorStop(1.0, 'rgba(255, 0, 148, 1.000)');
                    _this.ctx.fillStyle = grd;
                    _this.ctx.fillRect(0, 0, width, height);
                }, 0);
            }
        };
        MdbColorSliderComponent.prototype.ngAfterViewInit = function () {
            if (this.isBrowser) {
                this.sliderParent = this.slider.nativeElement.parentElement.parentElement.parentElement;
                this.renderer.setStyle(this.slider.nativeElement, 'width', this.sliderParent.clientWidth + 'px');
                this.draw();
                this.renderer.setStyle(this.canvas.nativeElement, 'margin-left', '-13px');
                this.setCanvasParentsWidth();
            }
        };
        MdbColorSliderComponent.prototype.setCanvasParentsWidth = function () {
            var _this = this;
            setTimeout(function () {
                _this.renderer.setStyle(_this.el.nativeElement, 'width', _this.sliderParent.clientWidth + 'px');
            }, 0);
        };
        MdbColorSliderComponent.prototype.emitColor = function (x, y) {
            var rgbaColor = this.getColorAtPosition(x, y);
            this.color.emit(rgbaColor);
        };
        MdbColorSliderComponent.prototype.getColorAtPosition = function (x, y) {
            if (this.isBrowser) {
                var imageData = this.ctx.getImageData(x, y, 1, 1).data;
                if (imageData[0] + imageData[1] + imageData[2] > 0 ||
                    this.previousImageData == null) {
                    this.previousImageData = imageData;
                }
                else {
                    return "rgba(" + this.previousImageData[0] + "," + this.previousImageData[1] + ", " + this.previousImageData[2] + ", 1)";
                }
                return ('rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)');
            }
        };
        return MdbColorSliderComponent;
    }());
    MdbColorSliderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'mdb-color-slider',
                    template: "<div class=\"row\">\n  <div class=\"col-md-12 slider\" #slider>\n    <canvas #canvas class=\"color-slider\" height=\"12\"\n            (touchmove)=\"moveColorCircleToPosition($event)\"\n            (click)=\"moveColorCircleToPosition($event)\"\n            (mousedown)=\"handleMouseDown()\"\n            (touchstart)=\"handleMouseDown()\"\n            (mouseup)=\"handleMouseUp()\"\n            (touchend)=\"handleMouseUp()\">\n    </canvas>\n    <div class=\"handle\" #handle\n         (mousemove)=\"handleMouseMove($event)\"\n         (mousedown)=\"handleMouseDown()\"\n         (mouseup)=\"handleMouseUp()\"\n         (touchmove)=\"handleMouseMove($event)\"\n         (touchstart)=\"handleMouseDown()\"\n         (touchend)=\"handleMouseUp()\"\n         mdbColorDraggable></div>\n  </div>\n</div>\n",
                    styles: [".color-slider:hover{cursor:pointer}.slider{position:relative;width:100%;height:12px;border-radius:2px}.color-slider{margin-bottom:10px}.handle{position:absolute;top:-8px;left:0;width:24px;height:24px;border-radius:12px;background:red;transition:box-shadow .2s}.handle:before{content:\"\";position:absolute;top:8px;left:50%;margin-left:-2px;background:inherit;width:4px;height:4px;border-radius:20px;transition:top .2s,left .2s,margin-left .2s,height .2s,width .2s}.handle.pop:before{top:-50px;left:50%;margin-left:-20px;background:inherit;width:40px;height:40px;border-radius:20px;box-shadow:0 4px 10px #0000004d}\n"]
                },] }
    ];
    MdbColorSliderComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
    ]; };
    MdbColorSliderComponent.propDecorators = {
        handle: [{ type: i0.ViewChild, args: ['handle', { static: true },] }],
        slider: [{ type: i0.ViewChild, args: ['slider', { static: true },] }],
        canvas: [{ type: i0.ViewChild, args: ['canvas', { static: true },] }],
        drag: [{ type: i0.ViewChild, args: [MdbColorDraggableDirective, { static: true },] }],
        color: [{ type: i0.Output }]
    };

    var RANGE_VALUE_ACCESOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return MdbColorPickerAlphaSliderComponent; }),
        multi: true
    };
    var MdbColorPickerAlphaSliderComponent = /** @class */ (function () {
        function MdbColorPickerAlphaSliderComponent(renderer, cdRef) {
            this.renderer = renderer;
            this.cdRef = cdRef;
            this.min = 0;
            this.max = 100;
            this.rangeValueChange = new i0.EventEmitter();
            this.range = 0;
            this.cloudRange = 0;
            this.visibility = false;
            // Control Value Accessor Methods
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        MdbColorPickerAlphaSliderComponent.prototype.onchange = function (event) {
            this.onChange(event.target.value);
        };
        MdbColorPickerAlphaSliderComponent.prototype.oninput = function (event) {
            var value = +event.target.value;
            this.rangeValueChange.emit({ value: value });
            if (this.checkIfSafari()) {
                this.focusRangeInput();
            }
        };
        MdbColorPickerAlphaSliderComponent.prototype.onclick = function () {
            this.focusRangeInput();
        };
        MdbColorPickerAlphaSliderComponent.prototype.onmouseleave = function () {
            if (this.checkIfSafari()) {
                this.blurRangeInput();
            }
        };
        MdbColorPickerAlphaSliderComponent.prototype.focusRangeInput = function () {
            this.input.nativeElement.focus();
            this.visibility = true;
        };
        MdbColorPickerAlphaSliderComponent.prototype.blurRangeInput = function () {
            this.input.nativeElement.blur();
            this.visibility = false;
        };
        MdbColorPickerAlphaSliderComponent.prototype.coverage = function (event) {
            if (typeof this.range === 'string' && this.range.length !== 0) {
                return this.range;
            }
            if (!this.default) {
                var newValue = event.target.value;
                var newRelativeGain = newValue - this.min;
                var inputWidth = this.input.nativeElement.offsetWidth;
                var thumbOffset = 0;
                var offsetAmmount = 15;
                var distanceFromMiddle = newRelativeGain - this.steps / 2;
                this.stepLength = inputWidth / this.steps;
                thumbOffset = (distanceFromMiddle / this.steps) * offsetAmmount;
                this.cloudRange = this.stepLength * newRelativeGain - thumbOffset;
                this.renderer.setStyle(this.rangeCloud.nativeElement, 'left', this.cloudRange + 'px');
            }
        };
        MdbColorPickerAlphaSliderComponent.prototype.checkIfSafari = function () {
            var isSafari = navigator.userAgent.indexOf('Safari') > -1;
            var isChrome = navigator.userAgent.indexOf('Chrome') > -1;
            var isFirefox = navigator.userAgent.indexOf('Firefox') > -1;
            var isOpera = navigator.userAgent.indexOf('Opera') > -1;
            if (isSafari && !isChrome && !isFirefox && !isOpera) {
                return true;
            }
            else {
                return false;
            }
        };
        MdbColorPickerAlphaSliderComponent.prototype.ngAfterViewInit = function () {
            this.steps = this.max - this.min;
            if (this.value) {
                this.range = this.value;
                this.cdRef.detectChanges();
            }
        };
        MdbColorPickerAlphaSliderComponent.prototype.writeValue = function (value) {
            this.value = value;
        };
        MdbColorPickerAlphaSliderComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        MdbColorPickerAlphaSliderComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        MdbColorPickerAlphaSliderComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        return MdbColorPickerAlphaSliderComponent;
    }());
    MdbColorPickerAlphaSliderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'mdb-color-picker-alpha-slider',
                    template: "<div *ngIf=\"!default\" class=\"range-field\" #rangeField>\n    <div class=\"track\">\n      <div #rangeCloud class=\"range-cloud\" title=\"range\" [ngClass]=\"{'visible': this.visibility, 'hidden': !this.visibility}\">\n        <span class=\"text-transform\">{{range}}</span>\n      </div>\n    </div>\n    <input #input\n    [name]=\"name\"\n    type=\"range\"\n    [disabled]=\"disabled\"\n    [id]=\"id\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [step]=\"step\"\n    [value]=\"value\"\n    [(ngModel)]=\"range\"\n    (focus)=\"this.visibility = true\"\n    (blur)=\"this.visibility = false\"\n    (input)=\"coverage($event)\">\n</div>\n\n<div *ngIf=\"default\">\n    <input #input\n    class=\"custom-range\"\n    [name]=\"name\"\n    type=\"range\"\n    [id]=\"id\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [step]=\"step\"\n    [attr.value]=\"value\"\n    [value]=\"value\"\n    [(ngModel)]=\"range\"\n    (focus)=\"this.visibility = true\"\n    (blur)=\"this.visibility = false\"\n    (input)=\"coverage($event)\">\n    <!--<span class=\"{{defaultRangeCounterClass}}\">{{ range }}</span>-->\n  </div>\n",
                    providers: [RANGE_VALUE_ACCESOR]
                },] }
    ];
    MdbColorPickerAlphaSliderComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ChangeDetectorRef }
    ]; };
    MdbColorPickerAlphaSliderComponent.propDecorators = {
        input: [{ type: i0.ViewChild, args: ['input',] }],
        rangeCloud: [{ type: i0.ViewChild, args: ['rangeCloud',] }],
        rangeField: [{ type: i0.ViewChild, args: ['rangeField',] }],
        id: [{ type: i0.Input }],
        required: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        min: [{ type: i0.Input }],
        max: [{ type: i0.Input }],
        step: [{ type: i0.Input }],
        default: [{ type: i0.Input }],
        defaultRangeCounterClass: [{ type: i0.Input }],
        rangeValueChange: [{ type: i0.Output }],
        onchange: [{ type: i0.HostListener, args: ['change', ['$event'],] }],
        oninput: [{ type: i0.HostListener, args: ['input', ['$event'],] }],
        onclick: [{ type: i0.HostListener, args: ['click',] }],
        onmouseleave: [{ type: i0.HostListener, args: ['mouseleave',] }]
    };

    var MdbColorPickerToggleDirective = /** @class */ (function () {
        function MdbColorPickerToggleDirective(renderer) {
            this.renderer = renderer;
            this.transitionTime = 200;
            this._isPickerVisible = false;
            this._clickEventTarget = null;
        }
        MdbColorPickerToggleDirective.prototype.onClick = function (event) {
            this._clickEventTarget = event.target;
            this.toggleColorPicker();
        };
        MdbColorPickerToggleDirective.prototype.onWindowClick = function (event) {
            if (event.target !== this._clickEventTarget &&
                this._isPickerVisible &&
                !this._getClosestEl(event.target, 'mdb-color-picker')) {
                this.toggleColorPicker();
            }
        };
        MdbColorPickerToggleDirective.prototype.toggleColorPicker = function () {
            var _this = this;
            var opacityStyle = this._isPickerVisible ? '0' : '1';
            var visibilityStyle = this._isPickerVisible ? 'hidden' : 'visible';
            this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'transition', "opacity " + this.transitionTime + "ms");
            this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'opacity', opacityStyle);
            this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'visibility', 'visible');
            setTimeout(function () {
                _this.renderer.setStyle(_this.mdbColorPickerToggle.el.nativeElement, 'visibility', visibilityStyle);
            }, this.transitionTime);
            this._isPickerVisible = !this._isPickerVisible;
        };
        MdbColorPickerToggleDirective.prototype._getClosestEl = function (el, selector) {
            for (; el && el !== document; el = el.parentNode) {
                if (el.matches && el.matches(selector)) {
                    return el;
                }
            }
            return null;
        };
        return MdbColorPickerToggleDirective;
    }());
    MdbColorPickerToggleDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[mdbColorPickerToggle]' },] }
    ];
    MdbColorPickerToggleDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 }
    ]; };
    MdbColorPickerToggleDirective.propDecorators = {
        mdbColorPickerToggle: [{ type: i0.Input }],
        transitionTime: [{ type: i0.Input }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }],
        onWindowClick: [{ type: i0.HostListener, args: ['window:click', ['$event'],] }]
    };

    var MdbColorPickerModule = /** @class */ (function () {
        function MdbColorPickerModule() {
        }
        return MdbColorPickerModule;
    }());
    MdbColorPickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        MdbColorPickerComponent,
                        MdbColorSliderComponent,
                        MdbColorPaletteComponent,
                        MdbColorDraggableDirective,
                        MdbColorPickerToggleDirective,
                        MdbColorPickerAlphaSliderComponent
                    ],
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                    ],
                    exports: [
                        MdbColorPickerComponent,
                        MdbColorSliderComponent,
                        MdbColorPaletteComponent,
                        MdbColorDraggableDirective,
                        MdbColorPickerToggleDirective,
                        MdbColorPickerAlphaSliderComponent
                    ],
                    providers: [
                        MdbColorPickerService
                    ]
                },] }
    ];

    /*
     * Public API Surface of mdb-color-picker
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbColorDraggableDirective = MdbColorDraggableDirective;
    exports.MdbColorPaletteComponent = MdbColorPaletteComponent;
    exports.MdbColorPickerAlphaSliderComponent = MdbColorPickerAlphaSliderComponent;
    exports.MdbColorPickerComponent = MdbColorPickerComponent;
    exports.MdbColorPickerModule = MdbColorPickerModule;
    exports.MdbColorPickerService = MdbColorPickerService;
    exports.MdbColorPickerToggleDirective = MdbColorPickerToggleDirective;
    exports.MdbColorSliderComponent = MdbColorSliderComponent;
    exports.RANGE_VALUE_ACCESOR = RANGE_VALUE_ACCESOR;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-color-picker.umd.js.map
