{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, Renderer2, Inject, PLATFORM_ID, Input, Output, ViewChild, HostListener, ChangeDetectorRef, ElementRef, Directive, HostBinding, forwardRef, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { takeUntil } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\nconst _c0 = [\"canvas\"];\n\nfunction MdbColorPickerComponent_div_0_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14);\n    ɵngcc0.ɵɵelementStart(2, \"mdb-color-picker-alpha-slider\", 15);\n    ɵngcc0.ɵɵlistener(\"input\", function MdbColorPickerComponent_div_0_div_8_Template_mdb_color_picker_alpha_slider_input_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r4.onAlphaInput($event);\n    })(\"ngModelChange\", function MdbColorPickerComponent_div_0_div_8_Template_mdb_color_picker_alpha_slider_ngModelChange_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r6.opacityValue = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r1.alphaChannel)(\"ngModel\", ctx_r1.opacityValue)(\"default\", ctx_r1.defaultRangeSlider);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\n\nfunction MdbColorPickerComponent_div_0_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 16);\n    ɵngcc0.ɵɵelement(1, \"div\", 17);\n    ɵngcc0.ɵɵelementStart(2, \"p\", 18);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx_r2.colorString || \"white\"));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.colorString);\n  }\n}\n\nfunction MdbColorPickerComponent_div_0_div_16_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 21);\n  }\n\n  if (rf & 2) {\n    const i_r9 = ctx.index;\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(1, _c1, ctx_r7.setColorPaletteCircleColor(i_r9)));\n  }\n}\n\nfunction MdbColorPickerComponent_div_0_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 19);\n    ɵngcc0.ɵɵtemplate(2, MdbColorPickerComponent_div_0_div_16_div_2_Template, 1, 3, \"div\", 20);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.colorPalette);\n  }\n}\n\nfunction MdbColorPickerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 2);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(4, \"mdb-color-palette\", 5);\n    ɵngcc0.ɵɵlistener(\"color\", function MdbColorPickerComponent_div_0_Template_mdb_color_palette_color_4_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.color = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(6, \"div\", 6);\n    ɵngcc0.ɵɵelementStart(7, \"mdb-color-slider\", 7);\n    ɵngcc0.ɵɵlistener(\"color\", function MdbColorPickerComponent_div_0_Template_mdb_color_slider_color_7_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.hue = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(8, MdbColorPickerComponent_div_0_div_8_Template, 3, 3, \"div\", 8);\n    ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n    ɵngcc0.ɵɵtemplate(11, MdbColorPickerComponent_div_0_div_11_Template, 4, 4, \"div\", 11);\n    ɵngcc0.ɵɵprojection(12);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(13, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(14, \"div\", 12);\n    ɵngcc0.ɵɵprojection(15, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(16, MdbColorPickerComponent_div_0_div_16_Template, 3, 1, \"div\", 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"hue\", ctx_r0.hue);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.config.showOpacitySlider);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.config.showRgbaHexColorText);\n    ɵngcc0.ɵɵadvance(5);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.config.showPalette);\n  }\n}\n\nconst _c2 = [[[\"\", 8, \"color-picker-switch\"]], [[\"\", 8, \"color-picker-buttons\"]]];\nconst _c3 = [\".color-picker-switch\", \".color-picker-buttons\"];\nconst _c4 = [\"handle\"];\nconst _c5 = [\"slider\"];\nconst _c6 = [\"input\"];\nconst _c7 = [\"rangeCloud\"];\nconst _c8 = [\"rangeField\"];\n\nconst _c9 = function (a0, a1) {\n  return {\n    \"visible\": a0,\n    \"hidden\": a1\n  };\n};\n\nfunction MdbColorPickerAlphaSliderComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2, 3);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 5, 6);\n    ɵngcc0.ɵɵelementStart(5, \"span\", 7);\n    ɵngcc0.ɵɵtext(6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(7, \"input\", 8, 9);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function MdbColorPickerAlphaSliderComponent_div_0_Template_input_ngModelChange_7_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.range = $event;\n    })(\"focus\", function MdbColorPickerAlphaSliderComponent_div_0_Template_input_focus_7_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.visibility = true;\n    })(\"blur\", function MdbColorPickerAlphaSliderComponent_div_0_Template_input_blur_7_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.visibility = false;\n    })(\"input\", function MdbColorPickerAlphaSliderComponent_div_0_Template_input_input_7_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.coverage($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(10, _c9, ctx_r0.visibility, !ctx_r0.visibility));\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.range);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r0.name)(\"disabled\", ctx_r0.disabled)(\"id\", ctx_r0.id)(\"min\", ctx_r0.min)(\"max\", ctx_r0.max)(\"step\", ctx_r0.step)(\"value\", ctx_r0.value)(\"ngModel\", ctx_r0.range);\n  }\n}\n\nfunction MdbColorPickerAlphaSliderComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelementStart(1, \"input\", 10, 9);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function MdbColorPickerAlphaSliderComponent_div_1_Template_input_ngModelChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.range = $event;\n    })(\"focus\", function MdbColorPickerAlphaSliderComponent_div_1_Template_input_focus_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.visibility = true;\n    })(\"blur\", function MdbColorPickerAlphaSliderComponent_div_1_Template_input_blur_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.visibility = false;\n    })(\"input\", function MdbColorPickerAlphaSliderComponent_div_1_Template_input_input_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.coverage($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r1.name)(\"id\", ctx_r1.id)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"step\", ctx_r1.step)(\"value\", ctx_r1.value)(\"ngModel\", ctx_r1.range);\n    ɵngcc0.ɵɵattribute(\"value\", ctx_r1.value);\n  }\n}\n\nlet MdbColorPickerService = /*#__PURE__*/(() => {\n  class MdbColorPickerService {\n    constructor() {\n      this._segmentedColorChange = new Subject();\n      this._alpha = '0.5';\n      this._alphaChange = new Subject();\n      this._coordsChange = new Subject();\n      this._rgbaSegments = ['255', '255', '255', '0.5'];\n      this._color = {\n        rgbaColor: '',\n        hexColor: ''\n      };\n      this._colorChange = new Subject();\n      this._colorPalette = [];\n      this._colorPaletteChange = new Subject();\n    }\n\n    setColorPalette(colorArray) {\n      this._colorPalette = colorArray;\n\n      this._colorPaletteChange.next(this.getColorPalette());\n    }\n\n    addColorToPalette(color) {\n      this._colorPalette.push(color);\n\n      this._colorPaletteChange.next(this.getColorPalette());\n    }\n\n    getColorPalette() {\n      return this._colorPalette;\n    }\n\n    removeColorFromPalette(index) {\n      this._colorPalette.splice(index, 1);\n    }\n\n    colorPaletteWasChanged() {\n      return this._colorPaletteChange;\n    }\n\n    setColor(rgbaColor, hexColor) {\n      this._color.rgbaColor = rgbaColor;\n      this._color.hexColor = hexColor;\n\n      this._colorChange.next(this.getColor());\n    }\n\n    getColor() {\n      return this._color;\n    }\n\n    colorWasChanged() {\n      return this._colorChange;\n    }\n\n    setSegmentedColor(value) {\n      this._segmentedColor = value;\n\n      this._segmentedColorChange.next(this.getSegmentedColor());\n\n      const rgbaColor = this.convertToRGBA();\n      const hexColor = this.rgbaToHex(this.getRgbaColor());\n      this.setColor(rgbaColor, hexColor);\n    }\n\n    getSegmentedColor() {\n      return this._segmentedColor;\n    }\n\n    colorSegmentedWasChanged() {\n      return this._segmentedColorChange;\n    }\n\n    setAlpha(value) {\n      this._alpha = value;\n\n      this._alphaChange.next(this.getAlpha());\n\n      const rgbaColor = this.convertToRGBA();\n      const hexColor = this.rgbaToHex(this.getRgbaColor());\n      this.setColor(rgbaColor, hexColor);\n    }\n\n    getAlpha() {\n      return this._alpha;\n    }\n\n    alphaWasChanged() {\n      return this._alphaChange;\n    }\n\n    setCoords(value) {\n      this._coords = value;\n\n      this._coordsChange.next(this.getCoords());\n    }\n\n    getCoords() {\n      return this._coords;\n    }\n\n    coordsWasChanged() {\n      return this._coordsChange;\n    }\n\n    convertToRGBA() {\n      this._rgbaColor = this.getSegmentedColor().split(',');\n      const alphaChannel = this.getAlpha();\n      this._rgbaSegments[0] = this._rgbaColor[0];\n      this._rgbaSegments[1] = this._rgbaColor[1];\n      this._rgbaSegments[2] = this._rgbaColor[2];\n      this._rgbaSegments[3] = alphaChannel;\n      return 'rgba(' + this._rgbaSegments.toString() + ')';\n    }\n\n    getRgbaColor() {\n      return this.convertToRGBA();\n    }\n\n    getHexColor() {\n      return this.rgbaToHex(this.getSegmentedColor() + ',' + this.getAlpha());\n    }\n\n    rgbaToHex(value) {\n      value = value.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n      return value && value.length === 4 ? '#' + ('0' + parseInt(value[1], 10).toString(16)).slice(-2) + ('0' + parseInt(value[2], 10).toString(16)).slice(-2) + ('0' + parseInt(value[3], 10).toString(16)).slice(-2) : '';\n    }\n\n    hexToRgba(value, alpha) {\n      const r = parseInt(value.slice(1, 3), 16);\n      const g = parseInt(value.slice(3, 5), 16);\n      const b = parseInt(value.slice(5, 7), 16);\n\n      if (alpha) {\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n      } else {\n        return `rgb(${r}, ${g}, ${b})`;\n      }\n    }\n\n  }\n\n  MdbColorPickerService.ɵfac = function MdbColorPickerService_Factory(t) {\n    return new (t || MdbColorPickerService)();\n  };\n\n  MdbColorPickerService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function MdbColorPickerService_Factory() {\n      return new MdbColorPickerService();\n    },\n    token: MdbColorPickerService,\n    providedIn: \"root\"\n  });\n  return MdbColorPickerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbColorPaletteComponent = /*#__PURE__*/(() => {\n  class MdbColorPaletteComponent {\n    constructor(renderer, colorService, platformId) {\n      this.renderer = renderer;\n      this.colorService = colorService;\n      this.platformId = platformId;\n      this.color = new EventEmitter(true);\n      this.mousedown = false;\n      this.isBrowser = false;\n      this.isBrowser = isPlatformBrowser(this.platformId);\n      this.colorService.coordsWasChanged().subscribe(data => {\n        this.getColorAtPosition(data.x, data.y);\n        this.selectedPosition = {\n          x: data.x,\n          y: data.y\n        };\n        this.draw();\n      });\n      this.colorService.colorWasChanged().subscribe(() => {\n        this.draw();\n      });\n    }\n\n    onmouseup() {\n      this.mousedown = false;\n    }\n\n    draw() {\n      if (this.isBrowser) {\n        if (!this.ctx) {\n          this.ctx = this.canvas.nativeElement.getContext('2d');\n        }\n\n        setTimeout(() => {\n          const canvasParentWidth = this.canvas.nativeElement.parentElement.parentElement.clientWidth;\n          this.renderer.setAttribute(this.canvas.nativeElement, 'width', canvasParentWidth + 'px');\n          const width = this.canvas.nativeElement.clientWidth;\n          const height = this.canvas.nativeElement.clientHeight;\n          this.ctx.fillStyle = this.hue || 'rgba(255, 255, 255, 1)';\n          this.ctx.fillRect(0, 0, width, height);\n          const whiteGrad = this.ctx.createLinearGradient(0, 0, width, 0);\n          whiteGrad.addColorStop(0, 'rgba(255, 255, 255, 1)');\n          whiteGrad.addColorStop(1, 'rgba(255, 255, 255, 0)');\n          this.ctx.fillStyle = whiteGrad;\n          this.ctx.fillRect(0, 0, width, height);\n          const blackGrad = this.ctx.createLinearGradient(0, 0, 0, height);\n          blackGrad.addColorStop(0, 'rgba(0, 0, 0, 0)');\n          blackGrad.addColorStop(1, 'rgba(0, 0, 0, 1)');\n          this.ctx.fillStyle = blackGrad;\n          this.ctx.fillRect(0, 0, width, height);\n\n          if (this.selectedPosition) {\n            this.ctx.strokeStyle = 'white';\n            this.ctx.fillStyle = 'white';\n            this.ctx.beginPath();\n            this.ctx.arc(this.selectedPosition.x, this.selectedPosition.y, 5, 0, 2 * Math.PI);\n            this.ctx.lineWidth = 2;\n            this.ctx.stroke();\n          }\n        }, 0);\n      }\n    }\n\n    ngOnChanges(changes) {\n      if (changes['hue']) {\n        this.draw();\n        const pos = this.selectedPosition;\n\n        if (pos) {\n          this.getColorAtPosition(pos.x, pos.y);\n        }\n      }\n    }\n\n    onMouseDown(event) {\n      this.mousedown = true;\n\n      if (event.type === 'touchstart') {\n        const rect = event.target.getBoundingClientRect();\n        this.selectedPosition = {\n          x: event.targetTouches[0].pageX - rect.left,\n          y: event.targetTouches[0].pageY - rect.top\n        };\n      } else if (event.type === 'mousedown') {\n        this.selectedPosition = {\n          x: event.offsetX,\n          y: event.offsetY\n        };\n      }\n\n      this.draw();\n      this.getColorAtPosition(this.selectedPosition.x, this.selectedPosition.y);\n    }\n\n    onMouseMove(event) {\n      if (this.mousedown) {\n        if (event.type === 'touchmove') {\n          event.preventDefault();\n          const rect = event.target.getBoundingClientRect();\n          this.selectedPosition = {\n            x: event.targetTouches[0].pageX - rect.left,\n            y: event.targetTouches[0].pageY - rect.top\n          };\n        } else if (event.type === 'mousemove') {\n          this.selectedPosition = {\n            x: event.offsetX,\n            y: event.offsetY\n          };\n        }\n\n        this.draw();\n        this.getColorAtPosition(this.selectedPosition.x, this.selectedPosition.y);\n      }\n    }\n\n    getColorAtPosition(x, y) {\n      if (this.isBrowser) {\n        const imageData = this.ctx.getImageData(x, y, 1, 1).data;\n        this.colorService.setSegmentedColor(`${imageData[0]},${imageData[1]},${imageData[2]}`);\n        return 'rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)';\n      }\n    }\n\n    pickColorAtStart(x, y) {\n      if (this.isBrowser) {\n        this.selectedPosition = {\n          x: x,\n          y: y\n        };\n        this.ctx.strokeStyle = 'white';\n        this.ctx.fillStyle = 'white';\n        this.ctx.beginPath();\n        this.ctx.arc(this.selectedPosition.x, this.selectedPosition.y, 10, 0, 2 * Math.PI);\n        this.ctx.lineWidth = 5;\n        this.ctx.stroke();\n        this.getColorAtPosition(x, y);\n        this.colorService.setCoords({\n          x: x,\n          y: y\n        });\n      }\n    }\n\n    ngAfterViewInit() {\n      setTimeout(() => {\n        this.pickColorAtStart(195, 75);\n        this.draw();\n      }, 0);\n    }\n\n  }\n\n  MdbColorPaletteComponent.ɵfac = function MdbColorPaletteComponent_Factory(t) {\n    return new (t || MdbColorPaletteComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(MdbColorPickerService), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  MdbColorPaletteComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbColorPaletteComponent,\n    selectors: [[\"mdb-color-palette\"]],\n    viewQuery: function MdbColorPaletteComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n      }\n    },\n    hostBindings: function MdbColorPaletteComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseup\", function MdbColorPaletteComponent_mouseup_HostBindingHandler() {\n          return ctx.onmouseup();\n        }, false, ɵngcc0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      hue: \"hue\"\n    },\n    outputs: {\n      color: \"color\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"color-palette\", 3, \"mousedown\", \"touchstart\", \"touchmove\", \"mousemove\"], [\"canvas\", \"\"]],\n    template: function MdbColorPaletteComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"canvas\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MdbColorPaletteComponent_Template_canvas_mousedown_0_listener($event) {\n          return ctx.onMouseDown($event);\n        })(\"touchstart\", function MdbColorPaletteComponent_Template_canvas_touchstart_0_listener($event) {\n          return ctx.onMouseDown($event);\n        })(\"touchmove\", function MdbColorPaletteComponent_Template_canvas_touchmove_0_listener($event) {\n          return ctx.onMouseMove($event);\n        })(\"mousemove\", function MdbColorPaletteComponent_Template_canvas_mousemove_0_listener($event) {\n          return ctx.onMouseMove($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".color-palette[_ngcontent-%COMP%]:hover{cursor:pointer}\"]\n  });\n  return MdbColorPaletteComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbColorPickerComponent = /*#__PURE__*/(() => {\n  class MdbColorPickerComponent {\n    constructor(colorService, cdRef, el, renderer) {\n      this.colorService = colorService;\n      this.cdRef = cdRef;\n      this.el = el;\n      this.renderer = renderer;\n      this.colorPalette = [];\n      this.defaultRangeSlider = true;\n      this.config = {\n        showPalette: true,\n        showOpacitySlider: true,\n        showRgbaHexColorText: true\n      };\n      this.alphaChannel = '0.5';\n      this.opacityValue = '';\n      this.colorSegments = ['255', '255', '255', '1'];\n      this.switchValue = false;\n      this.isBrowser = false;\n      this.showPicker = false;\n      this.componentDestroyed = new Subject();\n      this.colorService.colorSegmentedWasChanged().pipe(takeUntil(this.componentDestroyed)).subscribe(data => {\n        this.colorString = 'rgba(' + data.split(',') + ', ' + this.alphaChannel + ')';\n        this.color = this.colorService.getSegmentedColor();\n        this.color = this.color.split(',');\n        this.change();\n        this.cdRef.detectChanges();\n      });\n      this.colorService.alphaWasChanged().subscribe(() => {\n        this.alphaChannel = this.colorService.getAlpha();\n      });\n      this.colorService.coordsWasChanged().subscribe(() => {\n        this.colorService.colorWasChanged().subscribe(color => {\n          if (this.switchValue === false) {\n            this.colorString = color.rgbaColor;\n          } else {\n            this.colorString = color.hexColor;\n          }\n        });\n      });\n      this.colorService.colorPaletteWasChanged().subscribe(data => {\n        this.colorPalette = data;\n      }); // Resolves problem with hidden canvas of color picker and color slider\n      // when color picker component was placed inside of static modal\n\n      this.observer = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n          const stylesAttribute = mutation.target.getAttribute('style');\n\n          if (stylesAttribute) {\n            this.showPicker = stylesAttribute.includes('visibility: visible');\n            this.cdRef.detectChanges();\n          }\n        });\n      });\n      this.observer.observe(this.el.nativeElement, {\n        attributes: true,\n        childList: true,\n        characterData: true\n      });\n    }\n\n    setOptions() {\n      if (this.options !== undefined) {\n        Object.keys(this.options).forEach(k => {\n          this.config[k] = this.options[k];\n        });\n      }\n    }\n\n    onAlphaInput(event) {\n      this.colorService.setAlpha(event.target.value);\n      this.colorSegments[0] = this.color[0];\n      this.colorSegments[1] = this.color[1];\n      this.colorSegments[2] = this.color[2];\n      this.colorSegments[3] = this.alphaChannel;\n      this.colorString = 'rgba(' + this.colorSegments.toString() + ')';\n      this.change();\n    }\n\n    copyToClipboard(type) {\n      const el = this.renderer.createElement('textarea');\n\n      if (type === 'color') {\n        el.value = this.colorString;\n      } else if (type === 'palette') {\n        this.colorService.getColorPalette().forEach(color => {\n          el.value += '{';\n          el.value += 'rgbaColor: ' + `'${color.rgbaColor}'` + ', ';\n          el.value += 'hexColor: ' + `'${color.hexColor}'`;\n          el.value += '}, ';\n        });\n      }\n\n      this.renderer.setAttribute(el, 'readonly', '');\n      this.renderer.setStyle(el, 'position', 'absolute');\n      this.renderer.setStyle(el, 'left', '-9999px');\n      this.renderer.appendChild(document.body, el);\n      el.select();\n      document.execCommand('copy');\n      this.renderer.removeChild(document.body, el);\n    }\n\n    clearColor() {\n      if (this.colorService.getCoords()) {\n        this.colorService.setCoords({\n          x: this.colorService.getCoords().x,\n          y: this.colorService.getCoords().y\n        });\n      } else {\n        this.colorService.setCoords({\n          x: 122,\n          y: 137\n        });\n      }\n\n      this.change();\n\n      if (this.colorService.getAlpha() !== '0.5') {\n        this.colorService.setAlpha(this.colorService.getAlpha());\n      } else {\n        this.colorService.setAlpha('0.5');\n      }\n\n      this.colorService.setColorPalette([]);\n    }\n\n    addColorToPalette() {\n      this.colorService.addColorToPalette({\n        rgbaColor: this.colorService.getColor().rgbaColor,\n        hexColor: this.colorService.getColor().hexColor\n      });\n      this.colorPalette = this.colorService.getColorPalette();\n    }\n\n    setColorPaletteCircleColor(index) {\n      if (!this.switchValue) {\n        return this.colorPalette[index].rgbaColor;\n      } else if (this.switchValue) {\n        return this.colorPalette[index].hexColor;\n      }\n    }\n\n    changeColorSystemTo(colorSystem) {\n      if (colorSystem === 'rgba') {\n        this.colorString = this.colorService.getColor().rgbaColor;\n        return 'rgba';\n      } else {\n        this.colorString = this.colorService.getColor().hexColor;\n        return 'hex';\n      }\n    }\n\n    change() {\n      if (!this.switchValue) {\n        this.changeColorSystemTo('rgba');\n      } else {\n        this.changeColorSystemTo('hex');\n      }\n    }\n\n    changeColorType() {\n      this.switchValue = !this.switchValue;\n      this.change();\n    }\n\n    ngAfterViewInit() {\n      this.changeColorSystemTo('rgba');\n\n      if (this.colorPalette) {\n        this.colorService.setColorPalette(this.colorPalette);\n      }\n\n      this.setOptions();\n      this.cdRef.detectChanges();\n    }\n\n    ngOnDestroy() {\n      this.observer.disconnect();\n      this.componentDestroyed.next();\n      this.componentDestroyed.complete();\n    }\n\n  }\n\n  MdbColorPickerComponent.ɵfac = function MdbColorPickerComponent_Factory(t) {\n    return new (t || MdbColorPickerComponent)(ɵngcc0.ɵɵdirectiveInject(MdbColorPickerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  MdbColorPickerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbColorPickerComponent,\n    selectors: [[\"mdb-color-picker\"]],\n    inputs: {\n      colorPalette: \"colorPalette\",\n      defaultRangeSlider: \"defaultRangeSlider\",\n      options: \"options\"\n    },\n    exportAs: [\"mdb-color-picker\"],\n    ngContentSelectors: _c3,\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"card d-flex\", 4, \"ngIf\"], [1, \"card\", \"d-flex\"], [1, \"card-body\", \"color-picker-card\", \"flex-column\", \"flex-center\"], [1, \"row\", \"w-100\"], [1, \"col-md-12\", \"w-100\", \"d-flex\", \"flex-column\", \"flex-center\"], [3, \"hue\", \"color\"], [1, \"col-md-12\", \"py-2\", \"d-flex\"], [3, \"color\"], [\"class\", \"row w-100\", 4, \"ngIf\"], [1, \"row\"], [1, \"col-md-12\", \"d-flex\", \"flex-center\", \"flex-column\"], [\"class\", \"flex-row py-2 flex-center\", 4, \"ngIf\"], [1, \"col-md-12\", \"d-flex\", \"flex-center\", \"text-center\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"col-md-12\", \"py-2\", \"d-flex\", \"p-0\"], [\"id\", \"range\", \"min\", \"0\", \"max\", \"1\", \"step\", \"0.01\", 1, \"w-100\", 3, \"value\", \"ngModel\", \"default\", \"input\", \"ngModelChange\"], [1, \"flex-row\", \"py-2\", \"flex-center\"], [1, \"color-div\", \"z-depth-1\", \"mx-2\", 3, \"ngStyle\"], [1, \"\"], [1, \"col-md-12\", \"d-flex\", \"flex-center\", \"text-center\", \"flex-wrap\"], [\"class\", \"color-palette-circle m-1 d-flex flex-center\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"color-palette-circle\", \"m-1\", \"d-flex\", \"flex-center\", 3, \"ngStyle\"]],\n    template: function MdbColorPickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵtemplate(0, MdbColorPickerComponent_div_0_Template, 17, 4, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showPicker);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, MdbColorPaletteComponent, MdbColorSliderComponent, MdbColorPickerAlphaSliderComponent, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgStyle, ɵngcc1.NgForOf];\n    },\n    styles: [\".input-wrapper[_ngcontent-%COMP%]{margin-top:16px;display:flex;border-radius:1px;border:1px solid gainsboro;padding:8px;height:32px;justify-content:center}.color-div[_ngcontent-%COMP%]{width:1rem;height:1rem;border-radius:50%}.color-slider-text[_ngcontent-%COMP%]{margin-top:-5px}.switch.primary-switch[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked + .lever[_ngcontent-%COMP%]{background-color:#689df6}.switch[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked + .lever[_ngcontent-%COMP%]:after{background-color:#4285f4}.color-palette-circle[_ngcontent-%COMP%]{width:2rem;height:2rem;border-radius:50%}\"]\n  });\n  return MdbColorPickerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbColorDraggableDirective = /*#__PURE__*/(() => {\n  class MdbColorDraggableDirective {\n    constructor(el) {\n      this.el = el;\n      this.elementPosition = {\n        x: 0\n      };\n      this.movable = true;\n    }\n\n    onStartMove(event) {\n      this.isElementMoving = true;\n      this.startMoving(event);\n    }\n\n    onMove(event) {\n      if (!this.isElementMoving) {\n        return;\n      }\n\n      this.movingOver(event);\n    }\n\n    onEndMove() {\n      if (!this.isElementMoving) {\n        return;\n      }\n\n      this.isElementMoving = false;\n    }\n\n    startMoving(event) {\n      if (event.type === 'mousedown') {\n        this.startingPosition = {\n          x: event.clientX - this.elementPosition.x\n        };\n      } else {\n        this.startingPosition = {\n          x: event.changedTouches[0].clientX - this.elementPosition.x\n        };\n      }\n    }\n\n    movingOver(event) {\n      if (event.type === 'mousemove') {\n        this.elementPosition.x = event.clientX - this.startingPosition.x;\n      } else {\n        this.elementPosition.x = event.changedTouches[0].clientX - this.startingPosition.x;\n      }\n\n      this.updatePosition();\n    }\n\n    moveTo(value) {\n      this.elementPosition.x = value;\n      this.updatePosition();\n    }\n\n    updatePosition() {\n      if (this.elementPosition.x >= 1 && this.elementPosition.x <= this.el.nativeElement.parentElement.offsetWidth) {\n        requestAnimationFrame(() => {\n          this.el.nativeElement.style.transform = `\n                translateX(${this.elementPosition.x}px)\n              `;\n        });\n      }\n    }\n\n  }\n\n  MdbColorDraggableDirective.ɵfac = function MdbColorDraggableDirective_Factory(t) {\n    return new (t || MdbColorDraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdbColorDraggableDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdbColorDraggableDirective,\n    selectors: [[\"\", \"mdbColorDraggable\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MdbColorDraggableDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MdbColorDraggableDirective_mousedown_HostBindingHandler($event) {\n          return ctx.onStartMove($event);\n        })(\"touchstart\", function MdbColorDraggableDirective_touchstart_HostBindingHandler($event) {\n          return ctx.onStartMove($event);\n        })(\"mousemove\", function MdbColorDraggableDirective_mousemove_HostBindingHandler($event) {\n          return ctx.onMove($event);\n        }, false, ɵngcc0.ɵɵresolveDocument)(\"touchmove\", function MdbColorDraggableDirective_touchmove_HostBindingHandler($event) {\n          return ctx.onMove($event);\n        })(\"mouseup\", function MdbColorDraggableDirective_mouseup_HostBindingHandler() {\n          return ctx.onEndMove();\n        }, false, ɵngcc0.ɵɵresolveDocument)(\"touchend\", function MdbColorDraggableDirective_touchend_HostBindingHandler() {\n          return ctx.onEndMove();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mdb-movable\", ctx.movable);\n      }\n    }\n  });\n  return MdbColorDraggableDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbColorSliderComponent = /*#__PURE__*/(() => {\n  class MdbColorSliderComponent {\n    constructor(renderer, el, platformId) {\n      this.renderer = renderer;\n      this.el = el;\n      this.platformId = platformId;\n      this.color = new EventEmitter();\n      this.mousedown = false;\n      this.previousImageData = null;\n      this.isBrowser = false;\n      this.isBrowser = isPlatformBrowser(this.platformId);\n    }\n\n    handleMouseDown() {\n      if (this.isBrowser) {\n        this.mousedown = true;\n        this.renderer.addClass(this.handle.nativeElement, 'pop');\n        this.renderer.addClass(this.slider.nativeElement, 'grad');\n        this.renderer.setStyle(this.canvas.nativeElement, 'margin-left', '-13px');\n      }\n    }\n\n    moveColorCircleToPosition(event) {\n      const rect = event.target.getBoundingClientRect();\n      let pos = null;\n\n      if (event.type === 'touchmove') {\n        event.preventDefault();\n        this.drag.moveTo(event.targetTouches[0].pageX - rect.left);\n        this.drag.elementPosition.x = event.targetTouches[0].pageX - rect.left;\n        pos = {\n          x: event.targetTouches[0].pageX - this.slider.nativeElement.getBoundingClientRect().left,\n          y: event.targetTouches[0].pageY - this.slider.nativeElement.getBoundingClientRect().top\n        };\n      } else if (event.type === 'click') {\n        this.drag.moveTo(event.layerX);\n        this.drag.elementPosition.x = event.layerX;\n        pos = {\n          x: event.x - this.slider.nativeElement.getBoundingClientRect().x,\n          y: event.y - this.slider.nativeElement.getBoundingClientRect().y\n        };\n      }\n\n      if (pos !== null) {\n        this.draw();\n        this.emitColor(pos.x, pos.y);\n        this.renderer.setStyle(this.handle.nativeElement, 'background-color', this.getColorAtPosition(pos.x, pos.y));\n      }\n    }\n\n    handleMouseUp() {\n      this.mousedown = false;\n      this.renderer.removeClass(this.handle.nativeElement, 'pop');\n      this.renderer.removeClass(this.slider.nativeElement, 'grad');\n    }\n\n    handleMouseMove(event) {\n      if (this.mousedown) {\n        let left = 0;\n        let pos = null;\n\n        if (event.type === 'touchmove') {\n          event.preventDefault();\n          left = event.targetTouches[0].pageX - this.slider.nativeElement.getBoundingClientRect().left + 5;\n          const rect = event.target.getBoundingClientRect();\n          pos = {\n            x: event.targetTouches[0].pageX - rect.left,\n            y: event.targetTouches[0].pageY - rect.top\n          };\n        } else if (event.type === 'mousemove') {\n          left = event.clientX - this.slider.nativeElement.getBoundingClientRect().left + 5;\n          pos = {\n            x: event.x - this.slider.nativeElement.getBoundingClientRect().x,\n            y: event.y - this.slider.nativeElement.getBoundingClientRect().y\n          };\n        }\n\n        if (left <= this.sliderParent.clientWidth && pos !== null) {\n          this.draw();\n          this.emitColor(pos.x, pos.y);\n          this.renderer.setStyle(this.handle.nativeElement, 'background-color', this.getColorAtPosition(pos.x, pos.y));\n        }\n      }\n    }\n\n    draw() {\n      if (this.isBrowser) {\n        if (!this.ctx) {\n          this.ctx = this.canvas.nativeElement.getContext('2d');\n        }\n\n        setTimeout(() => {\n          const width = this.sliderParent.clientWidth;\n          const height = 12;\n          this.renderer.setAttribute(this.canvas.nativeElement, 'width', width + 'px');\n          let grd;\n          grd = this.ctx.createLinearGradient(0.0, 150.0, width, 12);\n          grd.addColorStop(0.0, 'rgba(255, 0, 0, 1.000)');\n          grd.addColorStop(0.2, 'rgba(255, 0, 255, 1.000)');\n          grd.addColorStop(0.35, 'rgba(0, 0, 255, 1.000)');\n          grd.addColorStop(0.52, 'rgba(0, 255, 255, 1.000)');\n          grd.addColorStop(0.71, 'rgba(0, 255, 0, 1.000)');\n          grd.addColorStop(0.88, 'rgba(255, 255, 0, 1.000)');\n          grd.addColorStop(1.0, 'rgba(255, 0, 148, 1.000)');\n          this.ctx.fillStyle = grd;\n          this.ctx.fillRect(0, 0, width, height);\n        }, 0);\n      }\n    }\n\n    ngAfterViewInit() {\n      if (this.isBrowser) {\n        this.sliderParent = this.slider.nativeElement.parentElement.parentElement.parentElement;\n        this.renderer.setStyle(this.slider.nativeElement, 'width', this.sliderParent.clientWidth + 'px');\n        this.draw();\n        this.renderer.setStyle(this.canvas.nativeElement, 'margin-left', '-13px');\n        this.setCanvasParentsWidth();\n      }\n    }\n\n    setCanvasParentsWidth() {\n      setTimeout(() => {\n        this.renderer.setStyle(this.el.nativeElement, 'width', this.sliderParent.clientWidth + 'px');\n      }, 0);\n    }\n\n    emitColor(x, y) {\n      const rgbaColor = this.getColorAtPosition(x, y);\n      this.color.emit(rgbaColor);\n    }\n\n    getColorAtPosition(x, y) {\n      if (this.isBrowser) {\n        const imageData = this.ctx.getImageData(x, y, 1, 1).data;\n\n        if (imageData[0] + imageData[1] + imageData[2] > 0 || this.previousImageData == null) {\n          this.previousImageData = imageData;\n        } else {\n          return `rgba(${this.previousImageData[0]},${this.previousImageData[1]}, ${this.previousImageData[2]}, 1)`;\n        }\n\n        return 'rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)';\n      }\n    }\n\n  }\n\n  MdbColorSliderComponent.ɵfac = function MdbColorSliderComponent_Factory(t) {\n    return new (t || MdbColorSliderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  MdbColorSliderComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbColorSliderComponent,\n    selectors: [[\"mdb-color-slider\"]],\n    viewQuery: function MdbColorSliderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c4, 7);\n        ɵngcc0.ɵɵviewQuery(_c5, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n        ɵngcc0.ɵɵviewQuery(MdbColorDraggableDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.handle = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slider = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.drag = _t.first);\n      }\n    },\n    outputs: {\n      color: \"color\"\n    },\n    decls: 7,\n    vars: 0,\n    consts: [[1, \"row\"], [1, \"col-md-12\", \"slider\"], [\"slider\", \"\"], [\"height\", \"12\", 1, \"color-slider\", 3, \"touchmove\", \"click\", \"mousedown\", \"touchstart\", \"mouseup\", \"touchend\"], [\"canvas\", \"\"], [\"mdbColorDraggable\", \"\", 1, \"handle\", 3, \"mousemove\", \"mousedown\", \"mouseup\", \"touchmove\", \"touchstart\", \"touchend\"], [\"handle\", \"\"]],\n    template: function MdbColorSliderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n        ɵngcc0.ɵɵelementStart(3, \"canvas\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"touchmove\", function MdbColorSliderComponent_Template_canvas_touchmove_3_listener($event) {\n          return ctx.moveColorCircleToPosition($event);\n        })(\"click\", function MdbColorSliderComponent_Template_canvas_click_3_listener($event) {\n          return ctx.moveColorCircleToPosition($event);\n        })(\"mousedown\", function MdbColorSliderComponent_Template_canvas_mousedown_3_listener() {\n          return ctx.handleMouseDown();\n        })(\"touchstart\", function MdbColorSliderComponent_Template_canvas_touchstart_3_listener() {\n          return ctx.handleMouseDown();\n        })(\"mouseup\", function MdbColorSliderComponent_Template_canvas_mouseup_3_listener() {\n          return ctx.handleMouseUp();\n        })(\"touchend\", function MdbColorSliderComponent_Template_canvas_touchend_3_listener() {\n          return ctx.handleMouseUp();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"mousemove\", function MdbColorSliderComponent_Template_div_mousemove_5_listener($event) {\n          return ctx.handleMouseMove($event);\n        })(\"mousedown\", function MdbColorSliderComponent_Template_div_mousedown_5_listener() {\n          return ctx.handleMouseDown();\n        })(\"mouseup\", function MdbColorSliderComponent_Template_div_mouseup_5_listener() {\n          return ctx.handleMouseUp();\n        })(\"touchmove\", function MdbColorSliderComponent_Template_div_touchmove_5_listener($event) {\n          return ctx.handleMouseMove($event);\n        })(\"touchstart\", function MdbColorSliderComponent_Template_div_touchstart_5_listener() {\n          return ctx.handleMouseDown();\n        })(\"touchend\", function MdbColorSliderComponent_Template_div_touchend_5_listener() {\n          return ctx.handleMouseUp();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    directives: [MdbColorDraggableDirective],\n    styles: [\".color-slider[_ngcontent-%COMP%]:hover{cursor:pointer}.slider[_ngcontent-%COMP%]{position:relative;width:100%;height:12px;border-radius:2px}.color-slider[_ngcontent-%COMP%]{margin-bottom:10px}.handle[_ngcontent-%COMP%]{position:absolute;top:-8px;left:0;width:24px;height:24px;border-radius:12px;background:red;transition:box-shadow .2s}.handle[_ngcontent-%COMP%]:before{content:\\\"\\\";position:absolute;top:8px;left:50%;margin-left:-2px;background:inherit;width:4px;height:4px;border-radius:20px;transition:top .2s,left .2s,margin-left .2s,height .2s,width .2s}.handle.pop[_ngcontent-%COMP%]:before{top:-50px;left:50%;margin-left:-20px;background:inherit;width:40px;height:40px;border-radius:20px;box-shadow:0 4px 10px #0000004d}\"]\n  });\n  return MdbColorSliderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst RANGE_VALUE_ACCESOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdbColorPickerAlphaSliderComponent),\n  multi: true\n};\nlet MdbColorPickerAlphaSliderComponent = /*#__PURE__*/(() => {\n  class MdbColorPickerAlphaSliderComponent {\n    constructor(renderer, cdRef) {\n      this.renderer = renderer;\n      this.cdRef = cdRef;\n      this.min = 0;\n      this.max = 100;\n      this.rangeValueChange = new EventEmitter();\n      this.range = 0;\n      this.cloudRange = 0;\n      this.visibility = false; // Control Value Accessor Methods\n\n      this.onChange = _ => {};\n\n      this.onTouched = () => {};\n    }\n\n    onchange(event) {\n      this.onChange(event.target.value);\n    }\n\n    oninput(event) {\n      const value = +event.target.value;\n      this.rangeValueChange.emit({\n        value: value\n      });\n\n      if (this.checkIfSafari()) {\n        this.focusRangeInput();\n      }\n    }\n\n    onclick() {\n      this.focusRangeInput();\n    }\n\n    onmouseleave() {\n      if (this.checkIfSafari()) {\n        this.blurRangeInput();\n      }\n    }\n\n    focusRangeInput() {\n      this.input.nativeElement.focus();\n      this.visibility = true;\n    }\n\n    blurRangeInput() {\n      this.input.nativeElement.blur();\n      this.visibility = false;\n    }\n\n    coverage(event) {\n      if (typeof this.range === 'string' && this.range.length !== 0) {\n        return this.range;\n      }\n\n      if (!this.default) {\n        const newValue = event.target.value;\n        const newRelativeGain = newValue - this.min;\n        const inputWidth = this.input.nativeElement.offsetWidth;\n        let thumbOffset = 0;\n        const offsetAmmount = 15;\n        const distanceFromMiddle = newRelativeGain - this.steps / 2;\n        this.stepLength = inputWidth / this.steps;\n        thumbOffset = distanceFromMiddle / this.steps * offsetAmmount;\n        this.cloudRange = this.stepLength * newRelativeGain - thumbOffset;\n        this.renderer.setStyle(this.rangeCloud.nativeElement, 'left', this.cloudRange + 'px');\n      }\n    }\n\n    checkIfSafari() {\n      const isSafari = navigator.userAgent.indexOf('Safari') > -1;\n      const isChrome = navigator.userAgent.indexOf('Chrome') > -1;\n      const isFirefox = navigator.userAgent.indexOf('Firefox') > -1;\n      const isOpera = navigator.userAgent.indexOf('Opera') > -1;\n\n      if (isSafari && !isChrome && !isFirefox && !isOpera) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    ngAfterViewInit() {\n      this.steps = this.max - this.min;\n\n      if (this.value) {\n        this.range = this.value;\n        this.cdRef.detectChanges();\n      }\n    }\n\n    writeValue(value) {\n      this.value = value;\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n  }\n\n  MdbColorPickerAlphaSliderComponent.ɵfac = function MdbColorPickerAlphaSliderComponent_Factory(t) {\n    return new (t || MdbColorPickerAlphaSliderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MdbColorPickerAlphaSliderComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdbColorPickerAlphaSliderComponent,\n    selectors: [[\"mdb-color-picker-alpha-slider\"]],\n    viewQuery: function MdbColorPickerAlphaSliderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c6, 5);\n        ɵngcc0.ɵɵviewQuery(_c7, 5);\n        ɵngcc0.ɵɵviewQuery(_c8, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rangeCloud = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rangeField = _t.first);\n      }\n    },\n    hostBindings: function MdbColorPickerAlphaSliderComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function MdbColorPickerAlphaSliderComponent_change_HostBindingHandler($event) {\n          return ctx.onchange($event);\n        })(\"input\", function MdbColorPickerAlphaSliderComponent_input_HostBindingHandler($event) {\n          return ctx.oninput($event);\n        })(\"click\", function MdbColorPickerAlphaSliderComponent_click_HostBindingHandler() {\n          return ctx.onclick();\n        })(\"mouseleave\", function MdbColorPickerAlphaSliderComponent_mouseleave_HostBindingHandler() {\n          return ctx.onmouseleave();\n        });\n      }\n    },\n    inputs: {\n      min: \"min\",\n      max: \"max\",\n      value: \"value\",\n      disabled: \"disabled\",\n      id: \"id\",\n      required: \"required\",\n      name: \"name\",\n      step: \"step\",\n      default: \"default\",\n      defaultRangeCounterClass: \"defaultRangeCounterClass\"\n    },\n    outputs: {\n      rangeValueChange: \"rangeValueChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([RANGE_VALUE_ACCESOR])],\n    decls: 2,\n    vars: 2,\n    consts: [[\"class\", \"range-field\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"range-field\"], [\"rangeField\", \"\"], [1, \"track\"], [\"title\", \"range\", 1, \"range-cloud\", 3, \"ngClass\"], [\"rangeCloud\", \"\"], [1, \"text-transform\"], [\"type\", \"range\", 3, \"name\", \"disabled\", \"id\", \"min\", \"max\", \"step\", \"value\", \"ngModel\", \"ngModelChange\", \"focus\", \"blur\", \"input\"], [\"input\", \"\"], [\"type\", \"range\", 1, \"custom-range\", 3, \"name\", \"id\", \"min\", \"max\", \"step\", \"value\", \"ngModel\", \"ngModelChange\", \"focus\", \"blur\", \"input\"]],\n    template: function MdbColorPickerAlphaSliderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MdbColorPickerAlphaSliderComponent_div_0_Template, 9, 13, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MdbColorPickerAlphaSliderComponent_div_1_Template, 3, 8, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.default);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.default);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc2.RangeValueAccessor, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel],\n    encapsulation: 2\n  });\n  return MdbColorPickerAlphaSliderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbColorPickerToggleDirective = /*#__PURE__*/(() => {\n  class MdbColorPickerToggleDirective {\n    constructor(renderer) {\n      this.renderer = renderer;\n      this.transitionTime = 200;\n      this._isPickerVisible = false;\n      this._clickEventTarget = null;\n    }\n\n    onClick(event) {\n      this._clickEventTarget = event.target;\n      this.toggleColorPicker();\n    }\n\n    onWindowClick(event) {\n      if (event.target !== this._clickEventTarget && this._isPickerVisible && !this._getClosestEl(event.target, 'mdb-color-picker')) {\n        this.toggleColorPicker();\n      }\n    }\n\n    toggleColorPicker() {\n      const opacityStyle = this._isPickerVisible ? '0' : '1';\n      const visibilityStyle = this._isPickerVisible ? 'hidden' : 'visible';\n      this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'transition', `opacity ${this.transitionTime}ms`);\n      this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'opacity', opacityStyle);\n      this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'visibility', 'visible');\n      setTimeout(() => {\n        this.renderer.setStyle(this.mdbColorPickerToggle.el.nativeElement, 'visibility', visibilityStyle);\n      }, this.transitionTime);\n      this._isPickerVisible = !this._isPickerVisible;\n    }\n\n    _getClosestEl(el, selector) {\n      for (; el && el !== document; el = el.parentNode) {\n        if (el.matches && el.matches(selector)) {\n          return el;\n        }\n      }\n\n      return null;\n    }\n\n  }\n\n  MdbColorPickerToggleDirective.ɵfac = function MdbColorPickerToggleDirective_Factory(t) {\n    return new (t || MdbColorPickerToggleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  MdbColorPickerToggleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdbColorPickerToggleDirective,\n    selectors: [[\"\", \"mdbColorPickerToggle\", \"\"]],\n    hostBindings: function MdbColorPickerToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MdbColorPickerToggleDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"click\", function MdbColorPickerToggleDirective_click_HostBindingHandler($event) {\n          return ctx.onWindowClick($event);\n        }, false, ɵngcc0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      transitionTime: \"transitionTime\",\n      mdbColorPickerToggle: \"mdbColorPickerToggle\"\n    }\n  });\n  return MdbColorPickerToggleDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdbColorPickerModule = /*#__PURE__*/(() => {\n  class MdbColorPickerModule {}\n\n  MdbColorPickerModule.ɵfac = function MdbColorPickerModule_Factory(t) {\n    return new (t || MdbColorPickerModule)();\n  };\n\n  MdbColorPickerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdbColorPickerModule\n  });\n  MdbColorPickerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MdbColorPickerService],\n    imports: [[CommonModule, FormsModule]]\n  });\n  return MdbColorPickerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbColorPickerModule, {\n    declarations: function () {\n      return [MdbColorPickerComponent, MdbColorSliderComponent, MdbColorPaletteComponent, MdbColorDraggableDirective, MdbColorPickerToggleDirective, MdbColorPickerAlphaSliderComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [MdbColorPickerComponent, MdbColorSliderComponent, MdbColorPaletteComponent, MdbColorDraggableDirective, MdbColorPickerToggleDirective, MdbColorPickerAlphaSliderComponent];\n    }\n  });\n})();\n/*\n * Public API Surface of mdb-color-picker\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbColorDraggableDirective, MdbColorPaletteComponent, MdbColorPickerAlphaSliderComponent, MdbColorPickerComponent, MdbColorPickerModule, MdbColorPickerService, MdbColorPickerToggleDirective, MdbColorSliderComponent, RANGE_VALUE_ACCESOR }; //# sourceMappingURL=mdb-color-picker.js.map","map":null,"metadata":{},"sourceType":"module"}