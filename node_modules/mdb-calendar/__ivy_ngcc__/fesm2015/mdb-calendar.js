import { Component, EventEmitter, Input, Output, Renderer2, ViewChildren, NgModule } from '@angular/core';
import { MDBModalRef, MDBModalService, ButtonsModule, InputsModule, IconsModule, ModalModule, TooltipModule } from 'angular-bootstrap-md';
import { FormGroup, FormControl, ReactiveFormsModule } from '@angular/forms';
import { Subject } from 'rxjs';
import { parse, format, getYear, getMonth, getDate, startOfWeek, startOfDay, subDays, addDays, getDay, addHours, addMinutes, endOfDay, isToday, isWeekend, getDaysInMonth } from 'date-fns';
import { take } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'angular-bootstrap-md';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/common';

function EventModalComponent_div_48_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵelementStart(1, "button", 26);
    ɵngcc0.ɵɵlistener("click", function EventModalComponent_div_48_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onDelete(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 27);
    ɵngcc0.ɵɵlistener("click", function EventModalComponent_div_48_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onSave(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.cancelBtn);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.actionBtn);
} }
function EventModalComponent_div_49_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵelementStart(1, "button", 28);
    ɵngcc0.ɵɵlistener("click", function EventModalComponent_div_49_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.modalRef.hide(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 27);
    ɵngcc0.ɵɵlistener("click", function EventModalComponent_div_49_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onSave(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.cancelBtn);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.actionBtn);
} }
function MdbCalendarComponent_mdb_calendar_month_view_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mdb-calendar-month-view", 4);
    ɵngcc0.ɵɵlistener("dayClicked", function MdbCalendarComponent_mdb_calendar_month_view_1_Template_mdb_calendar_month_view_dayClicked_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onDayClick($event); })("eventClicked", function MdbCalendarComponent_mdb_calendar_month_view_1_Template_mdb_calendar_month_view_eventClicked_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onEventClick($event); })("viewChanged", function MdbCalendarComponent_mdb_calendar_month_view_1_Template_mdb_calendar_month_view_viewChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onViewChange($event); })("monthChanged", function MdbCalendarComponent_mdb_calendar_month_view_1_Template_mdb_calendar_month_view_monthChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onMonthChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("initDate", ctx_r0.startDate)("events", ctx_r0.events)("options", ctx_r0.calendarOptions)("weekDaysShort", ctx_r0.dayLabelsShort)("weekDayIndex", ctx_r0.weekDayIndex)("months", ctx_r0.months);
} }
function MdbCalendarComponent_mdb_calendar_week_view_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mdb-calendar-week-view", 5);
    ɵngcc0.ɵɵlistener("dateClicked", function MdbCalendarComponent_mdb_calendar_week_view_2_Template_mdb_calendar_week_view_dateClicked_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onDayClick($event); })("eventClicked", function MdbCalendarComponent_mdb_calendar_week_view_2_Template_mdb_calendar_week_view_eventClicked_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onEventClick($event); })("viewChanged", function MdbCalendarComponent_mdb_calendar_week_view_2_Template_mdb_calendar_week_view_viewChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onViewChange($event); })("weekChanged", function MdbCalendarComponent_mdb_calendar_week_view_2_Template_mdb_calendar_week_view_weekChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onWeekChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("initDate", ctx_r1.startDate)("events", ctx_r1.events)("options", ctx_r1.calendarOptions)("weekDaysShort", ctx_r1.weekDaysShort)("weekDayIndex", ctx_r1.weekDayIndex)("monthsShort", ctx_r1.monthsShort);
} }
function MdbCalendarComponent_mdb_calendar_list_view_3_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mdb-calendar-list-view", 6);
    ɵngcc0.ɵɵlistener("eventClicked", function MdbCalendarComponent_mdb_calendar_list_view_3_Template_mdb_calendar_list_view_eventClicked_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onEventClick($event); })("viewChanged", function MdbCalendarComponent_mdb_calendar_list_view_3_Template_mdb_calendar_list_view_viewChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.onViewChange($event); })("listChanged", function MdbCalendarComponent_mdb_calendar_list_view_3_Template_mdb_calendar_list_view_listChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.onListChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("initDate", ctx_r2.startDate)("events", ctx_r2.events)("options", ctx_r2.calendarOptions)("weekDayIndex", ctx_r2.weekDayIndex)("monthsShort", ctx_r2.monthsShort);
} }
const _c0 = ["dayEl"];
const _c1 = ["fullDayEl"];
const _c2 = function (a0, a1) { return { "light-blue lighten-5": a0, "rgba-mdb-color-slight": a1 }; };
function MdbCalendarWeekViewComponent_th_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c2, day_r3.isToday, day_r3.isWeekend && !day_r3.isToday));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate3(" ", day_r3.day, " ", day_r3.month, "/", day_r3.dayNumber, " ");
} }
const _c3 = function (a0, a1, a2, a3) { return { "mdb-event-long": a0, "mdb-event-start": a1, "mdb-event-end": a2, "mdb-event-single": a3 }; };
function MdbCalendarWeekViewComponent_td_26_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵlistener("click", function MdbCalendarWeekViewComponent_td_26_div_2_Template_div_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9); const event_r7 = restoredCtx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); ctx_r8.onEventClick(event_r7); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const event_r7 = ctx.$implicit;
    ɵngcc0.ɵɵclassMapInterpolate1("mdb-event mdb-event-long text-white small px-1 bg-", event_r7.color, "");
    ɵngcc0.ɵɵpropertyInterpolate("mdbTooltip", event_r7.name);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction4(6, _c3, event_r7.longEvent && !event_r7.eventStart && !event_r7.eventEnd, event_r7.longEvent && event_r7.eventStart, event_r7.longEvent && event_r7.eventEnd, !event_r7.longEvent));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(event_r7.name);
} }
const _c4 = function (a0, a1) { return { "mdb-today-cell": a0, "rgba-mdb-color-slight": a1 }; };
function MdbCalendarWeekViewComponent_td_26_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 16, 17);
    ɵngcc0.ɵɵlistener("click", function MdbCalendarWeekViewComponent_td_26_Template_td_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); const day_r4 = restoredCtx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onDateClick(day_r4); })("mousedown", function MdbCalendarWeekViewComponent_td_26_Template_td_mousedown_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); const day_r4 = restoredCtx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.fullDayMouseDown($event, day_r4); })("mouseup", function MdbCalendarWeekViewComponent_td_26_Template_td_mouseup_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11); const day_r4 = restoredCtx.$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.fullDayMouseUp($event, day_r4); })("mouseenter", function MdbCalendarWeekViewComponent_td_26_Template_td_mouseenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.fullDayMouseMove($event); });
    ɵngcc0.ɵɵtemplate(2, MdbCalendarWeekViewComponent_td_26_div_2_Template, 3, 11, "div", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r4 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c4, day_r4.isToday, day_r4.isWeekend && !day_r4.isToday));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", day_r4.events);
} }
const _c5 = function (a0, a1, a2, a3) { return { "mdb-vertical-event-long": a0, "mdb-vertical-event-start": a1, "mdb-vertical-event-end": a2, "mdb-vertical-single-event": a3 }; };
function MdbCalendarWeekViewComponent_tr_27_td_4_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵlistener("click", function MdbCalendarWeekViewComponent_tr_27_td_4_div_1_Template_div_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r23); const event_r21 = restoredCtx.$implicit; const ctx_r22 = ɵngcc0.ɵɵnextContext(3); ctx_r22.onEventClick(event_r21); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const event_r21 = ctx.$implicit;
    ɵngcc0.ɵɵclassMapInterpolate1("mdb-event text-white small px-1 bg-", event_r21.color, "");
    ɵngcc0.ɵɵpropertyInterpolate("mdbTooltip", event_r21.name);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction4(6, _c5, event_r21.longEvent && !event_r21.eventStart && !event_r21.eventEnd, event_r21.longEvent && event_r21.eventStart, event_r21.longEvent && event_r21.eventEnd, !event_r21.longEvent));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(event_r21.name);
} }
function MdbCalendarWeekViewComponent_tr_27_td_4_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 22);
    ɵngcc0.ɵɵlistener("mousedown", function MdbCalendarWeekViewComponent_tr_27_td_4_Template_td_mousedown_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r25); const date_r19 = restoredCtx.$implicit; const ctx_r24 = ɵngcc0.ɵɵnextContext(2); return ctx_r24.onMouseDown($event, date_r19); })("mouseup", function MdbCalendarWeekViewComponent_tr_27_td_4_Template_td_mouseup_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r25); const date_r19 = restoredCtx.$implicit; const ctx_r26 = ɵngcc0.ɵɵnextContext(2); return ctx_r26.onMouseUp($event, date_r19); })("mouseenter", function MdbCalendarWeekViewComponent_tr_27_td_4_Template_td_mouseenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.onMouseMove($event); })("click", function MdbCalendarWeekViewComponent_tr_27_td_4_Template_td_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r25); const date_r19 = restoredCtx.$implicit; const ctx_r28 = ɵngcc0.ɵɵnextContext(2); return ctx_r28.onDateClick(date_r19); });
    ɵngcc0.ɵɵtemplate(1, MdbCalendarWeekViewComponent_tr_27_td_4_div_1_Template, 3, 11, "div", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const date_r19 = ctx.$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(3, _c4, date_r19.isToday, date_r19.isWeekend && !date_r19.isToday));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", date_r19.events)("ngForTrackBy", ctx_r18.trackByFn);
} }
function MdbCalendarWeekViewComponent_tr_27_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr", null, 20);
    ɵngcc0.ɵɵelementStart(2, "th");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, MdbCalendarWeekViewComponent_tr_27_td_4_Template, 2, 6, "td", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r15 = ctx.$implicit;
    const index_r16 = ctx.index;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1("", index_r16, ":00");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", row_r15.row)("ngForTrackBy", ctx_r2.trackByFn);
} }
function MdbCalendarMonthViewComponent_th_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(day_r2);
} }
function MdbCalendarMonthViewComponent_tr_22_td_1_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵlistener("click", function MdbCalendarMonthViewComponent_tr_22_td_1_div_4_Template_div_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10); const event_r8 = restoredCtx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(3); ctx_r9.onEventClick(event_r8); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const event_r8 = ctx.$implicit;
    ɵngcc0.ɵɵclassMapInterpolate1("mdb-event mdb-event-long text-white small px-1 bg-", event_r8.color, "");
    ɵngcc0.ɵɵpropertyInterpolate("mdbTooltip", event_r8.name);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction4(6, _c3, event_r8.longEvent && !event_r8.eventStart && !event_r8.eventEnd, event_r8.longEvent && event_r8.eventStart, event_r8.longEvent && event_r8.eventEnd, !event_r8.longEvent));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(event_r8.name);
} }
const _c6 = function (a0) { return { "text-light": a0 }; };
function MdbCalendarMonthViewComponent_tr_22_td_1_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 14, 15);
    ɵngcc0.ɵɵlistener("click", function MdbCalendarMonthViewComponent_tr_22_td_1_Template_td_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r12); const day_r5 = restoredCtx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.onDayClick(day_r5); })("mousedown", function MdbCalendarMonthViewComponent_tr_22_td_1_Template_td_mousedown_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r12); const day_r5 = restoredCtx.$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.onMouseDown($event, day_r5); })("mouseup", function MdbCalendarMonthViewComponent_tr_22_td_1_Template_td_mouseup_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r12); const day_r5 = restoredCtx.$implicit; const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.onMouseUp($event, day_r5); })("mouseenter", function MdbCalendarMonthViewComponent_tr_22_td_1_Template_td_mouseenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onMouseMove($event); });
    ɵngcc0.ɵɵelementStart(2, "span", 16);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, MdbCalendarMonthViewComponent_tr_22_td_1_div_4_Template, 3, 11, "div", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r5 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(5, _c4, day_r5.isToday, day_r5.isWeekend && !day_r5.isToday));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c6, day_r5.month !== ctx_r4.selectedMonth));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(day_r5.dayNumber);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", day_r5.events)("ngForTrackBy", ctx_r4.trackByEvent);
} }
function MdbCalendarMonthViewComponent_tr_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵtemplate(1, MdbCalendarMonthViewComponent_tr_22_td_1_Template, 5, 10, "td", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const week_r3 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", week_r3.week)("ngForTrackBy", ctx_r1.trackByFn);
} }
function MdbCalendarListViewComponent_ng_container_20_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "tr", 13);
    ɵngcc0.ɵɵelementStart(2, "th", 14);
    ɵngcc0.ɵɵelement(3, "mdb-icon", 15);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "th", 16);
    ɵngcc0.ɵɵelement(6, "mdb-icon", 17);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "tr", 18);
    ɵngcc0.ɵɵlistener("click", function MdbCalendarListViewComponent_ng_container_20_Template_tr_click_8_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); const event_r1 = restoredCtx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onEventClick(event_r1); });
    ɵngcc0.ɵɵelementStart(9, "td", 19);
    ɵngcc0.ɵɵelement(10, "mdb-icon", 20);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const event_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate2(" ", event_r1.start.date, " - ", event_r1.end.date, " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate2(" ", event_r1.start.time, " - ", event_r1.end.time, " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵclassMapInterpolate1("pr-1 text-", event_r1.color, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", event_r1.name, " ");
} }
class EventModalComponent {
    constructor(modalRef) {
        this.modalRef = modalRef;
        this.eventData = new Subject();
        this.eventDeleted = new Subject();
    }
    getParsedValues(eventData) {
        const id = this.event.id;
        const name = eventData.name;
        const startDate = parse(eventData.startDate.replace(', ', 'T'));
        const endDate = parse(eventData.endDate.replace(', ', 'T'));
        const color = eventData.color;
        return { id, name, startDate, endDate, color };
    }
    ngOnInit() {
        if (this.event && this.mode === 'edit') {
            this.eventForm = new FormGroup({
                name: new FormControl({ value: this.event.name, disabled: !this.editable }),
                startDate: new FormControl({ value: this.event.startDate, disabled: !this.editable }),
                endDate: new FormControl({ value: this.event.endDate, disabled: !this.editable }),
                color: new FormControl({ value: this.event.color, disabled: !this.editable })
            });
        }
        else {
            this.eventForm = new FormGroup({
                name: new FormControl('New event'),
                startDate: new FormControl(this.event.startDate),
                endDate: new FormControl(this.event.endDate),
                color: new FormControl(this.event.color)
            });
        }
    }
    onSave() {
        const event = this.getParsedValues(this.eventForm.value);
        this.eventData.next(event);
        this.modalRef.hide();
    }
    onDelete() {
        const event = this.getParsedValues(this.eventForm.value);
        this.eventDeleted.next(event);
        this.modalRef.hide();
    }
}
EventModalComponent.ɵfac = function EventModalComponent_Factory(t) { return new (t || EventModalComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MDBModalRef)); };
EventModalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: EventModalComponent, selectors: [["mdb-event-modal"]], decls: 50, vars: 4, consts: [[1, "modal-content"], [1, "modal-header"], ["type", "button", "aria-label", "Close", 1, "close", "pull-right", 3, "click"], ["aria-hidden", "true"], ["id", "myModalLabel", 1, "modal-title", "w-100"], [1, "modal-body"], [3, "formGroup"], [1, "md-form"], ["type", "text", "mdbInput", "", "formControlName", "name", 1, "form-control", "w-100"], ["type", "text", "mdbInput", "", "formControlName", "startDate", 1, "form-control", "w-100"], ["type", "text", "mdbInput", "", "formControlName", "endDate", 1, "form-control", "w-100"], [1, "custom-control", "custom-radio", "custom-control-inline", "font-weight-bold"], ["type", "radio", "checked", "", "value", "info", "name", "color", "id", "info", "formControlName", "color", 1, "custom-control-input"], ["for", "info", 1, "custom-control-label", "text-info"], ["type", "radio", "value", "success", "name", "color", "id", "success", "formControlName", "color", 1, "custom-control-input"], ["for", "success", 1, "custom-control-label", "text-success"], ["type", "radio", "value", "warning", "name", "color", "id", "warning", "formControlName", "color", 1, "custom-control-input"], ["for", "warning", 1, "custom-control-label", "text-warning"], ["type", "radio", "value", "danger", "name", "color", "id", "danger", "formControlName", "color", 1, "custom-control-input"], ["for", "danger", 1, "custom-control-label", "text-danger"], ["type", "radio", "value", "primary", "name", "color", "id", "primary", "formControlName", "color", 1, "custom-control-input"], ["for", "primary", 1, "custom-control-label", "text-primary"], ["type", "radio", "value", "secondary", "name", "color", "id", "secondary", "formControlName", "color", 1, "custom-control-input"], ["for", "secondary", 1, "custom-control-label", "text-secondary"], ["class", "modal-footer", 4, "ngIf"], [1, "modal-footer"], ["type", "button", "mdbBtn", "", "color", "danger", "aria-label", "Close", "mdbWavesEffect", "", 1, "waves-light", 3, "click"], ["type", "button", "mdbBtn", "", "color", "primary", "mdbWavesEffect", "", 1, "relative", "waves-light", 3, "click"], ["type", "button", "mdbBtn", "", "color", "secondary", "aria-label", "Close", "mdbWavesEffect", "", 1, "waves-light", 3, "click"]], template: function EventModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "button", 2);
        ɵngcc0.ɵɵlistener("click", function EventModalComponent_Template_button_click_2_listener() { return ctx.modalRef.hide(); });
        ɵngcc0.ɵɵelementStart(3, "span", 3);
        ɵngcc0.ɵɵtext(4, "\u00D7");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "h4", 4);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "form", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵelement(10, "input", 8);
        ɵngcc0.ɵɵelementStart(11, "label");
        ɵngcc0.ɵɵtext(12, "Name");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 7);
        ɵngcc0.ɵɵelement(14, "input", 9);
        ɵngcc0.ɵɵelementStart(15, "label");
        ɵngcc0.ɵɵtext(16, "Start date");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "div", 7);
        ɵngcc0.ɵɵelement(18, "input", 10);
        ɵngcc0.ɵɵelementStart(19, "label");
        ɵngcc0.ɵɵtext(20, "End date");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "p");
        ɵngcc0.ɵɵtext(22, "Color");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "div");
        ɵngcc0.ɵɵelementStart(24, "div", 11);
        ɵngcc0.ɵɵelement(25, "input", 12);
        ɵngcc0.ɵɵelementStart(26, "label", 13);
        ɵngcc0.ɵɵtext(27, "Info");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "div", 11);
        ɵngcc0.ɵɵelement(29, "input", 14);
        ɵngcc0.ɵɵelementStart(30, "label", 15);
        ɵngcc0.ɵɵtext(31, "Success");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(32, "div", 11);
        ɵngcc0.ɵɵelement(33, "input", 16);
        ɵngcc0.ɵɵelementStart(34, "label", 17);
        ɵngcc0.ɵɵtext(35, "Warning");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(36, "div", 11);
        ɵngcc0.ɵɵelement(37, "input", 18);
        ɵngcc0.ɵɵelementStart(38, "label", 19);
        ɵngcc0.ɵɵtext(39, "Danger");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(40, "div", 11);
        ɵngcc0.ɵɵelement(41, "input", 20);
        ɵngcc0.ɵɵelementStart(42, "label", 21);
        ɵngcc0.ɵɵtext(43, "Primary");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(44, "div", 11);
        ɵngcc0.ɵɵelement(45, "input", 22);
        ɵngcc0.ɵɵelementStart(46, "label", 23);
        ɵngcc0.ɵɵtext(47, "Secondary");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(48, EventModalComponent_div_48_Template, 5, 2, "div", 24);
        ɵngcc0.ɵɵtemplate(49, EventModalComponent_div_49_Template, 5, 2, "div", 24);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.title, "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.eventForm);
        ɵngcc0.ɵɵadvance(40);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "edit" && ctx.editable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "add");
    } }, directives: [ɵngcc2.ɵNgNoValidate, ɵngcc2.NgControlStatusGroup, ɵngcc2.FormGroupDirective, ɵngcc2.DefaultValueAccessor, ɵngcc1.MdbInput, ɵngcc2.NgControlStatus, ɵngcc2.FormControlName, ɵngcc2.RadioControlValueAccessor, ɵngcc3.NgIf, ɵngcc1.MdbBtnDirective], styles: [""] });
EventModalComponent.ctorParameters = () => [
    { type: MDBModalRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EventModalComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-event-modal',
                template: "<div class=\"modal-content\">\n  <div class=\"modal-header\">\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n      <span aria-hidden=\"true\">\u00D7</span>\n    </button>\n    <h4 class=\"modal-title w-100\" id=\"myModalLabel\"> {{ title }}</h4>\n  </div>\n  <div class=\"modal-body\">\n    <form [formGroup]=\"eventForm\">\n      <div class=\"md-form\">\n        <input type=\"text\" mdbInput formControlName=\"name\" class=\"form-control w-100\">\n        <label>Name</label>\n      </div>\n      <div class=\"md-form\">\n        <input type=\"text\" mdbInput formControlName=\"startDate\" class=\"form-control w-100\">\n        <label>Start date</label>\n      </div>\n      <div class=\"md-form\">\n        <input type=\"text\" mdbInput formControlName=\"endDate\" class=\"form-control w-100\">\n        <label>End date</label>\n      </div>\n\n      <p>Color</p>\n      <div>\n        <div class=\"custom-control custom-radio custom-control-inline font-weight-bold\">\n          <input type=\"radio\" checked value=\"info\" name=\"color\" id=\"info\" class=\"custom-control-input\" formControlName=\"color\">\n          <label for=\"info\" class=\"custom-control-label text-info\">Info</label>\n        </div>\n        <div class=\"custom-control custom-radio custom-control-inline font-weight-bold\">\n          <input type=\"radio\" value=\"success\" name=\"color\" id=\"success\" class=\"custom-control-input\" formControlName=\"color\">\n          <label for=\"success\" class=\"custom-control-label text-success\">Success</label>\n        </div>\n        <div class=\"custom-control custom-radio custom-control-inline font-weight-bold\">\n          <input type=\"radio\" value=\"warning\" name=\"color\" id=\"warning\" class=\"custom-control-input\" formControlName=\"color\">\n          <label for=\"warning\" class=\"custom-control-label text-warning\">Warning</label>\n        </div>\n        <div class=\"custom-control custom-radio custom-control-inline font-weight-bold\">\n          <input type=\"radio\" value=\"danger\" name=\"color\" id=\"danger\" class=\"custom-control-input\" formControlName=\"color\">\n          <label for=\"danger\" class=\"custom-control-label text-danger\">Danger</label>\n        </div>\n        <div class=\"custom-control custom-radio custom-control-inline font-weight-bold\">\n          <input type=\"radio\" value=\"primary\" name=\"color\" id=\"primary\" class=\"custom-control-input\" formControlName=\"color\">\n          <label for=\"primary\" class=\"custom-control-label text-primary\">Primary</label>\n        </div>\n        <div class=\"custom-control custom-radio custom-control-inline font-weight-bold\">\n          <input type=\"radio\" value=\"secondary\" name=\"color\" id=\"secondary\" class=\"custom-control-input\" formControlName=\"color\">\n          <label for=\"secondary\" class=\"custom-control-label text-secondary\">Secondary</label>\n        </div>\n      </div>\n    </form>\n  </div>\n  <div *ngIf=\"mode === 'edit' && this.editable\" class=\"modal-footer\">\n    <button type=\"button\" mdbBtn color=\"danger\" class=\"waves-light\" aria-label=\"Close\" (click)=\"onDelete()\" mdbWavesEffect>{{ cancelBtn }}</button>\n    <button type=\"button\" mdbBtn color=\"primary\" class=\"relative waves-light\" mdbWavesEffect (click)=\"onSave()\">{{ actionBtn }}</button>\n  </div>\n  <div *ngIf=\"mode === 'add'\" class=\"modal-footer\">\n    <button type=\"button\" mdbBtn color=\"secondary\" class=\"waves-light\" aria-label=\"Close\" (click)=\"modalRef.hide()\" mdbWavesEffect>{{ cancelBtn }}</button>\n    <button type=\"button\" mdbBtn color=\"primary\" class=\"relative waves-light\" mdbWavesEffect (click)=\"onSave()\">{{ actionBtn }}</button>\n  </div>\n</div>",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.MDBModalRef }]; }, null); })();

var CalendarView;
(function (CalendarView) {
    CalendarView["month"] = "month";
    CalendarView["week"] = "week";
    CalendarView["list"] = "list";
})(CalendarView || (CalendarView = {}));

class MdbCalendarComponent {
    constructor(modalService) {
        this.modalService = modalService;
        this.weekDaysDefault = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        this.weekDaysShortDefault = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        this.monthsDefault = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ];
        this.monthsShortDefault = [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec',
        ];
        this.calendarOptions = {
            firstDayOfWeek: 'Sunday',
            monthViewBtnTxt: 'Month',
            weekViewBtnTxt: 'Week',
            listViewBtnTxt: 'List',
            todayBtnTxt: 'Today',
            eventAddTitle: 'Add new event',
            eventEditTitle: 'Edit event',
            eventCancelBtnTxt: 'Cancel',
            eventAddBtnTxt: 'Add',
            eventEditBtnTxt: 'Edit',
            eventDeleteBtnTxt: 'Delete',
        };
        this.dayLabels = [];
        this.dayLabelsShort = [];
        this.startDate = new Date();
        this.events = [];
        this.editable = true;
        this.weekDays = this.weekDaysDefault;
        this.weekDaysShort = this.weekDaysShortDefault;
        this.months = this.monthsDefault;
        this.monthsShort = this.monthsShortDefault;
        this.eventDeleted = new EventEmitter();
        this.eventEdited = new EventEmitter();
        this.eventAdded = new EventEmitter();
        this.monthChanged = new EventEmitter();
        this.weekChanged = new EventEmitter();
        this.listChanged = new EventEmitter();
        this.viewChanged = new EventEmitter();
        this.MS_IN_DAY = 24 * 60 * 60 * 1000;
        this.view = CalendarView;
        this.currentView = this.view.month;
        this._isInitialized = false;
    }
    ngOnInit() {
        this.calendarOptions = this.options
            ? Object.assign(this.calendarOptions, this.options)
            : this.calendarOptions;
        this._changeDaysOrder();
        if (this.defaultView) {
            this.onViewChange(this.defaultView);
        }
        this._isInitialized = true;
    }
    _changeDaysOrder() {
        const dayIndex = (this.weekDayIndex = this.weekDaysDefault.indexOf(this.calendarOptions.firstDayOfWeek));
        if (dayIndex !== -1) {
            let index = dayIndex;
            for (let i = 0; i < this.weekDays.length; i++) {
                this.dayLabels.push(this.weekDays[index]);
                this.dayLabelsShort.push(this.weekDaysShort[index]);
                index = this.weekDaysDefault[index] === 'Saturday' ? 0 : index + 1;
            }
        }
    }
    getFormattedEvent(event) {
        return {
            id: event.id,
            name: event.name,
            startDate: format(event.startDate, 'YYYY-MM-DD, HH:mm:ss'),
            endDate: format(event.endDate, 'YYYY-MM-DD, HH:mm:ss'),
            color: event.color,
        };
    }
    formatDate(date) {
        const year = getYear(date);
        const month = getMonth(date);
        const day = getDate(date);
    }
    onDayClick(day) {
        if (this.editable) {
            this.openAddModal(day);
        }
    }
    onEventClick(event) {
        this.openEditModal(event);
    }
    onViewChange(view) {
        this.currentView = this.view[view];
        this.viewChanged.emit(view);
    }
    onMonthChange(event) {
        this.monthChanged.emit(event);
    }
    onWeekChange(event) {
        this.weekChanged.emit(event);
    }
    onListChange(event) {
        this.listChanged.emit(event);
    }
    openAddModal(event) {
        const data = {
            title: this.calendarOptions.eventAddTitle,
            actionBtn: this.calendarOptions.eventAddBtnTxt,
            cancelBtn: this.calendarOptions.eventCancelBtnTxt,
            mode: 'add',
            editable: this.editable,
            event: this.getFormattedEvent(event),
        };
        this.modalRef = this.modalService.show(EventModalComponent, { data });
        this.modalRef.content.eventData.pipe(take(1)).subscribe((newEvent) => {
            this.eventAdded.emit(newEvent);
        });
    }
    openEditModal(event) {
        const data = {
            title: this.calendarOptions.eventEditTitle,
            actionBtn: this.calendarOptions.eventEditBtnTxt,
            cancelBtn: this.calendarOptions.eventDeleteBtnTxt,
            mode: 'edit',
            editable: this.editable,
            event: event,
        };
        this.modalRef = this.modalService.show(EventModalComponent, { data });
        this.modalRef.content.eventData.pipe(take(1)).subscribe((editedEvent) => {
            this.eventEdited.emit(editedEvent);
        });
        this.modalRef.content.eventDeleted.pipe(take(1)).subscribe((deletedEvent) => {
            this.eventDeleted.emit(deletedEvent);
        });
    }
}
MdbCalendarComponent.ɵfac = function MdbCalendarComponent_Factory(t) { return new (t || MdbCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MDBModalService)); };
MdbCalendarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbCalendarComponent, selectors: [["mdb-calendar"]], inputs: { startDate: "startDate", events: "events", editable: "editable", weekDays: "weekDays", weekDaysShort: "weekDaysShort", months: "months", monthsShort: "monthsShort", options: "options", defaultView: "defaultView" }, outputs: { eventDeleted: "eventDeleted", eventEdited: "eventEdited", eventAdded: "eventAdded", monthChanged: "monthChanged", weekChanged: "weekChanged", listChanged: "listChanged", viewChanged: "viewChanged" }, decls: 4, vars: 4, consts: [[1, "mdb-calendar", 3, "ngSwitch"], [3, "initDate", "events", "options", "weekDaysShort", "weekDayIndex", "months", "dayClicked", "eventClicked", "viewChanged", "monthChanged", 4, "ngSwitchCase"], [3, "initDate", "events", "options", "weekDaysShort", "weekDayIndex", "monthsShort", "dateClicked", "eventClicked", "viewChanged", "weekChanged", 4, "ngSwitchCase"], [3, "initDate", "events", "options", "weekDayIndex", "monthsShort", "eventClicked", "viewChanged", "listChanged", 4, "ngSwitchCase"], [3, "initDate", "events", "options", "weekDaysShort", "weekDayIndex", "months", "dayClicked", "eventClicked", "viewChanged", "monthChanged"], [3, "initDate", "events", "options", "weekDaysShort", "weekDayIndex", "monthsShort", "dateClicked", "eventClicked", "viewChanged", "weekChanged"], [3, "initDate", "events", "options", "weekDayIndex", "monthsShort", "eventClicked", "viewChanged", "listChanged"]], template: function MdbCalendarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, MdbCalendarComponent_mdb_calendar_month_view_1_Template, 1, 6, "mdb-calendar-month-view", 1);
        ɵngcc0.ɵɵtemplate(2, MdbCalendarComponent_mdb_calendar_week_view_2_Template, 1, 6, "mdb-calendar-week-view", 2);
        ɵngcc0.ɵɵtemplate(3, MdbCalendarComponent_mdb_calendar_list_view_3_Template, 1, 5, "mdb-calendar-list-view", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.currentView);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.view.month);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.view.week);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.view.list);
    } }, directives: function () { return [ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, MdbCalendarMonthViewComponent, MdbCalendarWeekViewComponent, MdbCalendarListViewComponent]; }, styles: ["@media (max-width: 992px){  .mdb-calendar-tools{flex-direction:column}  .mdb-calendar-tools .mdb-calendar-heading{text-align:center;order:-1}  .mdb-calendar-tools>.btn-group{transform:scale(.9)}}"] });
MdbCalendarComponent.ctorParameters = () => [
    { type: MDBModalService }
];
MdbCalendarComponent.propDecorators = {
    startDate: [{ type: Input }],
    events: [{ type: Input }],
    options: [{ type: Input }],
    editable: [{ type: Input }],
    weekDays: [{ type: Input }],
    weekDaysShort: [{ type: Input }],
    months: [{ type: Input }],
    monthsShort: [{ type: Input }],
    defaultView: [{ type: Input }],
    eventDeleted: [{ type: Output }],
    eventEdited: [{ type: Output }],
    eventAdded: [{ type: Output }],
    monthChanged: [{ type: Output }],
    weekChanged: [{ type: Output }],
    listChanged: [{ type: Output }],
    viewChanged: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbCalendarComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-calendar',
                template: "<div class=\"mdb-calendar\" [ngSwitch]=\"currentView\">\n  <mdb-calendar-month-view\n    *ngSwitchCase=\"view.month\"\n    [initDate]=\"startDate\"\n    [events]=\"events\"\n    [options]=\"calendarOptions\"\n    [weekDaysShort]=\"dayLabelsShort\"\n    [weekDayIndex]=\"weekDayIndex\"\n    [months]=\"months\"\n    (dayClicked)=\"onDayClick($event)\"\n    (eventClicked)=\"onEventClick($event)\"\n    (viewChanged)=\"onViewChange($event)\"\n    (monthChanged)=\"onMonthChange($event)\"\n  >\n  </mdb-calendar-month-view>\n\n  <mdb-calendar-week-view\n    *ngSwitchCase=\"view.week\"\n    [initDate]=\"startDate\"\n    [events]=\"events\"\n    [options]=\"calendarOptions\"\n    [weekDaysShort]=\"weekDaysShort\"\n    [weekDayIndex]=\"weekDayIndex\"\n    [monthsShort]=\"monthsShort\"\n    (dateClicked)=\"onDayClick($event)\"\n    (eventClicked)=\"onEventClick($event)\"\n    (viewChanged)=\"onViewChange($event)\"\n    (weekChanged)=\"onWeekChange($event)\"\n  >\n  </mdb-calendar-week-view>\n\n  <mdb-calendar-list-view\n    *ngSwitchCase=\"view.list\"\n    [initDate]=\"startDate\"\n    [events]=\"events\"\n    [options]=\"calendarOptions\"\n    [weekDayIndex]=\"weekDayIndex\"\n    [monthsShort]=\"monthsShort\"\n    (eventClicked)=\"onEventClick($event)\"\n    (viewChanged)=\"onViewChange($event)\"\n    (listChanged)=\"onListChange($event)\"\n  >\n  </mdb-calendar-list-view>\n</div>\n",
                styles: ["@media (max-width: 992px){::ng-deep .mdb-calendar-tools{flex-direction:column}::ng-deep .mdb-calendar-tools .mdb-calendar-heading{text-align:center;order:-1}::ng-deep .mdb-calendar-tools>.btn-group{transform:scale(.9)}}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.MDBModalService }]; }, { startDate: [{
            type: Input
        }], events: [{
            type: Input
        }], editable: [{
            type: Input
        }], weekDays: [{
            type: Input
        }], weekDaysShort: [{
            type: Input
        }], months: [{
            type: Input
        }], monthsShort: [{
            type: Input
        }], eventDeleted: [{
            type: Output
        }], eventEdited: [{
            type: Output
        }], eventAdded: [{
            type: Output
        }], monthChanged: [{
            type: Output
        }], weekChanged: [{
            type: Output
        }], listChanged: [{
            type: Output
        }], viewChanged: [{
            type: Output
        }], options: [{
            type: Input
        }], defaultView: [{
            type: Input
        }] }); })();

const MS_IN_DAY = 24 * 60 * 60 * 1000;
const MS_IN_HOUR = 60 * 60 * 1000;
function getPeriodEvents(events, start, end) {
    return events.filter((event) => {
        if (event.startDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.endDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.startDate <= start && event.endDate >= end) {
            return true;
        }
        return false;
    });
}
function getMonthDayEvents(events, start, end) {
    return events
        .filter((event) => {
        if (event.startDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.endDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.startDate <= start && event.endDate >= end) {
            return true;
        }
        return false;
    })
        .map((event) => {
        return Object.assign(Object.assign({}, event), { startStr: format(event.startDate, 'YYYY-MM-DDTHH:mm:ss'), endStr: format(event.endDate, 'YYYY-MM-DDTHH:mm:ss'), eventStart: event.startDate >= start, eventEnd: event.endDate <= end, longEvent: event.endDate.getTime() - event.startDate.getTime() >= MS_IN_DAY });
    });
}
function getListViewEvents(events, start, end) {
    return events
        .filter((event) => {
        if (event.startDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.endDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.startDate <= start && event.endDate >= end) {
            return true;
        }
        if (event.startDate >= start && event.startDate <= end) {
            return true;
        }
        return false;
    })
        .map((event) => {
        return Object.assign(Object.assign({}, event), { startStr: format(event.startDate, 'YYYY-MM-DDTHH:mm:ss'), endStr: format(event.endDate, 'YYYY-MM-DDTHH:mm:ss'), start: {
                date: format(event.startDate, 'DD/MM/YYYY'),
                time: format(event.startDate, 'h:mm:ss A'),
            }, end: {
                date: format(event.endDate, 'DD/MM/YYYY'),
                time: format(event.endDate, 'h:mm:ss A'),
            } });
    });
}
function getWeekDayEvents(events, start, end, dayStart, dayEnd) {
    return events
        .filter((event) => {
        if (event.startDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.endDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.startDate <= start && event.endDate >= end) {
            return true;
        }
        return false;
    })
        .map((event) => {
        return Object.assign(Object.assign({}, event), { startStr: format(event.startDate, 'YYYY-MM-DDTHH:mm:ss'), endStr: format(event.endDate, 'YYYY-MM-DDTHH:mm:ss'), allDay: event.startDate <= dayStart && event.endDate.getTime() >= dayEnd.getTime() - 999 });
    });
}
function getWeekHourEvents(events, start, end, dayStart, dayEnd) {
    return getWeekDayEvents(events, start, end, dayStart, dayEnd)
        .filter((event) => !event.allDay)
        .map((event) => {
        return Object.assign(Object.assign({}, event), { eventStart: event.startDate >= start, eventEnd: event.endDate <= end, longEvent: event.endDate.getTime() - event.startDate.getTime() >= MS_IN_HOUR });
    });
}
function getWeekAllDayEvents(events, start, end, dayStart, dayEnd) {
    return getWeekDayEvents(events, start, end, dayStart, dayEnd)
        .filter((event) => event.allDay)
        .map((event) => {
        return Object.assign(Object.assign({}, event), { eventStart: event.startDate >= dayStart, eventEnd: event.endDate <= dayEnd, longEvent: event.endDate.getTime() - event.startDate.getTime() >= MS_IN_DAY });
    });
}

class MdbCalendarWeekViewComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.weekDaysShort = [];
        this.monthsShort = [];
        this.weekDayIndex = 0;
        this.dateClicked = new EventEmitter();
        this.eventClicked = new EventEmitter();
        this.viewChanged = new EventEmitter();
        this.weekChanged = new EventEmitter();
        this.dayCells = [];
        this.fullDayCells = [];
        this.columns = [];
        this._isInitialized = false;
    }
    get initDate() {
        return this._initDate;
    }
    set initDate(date) {
        this._initDate = date;
        if (this._isInitialized) {
            const initDay = (this.initDay = startOfWeek(startOfDay(date), {
                weekStartsOn: this.weekDayIndex,
            }));
            this.weekView = this.createWeekView(initDay);
        }
    }
    get events() {
        return this._events;
    }
    set events(events) {
        this._events = events;
        this.weekView = this.createWeekView(this.initDay);
    }
    ngOnInit() {
        const initDay = (this.initDay = startOfWeek(startOfDay(this.initDate), {
            weekStartsOn: this.weekDayIndex,
        }));
        this.weekView = this.createWeekView(initDay);
        this._isInitialized = true;
    }
    ngAfterViewInit() {
        this.fullDayCells = this.fullDays.toArray().map((el) => el.nativeElement);
        this.dayCells = this.days.toArray().map((el) => el.nativeElement);
        for (let i = 1; i <= 7; i++) {
            this.dayCells.forEach((row) => {
                this.columns.push(row.children[i]);
            });
        }
    }
    trackByFn(index) {
        return index;
    }
    previous() {
        this.initDay = subDays(this.initDay, 7);
        this.weekView = this.createWeekView(this.initDay);
        this.weekChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    next() {
        this.initDay = addDays(this.initDay, 7);
        this.weekView = this.createWeekView(this.initDay);
        this.weekChanged.emit({
            startDate: this.initDay,
            endDate: this.endDate,
        });
    }
    goToToday() {
        this.initDay = startOfWeek(startOfDay(new Date()), { weekStartsOn: this.weekDayIndex });
        this.weekView = this.createWeekView(this.initDay);
        this.weekChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    fullDayMouseDown(event, day) {
        if (this.dayEditing) {
            return;
        }
        this.fullDayEditing = true;
        this.dragStart = this.fullDayCells.indexOf(event.target);
        this.isDragging = true;
        this.fullDaySelectionStart = day.startDate;
    }
    fullDayMouseUp(event, day) {
        this.dragEnd = this.fullDayCells.indexOf(event.target);
        this.fullDaySelectionEnd = day.endDate;
        this.fullDayEditing = false;
        const calendarEvent = {
            name: 'New event',
            startDate: this.fullDaySelectionStart,
            endDate: this.fullDaySelectionEnd,
            color: 'info',
        };
        if (this.dragStart !== this.dragEnd) {
            this.dateClicked.emit(calendarEvent);
        }
        this.isDragging = false;
        if (this.dragEnd !== 0) {
            this.fullDaySelectRange();
        }
        this.fullDayClearSelection();
    }
    fullDaySelectRange() {
        this.fullDayClearSelection();
        if (this.dragEnd > this.dragStart) {
            if (this.dragEnd + 1 < this.dragStart) {
                this.fullDayCells
                    .slice(this.dragEnd, this.dragStart + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
            else {
                this.fullDayCells
                    .slice(this.dragStart, this.dragEnd + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
        }
    }
    fullDayClearSelection() {
        this.fullDayCells.forEach((cell) => this.renderer.removeStyle(cell, 'background-color'));
    }
    fullDayMouseMove(event) {
        event.preventDefault();
        if (this.dayEditing) {
            return;
        }
        if (this.isDragging) {
            this.dragEnd = this.fullDayCells.indexOf(event.target);
            this.fullDaySelectRange();
        }
    }
    onMouseDown(event, day) {
        if (this.fullDayEditing) {
            return;
        }
        this.dayEditing = true;
        this.dragStart = this.columns.indexOf(event.target);
        this.isDragging = true;
        this.selectionStartDate = day.startDate;
    }
    onMouseUp(event, day) {
        this.dragEnd = this.columns.indexOf(event.target);
        this.selectionEndDate = day.endDate;
        this.dayEditing = false;
        const calendarEvent = {
            name: 'New event',
            startDate: new Date(this.selectionStartDate),
            endDate: new Date(this.selectionEndDate),
            color: 'info',
        };
        if (this.dragStart !== this.dragEnd) {
            this.dateClicked.emit(calendarEvent);
        }
        this.isDragging = false;
        if (this.dragEnd !== 0) {
            this.selectRange();
        }
        this.clearSelection();
    }
    selectRange() {
        this.clearSelection();
        if (this.dragEnd > this.dragStart) {
            if (this.dragEnd + 1 < this.dragStart) {
                this.columns
                    .slice(this.dragEnd, this.dragStart + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
            else {
                this.columns
                    .slice(this.dragStart, this.dragEnd + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
        }
    }
    clearSelection() {
        this.columns.forEach((cell) => this.renderer.removeStyle(cell, 'background-color'));
    }
    onMouseMove(event) {
        event.preventDefault();
        if (this.fullDayEditing) {
            return;
        }
        if (this.isDragging) {
            this.dragEnd = this.columns.indexOf(event.target);
            this.selectRange();
        }
    }
    onEventClick(event) {
        const eventCopy = {
            id: event.id,
            name: event.name,
            startDate: format(event.startDate, 'YYYY-MM-DD, HH:mm:ss'),
            endDate: format(event.endDate, 'YYYY-MM-DD, HH:mm:ss'),
            color: event.color,
        };
        this.eventClicked.emit(eventCopy);
    }
    onDateClick(date) {
        const newEvent = {
            name: 'New event',
            startDate: date.startDate,
            endDate: date.endDate,
            color: 'info',
        };
        this.dateClicked.emit(newEvent);
    }
    onViewChange(view) {
        this.viewChanged.emit(view);
    }
    createWeekView(initDate) {
        const firstDay = initDate;
        const lastDay = addDays(firstDay, 6);
        this.startDate = firstDay;
        this.endDate = lastDay;
        const period = {
            start: `${getDate(firstDay)} ${this.monthsShort[getMonth(firstDay)]}, ${getYear(firstDay)}`,
            end: `${getDate(lastDay)} ${this.monthsShort[getMonth(lastDay)]}, ${getYear(lastDay)}`,
        };
        const allDayRow = [];
        const weekRows = [];
        let row = [];
        let date;
        let month;
        let year;
        let day;
        let dayNumber;
        let startDate;
        let endDate;
        let dayStart;
        let dayEnd;
        for (let i = 0; i < 24; i++) {
            row = [];
            for (let j = 0; j < 7; j++) {
                date = addDays(firstDay, j);
                month = getMonth(date) + 1;
                year = getYear(date);
                day = this.weekDaysShort[getDay(date)];
                dayNumber = getDate(date);
                startDate = addHours(startOfDay(date), i);
                endDate = addMinutes(startDate, 59.99);
                dayStart = startOfDay(date);
                dayEnd = endOfDay(date);
                row.push({
                    startDate: startDate,
                    endDate: endDate,
                    isToday: isToday(date),
                    isWeekend: isWeekend(date),
                    events: getWeekHourEvents(this.events, startDate, endDate, dayStart, dayEnd),
                });
                if (i === 1) {
                    allDayRow.push({
                        startDate: dayStart,
                        endDate: dayEnd,
                        isToday: isToday(date),
                        isWeekend: isWeekend(date),
                        day: day,
                        dayNumber: dayNumber,
                        month: month,
                        events: getWeekAllDayEvents(this.events, dayStart, dayEnd, dayStart, dayEnd),
                    });
                }
            }
            weekRows.push({ row });
        }
        return { allDayRow, weekRows, period };
    }
}
MdbCalendarWeekViewComponent.ɵfac = function MdbCalendarWeekViewComponent_Factory(t) { return new (t || MdbCalendarWeekViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
MdbCalendarWeekViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbCalendarWeekViewComponent, selectors: [["mdb-calendar-week-view"]], viewQuery: function MdbCalendarWeekViewComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
        ɵngcc0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.days = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fullDays = _t);
    } }, inputs: { weekDaysShort: "weekDaysShort", monthsShort: "monthsShort", weekDayIndex: "weekDayIndex", initDate: "initDate", events: "events", options: "options" }, outputs: { dateClicked: "dateClicked", eventClicked: "eventClicked", viewChanged: "viewChanged", weekChanged: "weekChanged" }, decls: 28, vars: 12, consts: [[1, "mdb-week-view"], [1, "mdb-calendar-tools", "d-flex", "justify-content-between", "mb-3"], ["role", "group", 1, "btn-group", "btn-group-sm"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-previous-btn", "px-4", 3, "click"], ["fas", "", "icon", "chevron-left"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-next-btn", "px-4", 3, "click"], ["fas", "", "icon", "chevron-right"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-today-btn", "px-4", 3, "click"], [1, "mdb-calendar-heading"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-month-btn", "px-4", 3, "click"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-week-btn", "px-4", 3, "click"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-list-btn", "px-4", 3, "click"], [3, "ngClass", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngClass", "click", "mousedown", "mouseup", "mouseenter", 4, "ngFor", "ngForOf", "ngForTrackBy"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngClass"], [3, "ngClass", "click", "mousedown", "mouseup", "mouseenter"], ["fullDayEl", ""], ["placement", "top", 3, "class", "ngClass", "mdbTooltip", "click", 4, "ngFor", "ngForOf"], ["placement", "top", 3, "ngClass", "mdbTooltip", "click"], ["dayEl", ""], [3, "ngClass", "mousedown", "mouseup", "mouseenter", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngClass", "mousedown", "mouseup", "mouseenter", "click"], ["placement", "top", 3, "class", "mdbTooltip", "ngClass", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["placement", "top", 3, "mdbTooltip", "ngClass", "click"]], template: function MdbCalendarWeekViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "button", 3);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarWeekViewComponent_Template_button_click_3_listener() { return ctx.previous(); });
        ɵngcc0.ɵɵelement(4, "mdb-icon", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "button", 5);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarWeekViewComponent_Template_button_click_5_listener() { return ctx.next(); });
        ɵngcc0.ɵɵelement(6, "mdb-icon", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "button", 7);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarWeekViewComponent_Template_button_click_7_listener() { return ctx.goToToday(); });
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "h2", 8);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 2);
        ɵngcc0.ɵɵelementStart(12, "button", 9);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarWeekViewComponent_Template_button_click_12_listener() { return ctx.onViewChange("month"); });
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "button", 10);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarWeekViewComponent_Template_button_click_14_listener() { return ctx.onViewChange("week"); });
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "button", 11);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarWeekViewComponent_Template_button_click_16_listener() { return ctx.onViewChange("list"); });
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "table");
        ɵngcc0.ɵɵelementStart(19, "thead");
        ɵngcc0.ɵɵelement(20, "th");
        ɵngcc0.ɵɵtemplate(21, MdbCalendarWeekViewComponent_th_21_Template, 2, 7, "th", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "tbody");
        ɵngcc0.ɵɵelementStart(23, "tr");
        ɵngcc0.ɵɵelementStart(24, "th");
        ɵngcc0.ɵɵtext(25, "All day");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(26, MdbCalendarWeekViewComponent_td_26_Template, 3, 5, "td", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(27, MdbCalendarWeekViewComponent_tr_27_Template, 5, 3, "tr", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.todayBtnTxt, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate2("", ctx.weekView.period.start, " - ", ctx.weekView.period.end, "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.monthViewBtnTxt, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.weekViewBtnTxt, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.listViewBtnTxt, " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.weekView.allDayRow)("ngForTrackBy", ctx.trackByFn);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.weekView.allDayRow)("ngForTrackBy", ctx.trackByFn);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.weekView.weekRows)("ngForTrackBy", ctx.trackByFn);
    } }, directives: [ɵngcc1.MdbBtnDirective, ɵngcc1.MdbIconComponent, ɵngcc1.FasDirective, ɵngcc3.NgForOf, ɵngcc3.NgClass, ɵngcc1.TooltipDirective], styles: [".mdb-today-cell[_ngcontent-%COMP%]{background-color:#e1f5fe}.mdb-week-view[_ngcontent-%COMP%]{width:100%;height:100%;margin-bottom:50px}.mdb-week-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{table-layout:fixed;width:100%}.mdb-week-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{text-align:center!important;height:30px;font-weight:700;border:1px solid #ddd;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdb-week-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:top;cursor:pointer;border:1px solid #ddd;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdb-vertical-single-event[_ngcontent-%COMP%]{margin:2px 1px;float:left;width:17px;height:84px}.mdb-vertical-event-start[_ngcontent-%COMP%]{margin:2px 1px -2px;float:left;width:17px;height:88px}.mdb-vertical-event-start[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .mdb-vertical-single-event[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;transform:rotate(90deg);white-space:nowrap}.mdb-vertical-event-end[_ngcontent-%COMP%]{margin:-2px 1px 2px;float:left;width:17px;height:88px;text-indent:-9999px}.mdb-vertical-event-long[_ngcontent-%COMP%]{margin:-2px 1px;float:left;width:17px;height:92px;text-indent:-9999px}.mdb-event[_ngcontent-%COMP%]{cursor:pointer;font-weight:700;text-align:left!important}.mdb-event-start[_ngcontent-%COMP%]{margin:1px -2px 1px 2px}.mdb-event-end[_ngcontent-%COMP%]{margin:1px 2px 1px -2px;text-indent:-9999px}.mdb-event-long[_ngcontent-%COMP%]{margin:1px -2px;text-indent:-9999px}.mdb-event-single[_ngcontent-%COMP%]{margin:1px 2px}"] });
MdbCalendarWeekViewComponent.ctorParameters = () => [
    { type: Renderer2 }
];
MdbCalendarWeekViewComponent.propDecorators = {
    days: [{ type: ViewChildren, args: ['dayEl',] }],
    fullDays: [{ type: ViewChildren, args: ['fullDayEl',] }],
    initDate: [{ type: Input }],
    events: [{ type: Input }],
    weekDaysShort: [{ type: Input }],
    monthsShort: [{ type: Input }],
    weekDayIndex: [{ type: Input }],
    options: [{ type: Input }],
    dateClicked: [{ type: Output }],
    eventClicked: [{ type: Output }],
    viewChanged: [{ type: Output }],
    weekChanged: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbCalendarWeekViewComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-calendar-week-view',
                template: "<div class=\"mdb-week-view\">\n  <div class=\"mdb-calendar-tools d-flex justify-content-between mb-3\">\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-previous-btn px-4\"\n        (click)=\"previous()\"\n      >\n        <mdb-icon fas icon=\"chevron-left\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-next-btn px-4\"\n        (click)=\"next()\"\n      >\n        <mdb-icon fas icon=\"chevron-right\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-today-btn px-4\"\n        (click)=\"goToToday()\"\n      >\n        {{ options.todayBtnTxt }}\n      </button>\n    </div>\n    <h2 class=\"mdb-calendar-heading\">{{ weekView.period.start }} - {{ weekView.period.end }}</h2>\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-month-btn px-4\"\n        (click)=\"onViewChange('month')\"\n      >\n        {{ options.monthViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-week-btn px-4\"\n        (click)=\"onViewChange('week')\"\n      >\n        {{ options.weekViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-list-btn px-4\"\n        (click)=\"onViewChange('list')\"\n      >\n        {{ options.listViewBtnTxt }}\n      </button>\n    </div>\n  </div>\n\n  <table>\n    <thead>\n      <th></th>\n      <th\n        *ngFor=\"let day of weekView.allDayRow; trackBy: trackByFn\"\n        [ngClass]=\"{\n          'light-blue lighten-5': day.isToday,\n          'rgba-mdb-color-slight': day.isWeekend && !day.isToday\n        }\"\n      >\n        {{ day.day }} {{ day.month }}/{{ day.dayNumber }}\n      </th>\n    </thead>\n\n    <tbody>\n      <tr>\n        <th>All day</th>\n        <td\n          #fullDayEl\n          *ngFor=\"let day of weekView.allDayRow; trackBy: trackByFn\"\n          [ngClass]=\"{\n            'mdb-today-cell': day.isToday,\n            'rgba-mdb-color-slight': day.isWeekend && !day.isToday\n          }\"\n          (click)=\"onDateClick(day)\"\n          (mousedown)=\"fullDayMouseDown($event, day)\"\n          (mouseup)=\"fullDayMouseUp($event, day)\"\n          (mouseenter)=\"fullDayMouseMove($event)\"\n        >\n          <div\n            class=\"mdb-event mdb-event-long text-white small px-1 bg-{{ event.color }}\"\n            [ngClass]=\"{\n              'mdb-event-long': event.longEvent && !event.eventStart && !event.eventEnd,\n              'mdb-event-start': event.longEvent && event.eventStart,\n              'mdb-event-end': event.longEvent && event.eventEnd,\n              'mdb-event-single': !event.longEvent\n            }\"\n            mdbTooltip=\"{{ event.name }}\"\n            placement=\"top\"\n            *ngFor=\"let event of day.events\"\n            (click)=\"onEventClick(event); $event.stopPropagation()\"\n          >\n            <span>{{ event.name }}</span>\n          </div>\n        </td>\n      </tr>\n      <tr #dayEl *ngFor=\"let row of weekView.weekRows; let index = index; trackBy: trackByFn\">\n        <th>{{ index }}:00</th>\n        <td\n          (mousedown)=\"onMouseDown($event, date)\"\n          (mouseup)=\"onMouseUp($event, date)\"\n          (mouseenter)=\"onMouseMove($event)\"\n          *ngFor=\"let date of row.row; trackBy: trackByFn\"\n          (click)=\"onDateClick(date)\"\n          [ngClass]=\"{\n            'mdb-today-cell': date.isToday,\n            'rgba-mdb-color-slight': date.isWeekend && !date.isToday\n          }\"\n        >\n          <div\n            class=\"mdb-event text-white small px-1 bg-{{ event.color }}\"\n            *ngFor=\"let event of date.events; trackBy: trackByFn\"\n            (click)=\"onEventClick(event); $event.stopPropagation()\"\n            mdbTooltip=\"{{ event.name }}\"\n            placement=\"top\"\n            [ngClass]=\"{\n              'mdb-vertical-event-long': event.longEvent && !event.eventStart && !event.eventEnd,\n              'mdb-vertical-event-start': event.longEvent && event.eventStart,\n              'mdb-vertical-event-end': event.longEvent && event.eventEnd,\n              'mdb-vertical-single-event': !event.longEvent\n            }\"\n          >\n            <span>{{ event.name }}</span>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n",
                styles: [".mdb-today-cell{background-color:#e1f5fe}.mdb-week-view{width:100%;height:100%;margin-bottom:50px}.mdb-week-view table{table-layout:fixed;width:100%}.mdb-week-view table th{text-align:center!important;height:30px;font-weight:700;border:1px solid #ddd;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdb-week-view table td{vertical-align:top;cursor:pointer;border:1px solid #ddd;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdb-vertical-single-event{margin:2px 1px;float:left;width:17px;height:84px}.mdb-vertical-event-start{margin:2px 1px -2px;float:left;width:17px;height:88px}.mdb-vertical-event-start span,.mdb-vertical-single-event span{display:block;transform:rotate(90deg);white-space:nowrap}.mdb-vertical-event-end{margin:-2px 1px 2px;float:left;width:17px;height:88px;text-indent:-9999px}.mdb-vertical-event-long{margin:-2px 1px;float:left;width:17px;height:92px;text-indent:-9999px}.mdb-event{cursor:pointer;font-weight:700;text-align:left!important}.mdb-event-start{margin:1px -2px 1px 2px}.mdb-event-end{margin:1px 2px 1px -2px;text-indent:-9999px}.mdb-event-long{margin:1px -2px;text-indent:-9999px}.mdb-event-single{margin:1px 2px}\n"]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, { weekDaysShort: [{
            type: Input
        }], monthsShort: [{
            type: Input
        }], weekDayIndex: [{
            type: Input
        }], dateClicked: [{
            type: Output
        }], eventClicked: [{
            type: Output
        }], viewChanged: [{
            type: Output
        }], weekChanged: [{
            type: Output
        }], initDate: [{
            type: Input
        }], events: [{
            type: Input
        }], days: [{
            type: ViewChildren,
            args: ['dayEl']
        }], fullDays: [{
            type: ViewChildren,
            args: ['fullDayEl']
        }], options: [{
            type: Input
        }] }); })();

class MdbCalendarMonthViewComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.weekDayIndex = 0;
        this.dayClicked = new EventEmitter();
        this.eventClicked = new EventEmitter();
        this.viewChanged = new EventEmitter();
        this.monthChanged = new EventEmitter();
        this.allCells = [];
        this.dates = [];
        this._isInitialized = false;
    }
    get initDate() {
        return this._initDate;
    }
    set initDate(date) {
        this._initDate = date;
        if (this._isInitialized) {
            const currentYear = date.getFullYear();
            const currentMonth = date.getMonth();
            this.createMonthView(currentYear, currentMonth);
        }
    }
    get events() {
        return this._events;
    }
    set events(events) {
        this._events = events;
        this.dates.forEach((week) => {
            week.week.forEach((day) => {
                day.events = getMonthDayEvents(events, day.startOfDay, day.endOfDay);
            });
        });
    }
    ngOnInit() {
        const currentYear = this.initDate.getFullYear();
        const currentMonth = this.initDate.getMonth();
        this.createMonthView(currentYear, currentMonth);
        this._isInitialized = true;
    }
    ngAfterViewInit() {
        this.allCells = this.days.toArray().map((el) => el.nativeElement);
    }
    trackByFn(index) {
        return index;
    }
    trackByEvent(index, item) {
        return item.id;
    }
    trackByDay(index, item) {
        return item.dayNumber;
    }
    onMouseDown(event, day) {
        this.dragStart = this.allCells.indexOf(event.target);
        this.isDragging = true;
        this.selectionStartDate = day.startOfDay;
    }
    onMouseUp(event, day) {
        this.dragEnd = this.allCells.indexOf(event.target);
        this.selectionEndDate = day.endOfDay;
        const calendarEvent = {
            name: 'New event',
            startDate: this.selectionStartDate,
            endDate: this.selectionEndDate,
            color: 'info',
        };
        if (this.dragStart !== this.dragEnd) {
            this.dayClicked.emit(calendarEvent);
        }
        this.isDragging = false;
        if (this.dragEnd !== 0) {
            this.selectRange();
        }
        this.clearSelection();
    }
    selectRange() {
        this.clearSelection();
        if (this.dragEnd > this.dragStart) {
            if (this.dragEnd + 1 < this.dragStart) {
                this.allCells
                    .slice(this.dragEnd, this.dragStart + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
            else {
                this.allCells
                    .slice(this.dragStart, this.dragEnd + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
        }
    }
    clearSelection() {
        this.allCells.forEach((cell) => this.renderer.removeStyle(cell, 'background-color'));
    }
    onMouseMove(event) {
        event.preventDefault();
        if (this.isDragging) {
            this.dragEnd = this.allCells.indexOf(event.target);
            this.selectRange();
        }
    }
    onDayClick(day) {
        const newEvent = {
            name: 'New event',
            startDate: day.startOfDay,
            endDate: day.endOfDay,
            color: 'info',
        };
        this.dayClicked.emit(newEvent);
    }
    onEventClick(event) {
        const eventCopy = {
            id: event.id,
            name: event.name,
            startDate: format(event.startDate, 'YYYY-MM-DD, HH:mm:ss'),
            endDate: format(event.endDate, 'YYYY-MM-DD, HH:mm:ss'),
            color: event.color,
        };
        this.eventClicked.emit(eventCopy);
    }
    onViewChange(view) {
        this.viewChanged.emit(view);
    }
    next() {
        if (this.selectedMonth === 11) {
            this.createMonthView(this.selectedYear + 1, 0);
        }
        else {
            this.createMonthView(this.selectedYear, this.selectedMonth + 1);
        }
        this.monthChanged.emit({
            index: this.selectedMonth,
            month: this.months[this.selectedMonth],
            year: this.selectedYear,
        });
    }
    previous() {
        if (this.selectedMonth === 0) {
            this.createMonthView(this.selectedYear - 1, 11);
        }
        else {
            this.createMonthView(this.selectedYear, this.selectedMonth - 1);
        }
        this.monthChanged.emit({
            index: this.selectedMonth,
            month: this.months[this.selectedMonth],
            year: this.selectedYear,
        });
    }
    goToToday() {
        const today = new Date();
        const currentYear = today.getFullYear();
        const currentMonth = today.getMonth();
        this.createMonthView(currentYear, currentMonth);
        this.monthChanged.emit({
            index: this.selectedMonth,
            name: this.months[this.selectedMonth],
            year: this.selectedYear,
        });
    }
    getDaysInPreviousMonth(year, month) {
        if (month === -1) {
            return getDaysInMonth(new Date(year - 1, 11));
        }
        return getDaysInMonth(new Date(year, month));
    }
    createMonthView(year, month) {
        this.selectedMonth = month;
        this.selectedYear = year;
        const daysInMonth = getDaysInMonth(new Date(year, month));
        const daysInPreviousMonth = this.getDaysInPreviousMonth(year, month - 1);
        const firstDay = startOfWeek(new Date(year, month), { weekStartsOn: this.weekDayIndex });
        const firstVisibleDay = getDate(firstDay);
        let dayStart;
        let dayEnd;
        const dates = [];
        let dayNumber = 1;
        let monthNumber = month;
        for (let i = 1; i < 7; i++) {
            const week = [];
            if (i === 1 && firstVisibleDay !== 1) {
                for (let j = firstVisibleDay; j <= daysInPreviousMonth; j++) {
                    dayStart = startOfDay(new Date(year, month - 1, j));
                    dayEnd = endOfDay(new Date(year, month - 1, j));
                    week.push({
                        dayNumber: j,
                        isToday: false,
                        isWeekend: isWeekend(new Date(year, month - 1, j)),
                        month: month - 1,
                        startOfDay: startOfDay(new Date(year, month - 1, j)),
                        endOfDay: endOfDay(new Date(year, month - 1, j)),
                        events: getMonthDayEvents(this.events, dayStart, dayEnd),
                    });
                }
                const daysLeft = 7 - week.length;
                for (let j = 0; j < daysLeft; j++) {
                    dayStart = startOfDay(new Date(year, month, dayNumber));
                    dayEnd = endOfDay(new Date(year, month, dayNumber));
                    week.push({
                        dayNumber: dayNumber,
                        isToday: isToday(new Date(year, month, dayNumber)),
                        isWeekend: isWeekend(new Date(year, month, dayNumber)),
                        month: month,
                        startOfDay: startOfDay(new Date(year, month, dayNumber)),
                        endOfDay: endOfDay(new Date(year, month, dayNumber)),
                        events: getMonthDayEvents(this.events, dayStart, dayEnd),
                    });
                    dayNumber++;
                }
            }
            else {
                for (let j = 1; j < 8; j++) {
                    if (dayNumber > daysInMonth) {
                        dayNumber = 1;
                        monthNumber = month + 1;
                    }
                    dayStart = startOfDay(new Date(year, monthNumber, dayNumber));
                    dayEnd = endOfDay(new Date(year, monthNumber, dayNumber));
                    week.push({
                        dayNumber: dayNumber,
                        isToday: isToday(new Date(year, monthNumber, dayNumber)),
                        isWeekend: isWeekend(new Date(year, monthNumber, dayNumber)),
                        month: monthNumber,
                        startOfDay: startOfDay(new Date(year, monthNumber, dayNumber)),
                        endOfDay: endOfDay(new Date(year, monthNumber, dayNumber)),
                        events: getMonthDayEvents(this.events, dayStart, dayEnd),
                    });
                    dayNumber++;
                }
            }
            dates.push({ week });
        }
        this.dates = dates;
    }
}
MdbCalendarMonthViewComponent.ɵfac = function MdbCalendarMonthViewComponent_Factory(t) { return new (t || MdbCalendarMonthViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
MdbCalendarMonthViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbCalendarMonthViewComponent, selectors: [["mdb-calendar-month-view"]], viewQuery: function MdbCalendarMonthViewComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.days = _t);
    } }, inputs: { weekDayIndex: "weekDayIndex", initDate: "initDate", events: "events", weekDaysShort: "weekDaysShort", months: "months", options: "options" }, outputs: { dayClicked: "dayClicked", eventClicked: "eventClicked", viewChanged: "viewChanged", monthChanged: "monthChanged" }, decls: 23, vars: 10, consts: [[1, "mdb-month-view"], [1, "mdb-calendar-tools", "d-flex", "justify-content-between", "mb-3"], ["role", "group", 1, "btn-group", "btn-group-sm"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-previous-btn", "px-4", 3, "click"], ["fas", "", "icon", "chevron-left"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-next-btn", "px-4", 3, "click"], ["fas", "", "icon", "chevron-right"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-today-btn", "px-4", 3, "click"], [1, "mdb-calendar-heading"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-month-btn", "px-4", 3, "click"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-week-btn", "px-4", 3, "click"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-list-btn", "px-4", 3, "click"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngClass", "click", "mousedown", "mouseup", "mouseenter", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngClass", "click", "mousedown", "mouseup", "mouseenter"], ["dayEl", ""], [1, "mdb-day-field", 3, "ngClass"], ["placement", "top", 3, "class", "ngClass", "mdbTooltip", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["placement", "top", 3, "ngClass", "mdbTooltip", "click"]], template: function MdbCalendarMonthViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "button", 3);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarMonthViewComponent_Template_button_click_3_listener() { return ctx.previous(); });
        ɵngcc0.ɵɵelement(4, "mdb-icon", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "button", 5);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarMonthViewComponent_Template_button_click_5_listener() { return ctx.next(); });
        ɵngcc0.ɵɵelement(6, "mdb-icon", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "button", 7);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarMonthViewComponent_Template_button_click_7_listener() { return ctx.goToToday(); });
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "h2", 8);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 2);
        ɵngcc0.ɵɵelementStart(12, "button", 9);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarMonthViewComponent_Template_button_click_12_listener() { return ctx.onViewChange("month"); });
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "button", 10);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarMonthViewComponent_Template_button_click_14_listener() { return ctx.onViewChange("week"); });
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "button", 11);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarMonthViewComponent_Template_button_click_16_listener() { return ctx.onViewChange("list"); });
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "table");
        ɵngcc0.ɵɵelementStart(19, "thead");
        ɵngcc0.ɵɵtemplate(20, MdbCalendarMonthViewComponent_th_20_Template, 2, 1, "th", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "tbody");
        ɵngcc0.ɵɵtemplate(22, MdbCalendarMonthViewComponent_tr_22_Template, 2, 2, "tr", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.todayBtnTxt, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate2("", ctx.months[ctx.selectedMonth], " ", ctx.selectedYear, "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.monthViewBtnTxt, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.weekViewBtnTxt, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.listViewBtnTxt, " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.weekDaysShort)("ngForTrackBy", ctx.trackByFn);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.dates)("ngForTrackBy", ctx.trackByFn);
    } }, directives: [ɵngcc1.MdbBtnDirective, ɵngcc1.MdbIconComponent, ɵngcc1.FasDirective, ɵngcc3.NgForOf, ɵngcc3.NgClass, ɵngcc1.TooltipDirective], styles: [".mdb-today-cell[_ngcontent-%COMP%]{background-color:#e1f5fe}.mdb-month-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{table-layout:fixed;width:100%}.mdb-month-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{text-align:center!important;height:30px;font-weight:700;border:1px solid #ddd}.mdb-month-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{height:12vh;padding-top:25px;vertical-align:top;position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:1px solid #ddd}.mdb-month-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:hover{background-color:#45526e0d!important}.mdb-day-field[_ngcontent-%COMP%]{position:absolute;right:8px;top:5px}.mdb-event[_ngcontent-%COMP%]{cursor:pointer;font-weight:700;text-align:left!important}.mdb-event-start[_ngcontent-%COMP%]{margin:1px -2px 1px 2px}.mdb-event-end[_ngcontent-%COMP%]{margin:1px 2px 1px -2px;text-indent:-9999px}.mdb-event-long[_ngcontent-%COMP%]{margin:1px -2px;text-indent:-9999px}.mdb-event-single[_ngcontent-%COMP%]{margin:1px 2px}"] });
MdbCalendarMonthViewComponent.ctorParameters = () => [
    { type: Renderer2 }
];
MdbCalendarMonthViewComponent.propDecorators = {
    days: [{ type: ViewChildren, args: ['dayEl',] }],
    initDate: [{ type: Input }],
    events: [{ type: Input }],
    weekDaysShort: [{ type: Input }],
    months: [{ type: Input }],
    weekDayIndex: [{ type: Input }],
    options: [{ type: Input }],
    dayClicked: [{ type: Output }],
    eventClicked: [{ type: Output }],
    viewChanged: [{ type: Output }],
    monthChanged: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbCalendarMonthViewComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-calendar-month-view',
                template: "<div class=\"mdb-month-view\">\n  <div class=\"mdb-calendar-tools d-flex justify-content-between mb-3\">\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-previous-btn px-4\"\n        (click)=\"previous()\"\n      >\n        <mdb-icon fas icon=\"chevron-left\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-next-btn px-4\"\n        (click)=\"next()\"\n      >\n        <mdb-icon fas icon=\"chevron-right\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-today-btn px-4\"\n        (click)=\"goToToday()\"\n      >\n        {{ options.todayBtnTxt }}\n      </button>\n    </div>\n    <h2 class=\"mdb-calendar-heading\">{{ months[selectedMonth] }} {{ selectedYear }}</h2>\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-month-btn px-4\"\n        (click)=\"onViewChange('month')\"\n      >\n        {{ options.monthViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-week-btn px-4\"\n        (click)=\"onViewChange('week')\"\n      >\n        {{ options.weekViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-list-btn px-4\"\n        (click)=\"onViewChange('list')\"\n      >\n        {{ options.listViewBtnTxt }}\n      </button>\n    </div>\n  </div>\n  <table>\n    <thead>\n      <th *ngFor=\"let day of weekDaysShort; trackBy: trackByFn\">{{ day }}</th>\n    </thead>\n\n    <tbody>\n      <tr *ngFor=\"let week of dates; trackBy: trackByFn\">\n        <td\n          #dayEl\n          *ngFor=\"let day of week.week; trackBy: trackByFn\"\n          [ngClass]=\"{\n            'mdb-today-cell': day.isToday,\n            'rgba-mdb-color-slight': day.isWeekend && !day.isToday\n          }\"\n          (click)=\"onDayClick(day)\"\n          (mousedown)=\"onMouseDown($event, day)\"\n          (mouseup)=\"onMouseUp($event, day)\"\n          (mouseenter)=\"onMouseMove($event)\"\n        >\n          <span class=\"mdb-day-field\" [ngClass]=\"{ 'text-light': day.month !== selectedMonth }\">{{\n            day.dayNumber\n          }}</span>\n          <div\n            class=\"mdb-event mdb-event-long text-white small px-1 bg-{{ event.color }}\"\n            [ngClass]=\"{\n              'mdb-event-long': event.longEvent && !event.eventStart && !event.eventEnd,\n              'mdb-event-start': event.longEvent && event.eventStart,\n              'mdb-event-end': event.longEvent && event.eventEnd,\n              'mdb-event-single': !event.longEvent\n            }\"\n            mdbTooltip=\"{{ event.name }}\"\n            placement=\"top\"\n            *ngFor=\"let event of day.events; trackBy: trackByEvent\"\n            (click)=\"onEventClick(event); $event.stopPropagation()\"\n          >\n            <span>{{ event.name }}</span>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n",
                styles: [".mdb-today-cell{background-color:#e1f5fe}.mdb-month-view table{table-layout:fixed;width:100%}.mdb-month-view table th{text-align:center!important;height:30px;font-weight:700;border:1px solid #ddd}.mdb-month-view table td{height:12vh;padding-top:25px;vertical-align:top;position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:1px solid #ddd}.mdb-month-view table td:hover{background-color:#45526e0d!important}.mdb-day-field{position:absolute;right:8px;top:5px}.mdb-event{cursor:pointer;font-weight:700;text-align:left!important}.mdb-event-start{margin:1px -2px 1px 2px}.mdb-event-end{margin:1px 2px 1px -2px;text-indent:-9999px}.mdb-event-long{margin:1px -2px;text-indent:-9999px}.mdb-event-single{margin:1px 2px}\n"]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, { weekDayIndex: [{
            type: Input
        }], dayClicked: [{
            type: Output
        }], eventClicked: [{
            type: Output
        }], viewChanged: [{
            type: Output
        }], monthChanged: [{
            type: Output
        }], initDate: [{
            type: Input
        }], events: [{
            type: Input
        }], days: [{
            type: ViewChildren,
            args: ['dayEl']
        }], weekDaysShort: [{
            type: Input
        }], months: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();

class MdbCalendarListViewComponent {
    constructor() {
        this.monthsShort = [];
        this.weekDayIndex = 0;
        this.viewChanged = new EventEmitter();
        this.eventClicked = new EventEmitter();
        this.listChanged = new EventEmitter();
        this._isInitialized = false;
    }
    get initDate() {
        return this._initDate;
    }
    set initDate(date) {
        this._initDate = date;
        if (this._isInitialized) {
            const initDay = (this.initDay = startOfWeek(startOfDay(date), {
                weekStartsOn: this.weekDayIndex,
            }));
            this.listView = this.createListView(initDay);
        }
    }
    get events() {
        return this._events;
    }
    set events(events) {
        this._events = events;
        this.listView = this.createListView(this.initDay);
    }
    ngOnInit() {
        const initDay = (this.initDay = startOfWeek(startOfDay(this.initDate), {
            weekStartsOn: this.weekDayIndex,
        }));
        this.listView = this.createListView(initDay);
        this._isInitialized = true;
    }
    previous() {
        this.initDay = subDays(this.initDay, 7);
        this.listView = this.createListView(this.initDay);
        this.listChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    next() {
        this.initDay = addDays(this.initDay, 7);
        this.listView = this.createListView(this.initDay);
        this.listChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    goToToday() {
        this.initDay = startOfWeek(startOfDay(new Date()));
        this.listView = this.createListView(this.initDay);
        this.listChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    onViewChange(view) {
        this.viewChanged.emit(view);
    }
    trackByFn(index) {
        return index;
    }
    onEventClick(event) {
        const eventCopy = {
            id: event.id,
            name: event.name,
            startDate: format(event.startDate, 'YYYY-MM-DD, HH:mm:ss'),
            endDate: format(event.endDate, 'YYYY-MM-DD, HH:mm:ss'),
            color: event.color,
        };
        this.eventClicked.emit(eventCopy);
    }
    createListView(date) {
        const firstDay = date;
        const lastDay = endOfDay(addDays(firstDay, 6));
        const period = {
            start: `${getDate(firstDay)} ${this.monthsShort[getMonth(firstDay)]}, ${getYear(firstDay)}`,
            end: `${getDate(lastDay)} ${this.monthsShort[getMonth(lastDay)]}, ${getYear(lastDay)}`,
        };
        this.startDate = firstDay;
        this.endDate = lastDay;
        const eventsInPeriod = getListViewEvents(this.events, firstDay, lastDay);
        return { eventsInPeriod, period };
    }
}
MdbCalendarListViewComponent.ɵfac = function MdbCalendarListViewComponent_Factory(t) { return new (t || MdbCalendarListViewComponent)(); };
MdbCalendarListViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbCalendarListViewComponent, selectors: [["mdb-calendar-list-view"]], inputs: { monthsShort: "monthsShort", weekDayIndex: "weekDayIndex", initDate: "initDate", events: "events", options: "options" }, outputs: { viewChanged: "viewChanged", eventClicked: "eventClicked", listChanged: "listChanged" }, decls: 21, vars: 8, consts: [[1, "mdb-list-view"], [1, "mdb-calendar-tools", "d-flex", "justify-content-between", "mb-3"], ["role", "group", 1, "btn-group", "btn-group-sm"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-previous-btn", "px-4", 3, "click"], ["fas", "", "icon", "chevron-left"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-next-button", "px-4", 3, "click"], ["fas", "", "icon", "chevron-right"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-today-btn", "px-4", 3, "click"], [1, "mdb-calendar-heading"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-month-btn", "px-4", 3, "click"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-week-btn", "px-4", 3, "click"], ["mdbBtn", "", "color", "info", "outline", "true", 1, "mdb-calendar-list-btn", "px-4", 3, "click"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "grey", "lighten-4"], [1, "text-left", "font-weight-bold"], ["fas", "", "icon", "calendar-alt"], [1, "font-weight-bold", "text-right"], ["fas", "", "icon", "clock"], [3, "click"], ["colspan", "2", 1, "text-left", "mdb-list-event"], ["fas", "", "icon", "circle"]], template: function MdbCalendarListViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "button", 3);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarListViewComponent_Template_button_click_3_listener() { return ctx.previous(); });
        ɵngcc0.ɵɵelement(4, "mdb-icon", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "button", 5);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarListViewComponent_Template_button_click_5_listener() { return ctx.next(); });
        ɵngcc0.ɵɵelement(6, "mdb-icon", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "button", 7);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarListViewComponent_Template_button_click_7_listener() { return ctx.goToToday(); });
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "h2", 8);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 2);
        ɵngcc0.ɵɵelementStart(12, "button", 9);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarListViewComponent_Template_button_click_12_listener() { return ctx.onViewChange("month"); });
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "button", 10);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarListViewComponent_Template_button_click_14_listener() { return ctx.onViewChange("week"); });
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "button", 11);
        ɵngcc0.ɵɵlistener("click", function MdbCalendarListViewComponent_Template_button_click_16_listener() { return ctx.onViewChange("list"); });
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "table");
        ɵngcc0.ɵɵelementStart(19, "tbody");
        ɵngcc0.ɵɵtemplate(20, MdbCalendarListViewComponent_ng_container_20_Template, 12, 8, "ng-container", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.todayBtnTxt, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate2("", ctx.listView.period.start, " - ", ctx.listView.period.end, "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.monthViewBtnTxt, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.weekViewBtnTxt, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options.listViewBtnTxt, " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.listView.eventsInPeriod)("ngForTrackBy", ctx.trackByFn);
    } }, directives: [ɵngcc1.MdbBtnDirective, ɵngcc1.MdbIconComponent, ɵngcc1.FasDirective, ɵngcc3.NgForOf], styles: [".mdb-list-view[_ngcontent-%COMP%]{width:100%;height:100%;margin-bottom:50px}.mdb-list-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{table-layout:fixed;width:100%;border:1px solid #ddd}.mdb-list-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%], .mdb-list-view[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{padding:8px 10px;border-top:1px solid #ddd;border-bottom:1px solid #ddd}.mdb-list-event[_ngcontent-%COMP%]{cursor:pointer}.mdb-list-event[_ngcontent-%COMP%]:hover{background-color:#45526e0d}"] });
MdbCalendarListViewComponent.ctorParameters = () => [];
MdbCalendarListViewComponent.propDecorators = {
    initDate: [{ type: Input }],
    events: [{ type: Input }],
    monthsShort: [{ type: Input }],
    options: [{ type: Input }],
    weekDayIndex: [{ type: Input }],
    viewChanged: [{ type: Output }],
    eventClicked: [{ type: Output }],
    listChanged: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbCalendarListViewComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-calendar-list-view',
                template: "<div class=\"mdb-list-view\">\n  <div class=\"mdb-calendar-tools d-flex justify-content-between mb-3\">\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-previous-btn px-4\"\n        (click)=\"previous()\"\n      >\n        <mdb-icon fas icon=\"chevron-left\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-next-button px-4\"\n        (click)=\"next()\"\n      >\n        <mdb-icon fas icon=\"chevron-right\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-today-btn px-4\"\n        (click)=\"goToToday()\"\n      >\n        {{ options.todayBtnTxt }}\n      </button>\n    </div>\n    <h2 class=\"mdb-calendar-heading\">{{ listView.period.start }} - {{ listView.period.end }}</h2>\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-month-btn px-4\"\n        (click)=\"onViewChange('month')\"\n      >\n        {{ options.monthViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-week-btn px-4\"\n        (click)=\"onViewChange('week')\"\n      >\n        {{ options.weekViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-list-btn px-4\"\n        (click)=\"onViewChange('list')\"\n      >\n        {{ options.listViewBtnTxt }}\n      </button>\n    </div>\n  </div>\n\n  <table>\n    <tbody>\n      <ng-container *ngFor=\"let event of listView.eventsInPeriod; trackBy: trackByFn\">\n        <tr class=\"grey lighten-4\">\n          <th class=\"text-left font-weight-bold\">\n            <mdb-icon fas icon=\"calendar-alt\"></mdb-icon> {{ event.start.date }} -\n            {{ event.end.date }}\n          </th>\n          <th class=\"font-weight-bold text-right\">\n            <mdb-icon fas icon=\"clock\"></mdb-icon> {{ event.start.time }} - {{ event.end.time }}\n          </th>\n        </tr>\n        <tr (click)=\"onEventClick(event)\">\n          <td class=\"text-left mdb-list-event\" colspan=\"2\">\n            <mdb-icon fas icon=\"circle\" class=\"pr-1 text-{{ event.color }}\"></mdb-icon\n            >{{ event.name }}\n          </td>\n        </tr>\n      </ng-container>\n    </tbody>\n  </table>\n</div>\n",
                styles: [".mdb-list-view{width:100%;height:100%;margin-bottom:50px}.mdb-list-view table{table-layout:fixed;width:100%;border:1px solid #ddd}.mdb-list-view table tr td,.mdb-list-view table tr th{padding:8px 10px;border-top:1px solid #ddd;border-bottom:1px solid #ddd}.mdb-list-event{cursor:pointer}.mdb-list-event:hover{background-color:#45526e0d}\n"]
            }]
    }], function () { return []; }, { monthsShort: [{
            type: Input
        }], weekDayIndex: [{
            type: Input
        }], viewChanged: [{
            type: Output
        }], eventClicked: [{
            type: Output
        }], listChanged: [{
            type: Output
        }], initDate: [{
            type: Input
        }], events: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();

class MdbCalendarModule {
}
MdbCalendarModule.ɵfac = function MdbCalendarModule_Factory(t) { return new (t || MdbCalendarModule)(); };
MdbCalendarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MdbCalendarModule });
MdbCalendarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            ButtonsModule,
            InputsModule,
            IconsModule,
            ModalModule.forRoot(),
            TooltipModule.forRoot(),
            CommonModule,
            ReactiveFormsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbCalendarModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MdbCalendarComponent,
                    EventModalComponent,
                    MdbCalendarWeekViewComponent,
                    MdbCalendarMonthViewComponent,
                    MdbCalendarListViewComponent
                ],
                imports: [
                    ButtonsModule,
                    InputsModule,
                    IconsModule,
                    ModalModule.forRoot(),
                    TooltipModule.forRoot(),
                    CommonModule,
                    ReactiveFormsModule
                ],
                exports: [
                    MdbCalendarComponent,
                    MdbCalendarWeekViewComponent,
                    MdbCalendarMonthViewComponent,
                    MdbCalendarListViewComponent,
                    EventModalComponent
                ],
                entryComponents: [EventModalComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbCalendarModule, { declarations: function () { return [MdbCalendarComponent, EventModalComponent, MdbCalendarWeekViewComponent, MdbCalendarMonthViewComponent, MdbCalendarListViewComponent]; }, imports: function () { return [ButtonsModule,
        InputsModule,
        IconsModule, ɵngcc1.ModalModule, ɵngcc1.TooltipModule, CommonModule,
        ReactiveFormsModule]; }, exports: function () { return [MdbCalendarComponent, MdbCalendarWeekViewComponent, MdbCalendarMonthViewComponent, MdbCalendarListViewComponent, EventModalComponent]; } }); })();

/*
 * Public API Surface of calendar-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CalendarView, EventModalComponent, MdbCalendarComponent, MdbCalendarListViewComponent, MdbCalendarModule, MdbCalendarMonthViewComponent, MdbCalendarWeekViewComponent };

//# sourceMappingURL=mdb-calendar.js.map