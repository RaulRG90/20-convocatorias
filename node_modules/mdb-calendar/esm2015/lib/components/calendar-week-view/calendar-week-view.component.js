import { Component, Input, Output, EventEmitter, Renderer2, ViewChildren, } from '@angular/core';
import { startOfWeek, addDays, getDate, getDay, getMonth, getYear, startOfDay, addHours, addMinutes, subDays, endOfDay, isToday, isWeekend, format, } from 'date-fns';
import { getWeekHourEvents, getWeekAllDayEvents } from '../../utils/event-utils';
export class MdbCalendarWeekViewComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.weekDaysShort = [];
        this.monthsShort = [];
        this.weekDayIndex = 0;
        this.dateClicked = new EventEmitter();
        this.eventClicked = new EventEmitter();
        this.viewChanged = new EventEmitter();
        this.weekChanged = new EventEmitter();
        this.dayCells = [];
        this.fullDayCells = [];
        this.columns = [];
        this._isInitialized = false;
    }
    get initDate() {
        return this._initDate;
    }
    set initDate(date) {
        this._initDate = date;
        if (this._isInitialized) {
            const initDay = (this.initDay = startOfWeek(startOfDay(date), {
                weekStartsOn: this.weekDayIndex,
            }));
            this.weekView = this.createWeekView(initDay);
        }
    }
    get events() {
        return this._events;
    }
    set events(events) {
        this._events = events;
        this.weekView = this.createWeekView(this.initDay);
    }
    ngOnInit() {
        const initDay = (this.initDay = startOfWeek(startOfDay(this.initDate), {
            weekStartsOn: this.weekDayIndex,
        }));
        this.weekView = this.createWeekView(initDay);
        this._isInitialized = true;
    }
    ngAfterViewInit() {
        this.fullDayCells = this.fullDays.toArray().map((el) => el.nativeElement);
        this.dayCells = this.days.toArray().map((el) => el.nativeElement);
        for (let i = 1; i <= 7; i++) {
            this.dayCells.forEach((row) => {
                this.columns.push(row.children[i]);
            });
        }
    }
    trackByFn(index) {
        return index;
    }
    previous() {
        this.initDay = subDays(this.initDay, 7);
        this.weekView = this.createWeekView(this.initDay);
        this.weekChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    next() {
        this.initDay = addDays(this.initDay, 7);
        this.weekView = this.createWeekView(this.initDay);
        this.weekChanged.emit({
            startDate: this.initDay,
            endDate: this.endDate,
        });
    }
    goToToday() {
        this.initDay = startOfWeek(startOfDay(new Date()), { weekStartsOn: this.weekDayIndex });
        this.weekView = this.createWeekView(this.initDay);
        this.weekChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    fullDayMouseDown(event, day) {
        if (this.dayEditing) {
            return;
        }
        this.fullDayEditing = true;
        this.dragStart = this.fullDayCells.indexOf(event.target);
        this.isDragging = true;
        this.fullDaySelectionStart = day.startDate;
    }
    fullDayMouseUp(event, day) {
        this.dragEnd = this.fullDayCells.indexOf(event.target);
        this.fullDaySelectionEnd = day.endDate;
        this.fullDayEditing = false;
        const calendarEvent = {
            name: 'New event',
            startDate: this.fullDaySelectionStart,
            endDate: this.fullDaySelectionEnd,
            color: 'info',
        };
        if (this.dragStart !== this.dragEnd) {
            this.dateClicked.emit(calendarEvent);
        }
        this.isDragging = false;
        if (this.dragEnd !== 0) {
            this.fullDaySelectRange();
        }
        this.fullDayClearSelection();
    }
    fullDaySelectRange() {
        this.fullDayClearSelection();
        if (this.dragEnd > this.dragStart) {
            if (this.dragEnd + 1 < this.dragStart) {
                this.fullDayCells
                    .slice(this.dragEnd, this.dragStart + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
            else {
                this.fullDayCells
                    .slice(this.dragStart, this.dragEnd + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
        }
    }
    fullDayClearSelection() {
        this.fullDayCells.forEach((cell) => this.renderer.removeStyle(cell, 'background-color'));
    }
    fullDayMouseMove(event) {
        event.preventDefault();
        if (this.dayEditing) {
            return;
        }
        if (this.isDragging) {
            this.dragEnd = this.fullDayCells.indexOf(event.target);
            this.fullDaySelectRange();
        }
    }
    onMouseDown(event, day) {
        if (this.fullDayEditing) {
            return;
        }
        this.dayEditing = true;
        this.dragStart = this.columns.indexOf(event.target);
        this.isDragging = true;
        this.selectionStartDate = day.startDate;
    }
    onMouseUp(event, day) {
        this.dragEnd = this.columns.indexOf(event.target);
        this.selectionEndDate = day.endDate;
        this.dayEditing = false;
        const calendarEvent = {
            name: 'New event',
            startDate: new Date(this.selectionStartDate),
            endDate: new Date(this.selectionEndDate),
            color: 'info',
        };
        if (this.dragStart !== this.dragEnd) {
            this.dateClicked.emit(calendarEvent);
        }
        this.isDragging = false;
        if (this.dragEnd !== 0) {
            this.selectRange();
        }
        this.clearSelection();
    }
    selectRange() {
        this.clearSelection();
        if (this.dragEnd > this.dragStart) {
            if (this.dragEnd + 1 < this.dragStart) {
                this.columns
                    .slice(this.dragEnd, this.dragStart + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
            else {
                this.columns
                    .slice(this.dragStart, this.dragEnd + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
        }
    }
    clearSelection() {
        this.columns.forEach((cell) => this.renderer.removeStyle(cell, 'background-color'));
    }
    onMouseMove(event) {
        event.preventDefault();
        if (this.fullDayEditing) {
            return;
        }
        if (this.isDragging) {
            this.dragEnd = this.columns.indexOf(event.target);
            this.selectRange();
        }
    }
    onEventClick(event) {
        const eventCopy = {
            id: event.id,
            name: event.name,
            startDate: format(event.startDate, 'YYYY-MM-DD, HH:mm:ss'),
            endDate: format(event.endDate, 'YYYY-MM-DD, HH:mm:ss'),
            color: event.color,
        };
        this.eventClicked.emit(eventCopy);
    }
    onDateClick(date) {
        const newEvent = {
            name: 'New event',
            startDate: date.startDate,
            endDate: date.endDate,
            color: 'info',
        };
        this.dateClicked.emit(newEvent);
    }
    onViewChange(view) {
        this.viewChanged.emit(view);
    }
    createWeekView(initDate) {
        const firstDay = initDate;
        const lastDay = addDays(firstDay, 6);
        this.startDate = firstDay;
        this.endDate = lastDay;
        const period = {
            start: `${getDate(firstDay)} ${this.monthsShort[getMonth(firstDay)]}, ${getYear(firstDay)}`,
            end: `${getDate(lastDay)} ${this.monthsShort[getMonth(lastDay)]}, ${getYear(lastDay)}`,
        };
        const allDayRow = [];
        const weekRows = [];
        let row = [];
        let date;
        let month;
        let year;
        let day;
        let dayNumber;
        let startDate;
        let endDate;
        let dayStart;
        let dayEnd;
        for (let i = 0; i < 24; i++) {
            row = [];
            for (let j = 0; j < 7; j++) {
                date = addDays(firstDay, j);
                month = getMonth(date) + 1;
                year = getYear(date);
                day = this.weekDaysShort[getDay(date)];
                dayNumber = getDate(date);
                startDate = addHours(startOfDay(date), i);
                endDate = addMinutes(startDate, 59.99);
                dayStart = startOfDay(date);
                dayEnd = endOfDay(date);
                row.push({
                    startDate: startDate,
                    endDate: endDate,
                    isToday: isToday(date),
                    isWeekend: isWeekend(date),
                    events: getWeekHourEvents(this.events, startDate, endDate, dayStart, dayEnd),
                });
                if (i === 1) {
                    allDayRow.push({
                        startDate: dayStart,
                        endDate: dayEnd,
                        isToday: isToday(date),
                        isWeekend: isWeekend(date),
                        day: day,
                        dayNumber: dayNumber,
                        month: month,
                        events: getWeekAllDayEvents(this.events, dayStart, dayEnd, dayStart, dayEnd),
                    });
                }
            }
            weekRows.push({ row });
        }
        return { allDayRow, weekRows, period };
    }
}
MdbCalendarWeekViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-calendar-week-view',
                template: "<div class=\"mdb-week-view\">\n  <div class=\"mdb-calendar-tools d-flex justify-content-between mb-3\">\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-previous-btn px-4\"\n        (click)=\"previous()\"\n      >\n        <mdb-icon fas icon=\"chevron-left\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-next-btn px-4\"\n        (click)=\"next()\"\n      >\n        <mdb-icon fas icon=\"chevron-right\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-today-btn px-4\"\n        (click)=\"goToToday()\"\n      >\n        {{ options.todayBtnTxt }}\n      </button>\n    </div>\n    <h2 class=\"mdb-calendar-heading\">{{ weekView.period.start }} - {{ weekView.period.end }}</h2>\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-month-btn px-4\"\n        (click)=\"onViewChange('month')\"\n      >\n        {{ options.monthViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-week-btn px-4\"\n        (click)=\"onViewChange('week')\"\n      >\n        {{ options.weekViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-list-btn px-4\"\n        (click)=\"onViewChange('list')\"\n      >\n        {{ options.listViewBtnTxt }}\n      </button>\n    </div>\n  </div>\n\n  <table>\n    <thead>\n      <th></th>\n      <th\n        *ngFor=\"let day of weekView.allDayRow; trackBy: trackByFn\"\n        [ngClass]=\"{\n          'light-blue lighten-5': day.isToday,\n          'rgba-mdb-color-slight': day.isWeekend && !day.isToday\n        }\"\n      >\n        {{ day.day }} {{ day.month }}/{{ day.dayNumber }}\n      </th>\n    </thead>\n\n    <tbody>\n      <tr>\n        <th>All day</th>\n        <td\n          #fullDayEl\n          *ngFor=\"let day of weekView.allDayRow; trackBy: trackByFn\"\n          [ngClass]=\"{\n            'mdb-today-cell': day.isToday,\n            'rgba-mdb-color-slight': day.isWeekend && !day.isToday\n          }\"\n          (click)=\"onDateClick(day)\"\n          (mousedown)=\"fullDayMouseDown($event, day)\"\n          (mouseup)=\"fullDayMouseUp($event, day)\"\n          (mouseenter)=\"fullDayMouseMove($event)\"\n        >\n          <div\n            class=\"mdb-event mdb-event-long text-white small px-1 bg-{{ event.color }}\"\n            [ngClass]=\"{\n              'mdb-event-long': event.longEvent && !event.eventStart && !event.eventEnd,\n              'mdb-event-start': event.longEvent && event.eventStart,\n              'mdb-event-end': event.longEvent && event.eventEnd,\n              'mdb-event-single': !event.longEvent\n            }\"\n            mdbTooltip=\"{{ event.name }}\"\n            placement=\"top\"\n            *ngFor=\"let event of day.events\"\n            (click)=\"onEventClick(event); $event.stopPropagation()\"\n          >\n            <span>{{ event.name }}</span>\n          </div>\n        </td>\n      </tr>\n      <tr #dayEl *ngFor=\"let row of weekView.weekRows; let index = index; trackBy: trackByFn\">\n        <th>{{ index }}:00</th>\n        <td\n          (mousedown)=\"onMouseDown($event, date)\"\n          (mouseup)=\"onMouseUp($event, date)\"\n          (mouseenter)=\"onMouseMove($event)\"\n          *ngFor=\"let date of row.row; trackBy: trackByFn\"\n          (click)=\"onDateClick(date)\"\n          [ngClass]=\"{\n            'mdb-today-cell': date.isToday,\n            'rgba-mdb-color-slight': date.isWeekend && !date.isToday\n          }\"\n        >\n          <div\n            class=\"mdb-event text-white small px-1 bg-{{ event.color }}\"\n            *ngFor=\"let event of date.events; trackBy: trackByFn\"\n            (click)=\"onEventClick(event); $event.stopPropagation()\"\n            mdbTooltip=\"{{ event.name }}\"\n            placement=\"top\"\n            [ngClass]=\"{\n              'mdb-vertical-event-long': event.longEvent && !event.eventStart && !event.eventEnd,\n              'mdb-vertical-event-start': event.longEvent && event.eventStart,\n              'mdb-vertical-event-end': event.longEvent && event.eventEnd,\n              'mdb-vertical-single-event': !event.longEvent\n            }\"\n          >\n            <span>{{ event.name }}</span>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n",
                styles: [".mdb-today-cell{background-color:#e1f5fe}.mdb-week-view{width:100%;height:100%;margin-bottom:50px}.mdb-week-view table{table-layout:fixed;width:100%}.mdb-week-view table th{text-align:center!important;height:30px;font-weight:700;border:1px solid #ddd;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdb-week-view table td{vertical-align:top;cursor:pointer;border:1px solid #ddd;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdb-vertical-single-event{margin:2px 1px;float:left;width:17px;height:84px}.mdb-vertical-event-start{margin:2px 1px -2px;float:left;width:17px;height:88px}.mdb-vertical-event-start span,.mdb-vertical-single-event span{display:block;transform:rotate(90deg);white-space:nowrap}.mdb-vertical-event-end{margin:-2px 1px 2px;float:left;width:17px;height:88px;text-indent:-9999px}.mdb-vertical-event-long{margin:-2px 1px;float:left;width:17px;height:92px;text-indent:-9999px}.mdb-event{cursor:pointer;font-weight:700;text-align:left!important}.mdb-event-start{margin:1px -2px 1px 2px}.mdb-event-end{margin:1px 2px 1px -2px;text-indent:-9999px}.mdb-event-long{margin:1px -2px;text-indent:-9999px}.mdb-event-single{margin:1px 2px}\n"]
            },] }
];
MdbCalendarWeekViewComponent.ctorParameters = () => [
    { type: Renderer2 }
];
MdbCalendarWeekViewComponent.propDecorators = {
    days: [{ type: ViewChildren, args: ['dayEl',] }],
    fullDays: [{ type: ViewChildren, args: ['fullDayEl',] }],
    initDate: [{ type: Input }],
    events: [{ type: Input }],
    weekDaysShort: [{ type: Input }],
    monthsShort: [{ type: Input }],
    weekDayIndex: [{ type: Input }],
    options: [{ type: Input }],
    dateClicked: [{ type: Output }],
    eventClicked: [{ type: Output }],
    viewChanged: [{ type: Output }],
    weekChanged: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,