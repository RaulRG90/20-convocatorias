import { Component, Input, Output, EventEmitter } from '@angular/core';
import { startOfWeek, addDays, getDate, getYear, getMonth, subDays, startOfDay, format, endOfDay, } from 'date-fns';
import { getListViewEvents } from '../../utils/event-utils';
export class MdbCalendarListViewComponent {
    constructor() {
        this.monthsShort = [];
        this.weekDayIndex = 0;
        this.viewChanged = new EventEmitter();
        this.eventClicked = new EventEmitter();
        this.listChanged = new EventEmitter();
        this._isInitialized = false;
    }
    get initDate() {
        return this._initDate;
    }
    set initDate(date) {
        this._initDate = date;
        if (this._isInitialized) {
            const initDay = (this.initDay = startOfWeek(startOfDay(date), {
                weekStartsOn: this.weekDayIndex,
            }));
            this.listView = this.createListView(initDay);
        }
    }
    get events() {
        return this._events;
    }
    set events(events) {
        this._events = events;
        this.listView = this.createListView(this.initDay);
    }
    ngOnInit() {
        const initDay = (this.initDay = startOfWeek(startOfDay(this.initDate), {
            weekStartsOn: this.weekDayIndex,
        }));
        this.listView = this.createListView(initDay);
        this._isInitialized = true;
    }
    previous() {
        this.initDay = subDays(this.initDay, 7);
        this.listView = this.createListView(this.initDay);
        this.listChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    next() {
        this.initDay = addDays(this.initDay, 7);
        this.listView = this.createListView(this.initDay);
        this.listChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    goToToday() {
        this.initDay = startOfWeek(startOfDay(new Date()));
        this.listView = this.createListView(this.initDay);
        this.listChanged.emit({
            startDate: this.startDate,
            endDate: this.endDate,
        });
    }
    onViewChange(view) {
        this.viewChanged.emit(view);
    }
    trackByFn(index) {
        return index;
    }
    onEventClick(event) {
        const eventCopy = {
            id: event.id,
            name: event.name,
            startDate: format(event.startDate, 'YYYY-MM-DD, HH:mm:ss'),
            endDate: format(event.endDate, 'YYYY-MM-DD, HH:mm:ss'),
            color: event.color,
        };
        this.eventClicked.emit(eventCopy);
    }
    createListView(date) {
        const firstDay = date;
        const lastDay = endOfDay(addDays(firstDay, 6));
        const period = {
            start: `${getDate(firstDay)} ${this.monthsShort[getMonth(firstDay)]}, ${getYear(firstDay)}`,
            end: `${getDate(lastDay)} ${this.monthsShort[getMonth(lastDay)]}, ${getYear(lastDay)}`,
        };
        this.startDate = firstDay;
        this.endDate = lastDay;
        const eventsInPeriod = getListViewEvents(this.events, firstDay, lastDay);
        return { eventsInPeriod, period };
    }
}
MdbCalendarListViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-calendar-list-view',
                template: "<div class=\"mdb-list-view\">\n  <div class=\"mdb-calendar-tools d-flex justify-content-between mb-3\">\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-previous-btn px-4\"\n        (click)=\"previous()\"\n      >\n        <mdb-icon fas icon=\"chevron-left\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-next-button px-4\"\n        (click)=\"next()\"\n      >\n        <mdb-icon fas icon=\"chevron-right\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-today-btn px-4\"\n        (click)=\"goToToday()\"\n      >\n        {{ options.todayBtnTxt }}\n      </button>\n    </div>\n    <h2 class=\"mdb-calendar-heading\">{{ listView.period.start }} - {{ listView.period.end }}</h2>\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-month-btn px-4\"\n        (click)=\"onViewChange('month')\"\n      >\n        {{ options.monthViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-week-btn px-4\"\n        (click)=\"onViewChange('week')\"\n      >\n        {{ options.weekViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-list-btn px-4\"\n        (click)=\"onViewChange('list')\"\n      >\n        {{ options.listViewBtnTxt }}\n      </button>\n    </div>\n  </div>\n\n  <table>\n    <tbody>\n      <ng-container *ngFor=\"let event of listView.eventsInPeriod; trackBy: trackByFn\">\n        <tr class=\"grey lighten-4\">\n          <th class=\"text-left font-weight-bold\">\n            <mdb-icon fas icon=\"calendar-alt\"></mdb-icon> {{ event.start.date }} -\n            {{ event.end.date }}\n          </th>\n          <th class=\"font-weight-bold text-right\">\n            <mdb-icon fas icon=\"clock\"></mdb-icon> {{ event.start.time }} - {{ event.end.time }}\n          </th>\n        </tr>\n        <tr (click)=\"onEventClick(event)\">\n          <td class=\"text-left mdb-list-event\" colspan=\"2\">\n            <mdb-icon fas icon=\"circle\" class=\"pr-1 text-{{ event.color }}\"></mdb-icon\n            >{{ event.name }}\n          </td>\n        </tr>\n      </ng-container>\n    </tbody>\n  </table>\n</div>\n",
                styles: [".mdb-list-view{width:100%;height:100%;margin-bottom:50px}.mdb-list-view table{table-layout:fixed;width:100%;border:1px solid #ddd}.mdb-list-view table tr td,.mdb-list-view table tr th{padding:8px 10px;border-top:1px solid #ddd;border-bottom:1px solid #ddd}.mdb-list-event{cursor:pointer}.mdb-list-event:hover{background-color:#45526e0d}\n"]
            },] }
];
MdbCalendarListViewComponent.ctorParameters = () => [];
MdbCalendarListViewComponent.propDecorators = {
    initDate: [{ type: Input }],
    events: [{ type: Input }],
    monthsShort: [{ type: Input }],
    options: [{ type: Input }],
    weekDayIndex: [{ type: Input }],
    viewChanged: [{ type: Output }],
    eventClicked: [{ type: Output }],
    listChanged: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,