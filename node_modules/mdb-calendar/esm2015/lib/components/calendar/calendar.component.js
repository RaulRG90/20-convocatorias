import { Component, Output, EventEmitter, Input } from '@angular/core';
import { MDBModalService } from 'angular-bootstrap-md';
import { EventModalComponent } from '../event-modal/event-modal.component';
import { CalendarView } from '../../utils/calendar-view';
import { take } from 'rxjs/operators';
import { format, getYear, getMonth, getDate } from 'date-fns';
export class MdbCalendarComponent {
    constructor(modalService) {
        this.modalService = modalService;
        this.weekDaysDefault = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        this.weekDaysShortDefault = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        this.monthsDefault = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ];
        this.monthsShortDefault = [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec',
        ];
        this.calendarOptions = {
            firstDayOfWeek: 'Sunday',
            monthViewBtnTxt: 'Month',
            weekViewBtnTxt: 'Week',
            listViewBtnTxt: 'List',
            todayBtnTxt: 'Today',
            eventAddTitle: 'Add new event',
            eventEditTitle: 'Edit event',
            eventCancelBtnTxt: 'Cancel',
            eventAddBtnTxt: 'Add',
            eventEditBtnTxt: 'Edit',
            eventDeleteBtnTxt: 'Delete',
        };
        this.dayLabels = [];
        this.dayLabelsShort = [];
        this.startDate = new Date();
        this.events = [];
        this.editable = true;
        this.weekDays = this.weekDaysDefault;
        this.weekDaysShort = this.weekDaysShortDefault;
        this.months = this.monthsDefault;
        this.monthsShort = this.monthsShortDefault;
        this.eventDeleted = new EventEmitter();
        this.eventEdited = new EventEmitter();
        this.eventAdded = new EventEmitter();
        this.monthChanged = new EventEmitter();
        this.weekChanged = new EventEmitter();
        this.listChanged = new EventEmitter();
        this.viewChanged = new EventEmitter();
        this.MS_IN_DAY = 24 * 60 * 60 * 1000;
        this.view = CalendarView;
        this.currentView = this.view.month;
        this._isInitialized = false;
    }
    ngOnInit() {
        this.calendarOptions = this.options
            ? Object.assign(this.calendarOptions, this.options)
            : this.calendarOptions;
        this._changeDaysOrder();
        if (this.defaultView) {
            this.onViewChange(this.defaultView);
        }
        this._isInitialized = true;
    }
    _changeDaysOrder() {
        const dayIndex = (this.weekDayIndex = this.weekDaysDefault.indexOf(this.calendarOptions.firstDayOfWeek));
        if (dayIndex !== -1) {
            let index = dayIndex;
            for (let i = 0; i < this.weekDays.length; i++) {
                this.dayLabels.push(this.weekDays[index]);
                this.dayLabelsShort.push(this.weekDaysShort[index]);
                index = this.weekDaysDefault[index] === 'Saturday' ? 0 : index + 1;
            }
        }
    }
    getFormattedEvent(event) {
        return {
            id: event.id,
            name: event.name,
            startDate: format(event.startDate, 'YYYY-MM-DD, HH:mm:ss'),
            endDate: format(event.endDate, 'YYYY-MM-DD, HH:mm:ss'),
            color: event.color,
        };
    }
    formatDate(date) {
        const year = getYear(date);
        const month = getMonth(date);
        const day = getDate(date);
    }
    onDayClick(day) {
        if (this.editable) {
            this.openAddModal(day);
        }
    }
    onEventClick(event) {
        this.openEditModal(event);
    }
    onViewChange(view) {
        this.currentView = this.view[view];
        this.viewChanged.emit(view);
    }
    onMonthChange(event) {
        this.monthChanged.emit(event);
    }
    onWeekChange(event) {
        this.weekChanged.emit(event);
    }
    onListChange(event) {
        this.listChanged.emit(event);
    }
    openAddModal(event) {
        const data = {
            title: this.calendarOptions.eventAddTitle,
            actionBtn: this.calendarOptions.eventAddBtnTxt,
            cancelBtn: this.calendarOptions.eventCancelBtnTxt,
            mode: 'add',
            editable: this.editable,
            event: this.getFormattedEvent(event),
        };
        this.modalRef = this.modalService.show(EventModalComponent, { data });
        this.modalRef.content.eventData.pipe(take(1)).subscribe((newEvent) => {
            this.eventAdded.emit(newEvent);
        });
    }
    openEditModal(event) {
        const data = {
            title: this.calendarOptions.eventEditTitle,
            actionBtn: this.calendarOptions.eventEditBtnTxt,
            cancelBtn: this.calendarOptions.eventDeleteBtnTxt,
            mode: 'edit',
            editable: this.editable,
            event: event,
        };
        this.modalRef = this.modalService.show(EventModalComponent, { data });
        this.modalRef.content.eventData.pipe(take(1)).subscribe((editedEvent) => {
            this.eventEdited.emit(editedEvent);
        });
        this.modalRef.content.eventDeleted.pipe(take(1)).subscribe((deletedEvent) => {
            this.eventDeleted.emit(deletedEvent);
        });
    }
}
MdbCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-calendar',
                template: "<div class=\"mdb-calendar\" [ngSwitch]=\"currentView\">\n  <mdb-calendar-month-view\n    *ngSwitchCase=\"view.month\"\n    [initDate]=\"startDate\"\n    [events]=\"events\"\n    [options]=\"calendarOptions\"\n    [weekDaysShort]=\"dayLabelsShort\"\n    [weekDayIndex]=\"weekDayIndex\"\n    [months]=\"months\"\n    (dayClicked)=\"onDayClick($event)\"\n    (eventClicked)=\"onEventClick($event)\"\n    (viewChanged)=\"onViewChange($event)\"\n    (monthChanged)=\"onMonthChange($event)\"\n  >\n  </mdb-calendar-month-view>\n\n  <mdb-calendar-week-view\n    *ngSwitchCase=\"view.week\"\n    [initDate]=\"startDate\"\n    [events]=\"events\"\n    [options]=\"calendarOptions\"\n    [weekDaysShort]=\"weekDaysShort\"\n    [weekDayIndex]=\"weekDayIndex\"\n    [monthsShort]=\"monthsShort\"\n    (dateClicked)=\"onDayClick($event)\"\n    (eventClicked)=\"onEventClick($event)\"\n    (viewChanged)=\"onViewChange($event)\"\n    (weekChanged)=\"onWeekChange($event)\"\n  >\n  </mdb-calendar-week-view>\n\n  <mdb-calendar-list-view\n    *ngSwitchCase=\"view.list\"\n    [initDate]=\"startDate\"\n    [events]=\"events\"\n    [options]=\"calendarOptions\"\n    [weekDayIndex]=\"weekDayIndex\"\n    [monthsShort]=\"monthsShort\"\n    (eventClicked)=\"onEventClick($event)\"\n    (viewChanged)=\"onViewChange($event)\"\n    (listChanged)=\"onListChange($event)\"\n  >\n  </mdb-calendar-list-view>\n</div>\n",
                styles: ["@media (max-width: 992px){::ng-deep .mdb-calendar-tools{flex-direction:column}::ng-deep .mdb-calendar-tools .mdb-calendar-heading{text-align:center;order:-1}::ng-deep .mdb-calendar-tools>.btn-group{transform:scale(.9)}}\n"]
            },] }
];
MdbCalendarComponent.ctorParameters = () => [
    { type: MDBModalService }
];
MdbCalendarComponent.propDecorators = {
    startDate: [{ type: Input }],
    events: [{ type: Input }],
    options: [{ type: Input }],
    editable: [{ type: Input }],
    weekDays: [{ type: Input }],
    weekDaysShort: [{ type: Input }],
    months: [{ type: Input }],
    monthsShort: [{ type: Input }],
    defaultView: [{ type: Input }],
    eventDeleted: [{ type: Output }],
    eventEdited: [{ type: Output }],
    eventAdded: [{ type: Output }],
    monthChanged: [{ type: Output }],
    weekChanged: [{ type: Output }],
    listChanged: [{ type: Output }],
    viewChanged: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,