import { Component, Input, EventEmitter, Output, Renderer2, ViewChildren, } from '@angular/core';
import { getDaysInMonth, startOfDay, endOfDay, isToday, isWeekend, format, startOfWeek, getDate, } from 'date-fns';
import { getMonthDayEvents } from '../../utils/event-utils';
export class MdbCalendarMonthViewComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.weekDayIndex = 0;
        this.dayClicked = new EventEmitter();
        this.eventClicked = new EventEmitter();
        this.viewChanged = new EventEmitter();
        this.monthChanged = new EventEmitter();
        this.allCells = [];
        this.dates = [];
        this._isInitialized = false;
    }
    get initDate() {
        return this._initDate;
    }
    set initDate(date) {
        this._initDate = date;
        if (this._isInitialized) {
            const currentYear = date.getFullYear();
            const currentMonth = date.getMonth();
            this.createMonthView(currentYear, currentMonth);
        }
    }
    get events() {
        return this._events;
    }
    set events(events) {
        this._events = events;
        this.dates.forEach((week) => {
            week.week.forEach((day) => {
                day.events = getMonthDayEvents(events, day.startOfDay, day.endOfDay);
            });
        });
    }
    ngOnInit() {
        const currentYear = this.initDate.getFullYear();
        const currentMonth = this.initDate.getMonth();
        this.createMonthView(currentYear, currentMonth);
        this._isInitialized = true;
    }
    ngAfterViewInit() {
        this.allCells = this.days.toArray().map((el) => el.nativeElement);
    }
    trackByFn(index) {
        return index;
    }
    trackByEvent(index, item) {
        return item.id;
    }
    trackByDay(index, item) {
        return item.dayNumber;
    }
    onMouseDown(event, day) {
        this.dragStart = this.allCells.indexOf(event.target);
        this.isDragging = true;
        this.selectionStartDate = day.startOfDay;
    }
    onMouseUp(event, day) {
        this.dragEnd = this.allCells.indexOf(event.target);
        this.selectionEndDate = day.endOfDay;
        const calendarEvent = {
            name: 'New event',
            startDate: this.selectionStartDate,
            endDate: this.selectionEndDate,
            color: 'info',
        };
        if (this.dragStart !== this.dragEnd) {
            this.dayClicked.emit(calendarEvent);
        }
        this.isDragging = false;
        if (this.dragEnd !== 0) {
            this.selectRange();
        }
        this.clearSelection();
    }
    selectRange() {
        this.clearSelection();
        if (this.dragEnd > this.dragStart) {
            if (this.dragEnd + 1 < this.dragStart) {
                this.allCells
                    .slice(this.dragEnd, this.dragStart + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
            else {
                this.allCells
                    .slice(this.dragStart, this.dragEnd + 1)
                    .forEach((cell) => this.renderer.setStyle(cell, 'background-color', 'rgba(69,82,110,.3)'));
            }
        }
    }
    clearSelection() {
        this.allCells.forEach((cell) => this.renderer.removeStyle(cell, 'background-color'));
    }
    onMouseMove(event) {
        event.preventDefault();
        if (this.isDragging) {
            this.dragEnd = this.allCells.indexOf(event.target);
            this.selectRange();
        }
    }
    onDayClick(day) {
        const newEvent = {
            name: 'New event',
            startDate: day.startOfDay,
            endDate: day.endOfDay,
            color: 'info',
        };
        this.dayClicked.emit(newEvent);
    }
    onEventClick(event) {
        const eventCopy = {
            id: event.id,
            name: event.name,
            startDate: format(event.startDate, 'YYYY-MM-DD, HH:mm:ss'),
            endDate: format(event.endDate, 'YYYY-MM-DD, HH:mm:ss'),
            color: event.color,
        };
        this.eventClicked.emit(eventCopy);
    }
    onViewChange(view) {
        this.viewChanged.emit(view);
    }
    next() {
        if (this.selectedMonth === 11) {
            this.createMonthView(this.selectedYear + 1, 0);
        }
        else {
            this.createMonthView(this.selectedYear, this.selectedMonth + 1);
        }
        this.monthChanged.emit({
            index: this.selectedMonth,
            month: this.months[this.selectedMonth],
            year: this.selectedYear,
        });
    }
    previous() {
        if (this.selectedMonth === 0) {
            this.createMonthView(this.selectedYear - 1, 11);
        }
        else {
            this.createMonthView(this.selectedYear, this.selectedMonth - 1);
        }
        this.monthChanged.emit({
            index: this.selectedMonth,
            month: this.months[this.selectedMonth],
            year: this.selectedYear,
        });
    }
    goToToday() {
        const today = new Date();
        const currentYear = today.getFullYear();
        const currentMonth = today.getMonth();
        this.createMonthView(currentYear, currentMonth);
        this.monthChanged.emit({
            index: this.selectedMonth,
            name: this.months[this.selectedMonth],
            year: this.selectedYear,
        });
    }
    getDaysInPreviousMonth(year, month) {
        if (month === -1) {
            return getDaysInMonth(new Date(year - 1, 11));
        }
        return getDaysInMonth(new Date(year, month));
    }
    createMonthView(year, month) {
        this.selectedMonth = month;
        this.selectedYear = year;
        const daysInMonth = getDaysInMonth(new Date(year, month));
        const daysInPreviousMonth = this.getDaysInPreviousMonth(year, month - 1);
        const firstDay = startOfWeek(new Date(year, month), { weekStartsOn: this.weekDayIndex });
        const firstVisibleDay = getDate(firstDay);
        let dayStart;
        let dayEnd;
        const dates = [];
        let dayNumber = 1;
        let monthNumber = month;
        for (let i = 1; i < 7; i++) {
            const week = [];
            if (i === 1 && firstVisibleDay !== 1) {
                for (let j = firstVisibleDay; j <= daysInPreviousMonth; j++) {
                    dayStart = startOfDay(new Date(year, month - 1, j));
                    dayEnd = endOfDay(new Date(year, month - 1, j));
                    week.push({
                        dayNumber: j,
                        isToday: false,
                        isWeekend: isWeekend(new Date(year, month - 1, j)),
                        month: month - 1,
                        startOfDay: startOfDay(new Date(year, month - 1, j)),
                        endOfDay: endOfDay(new Date(year, month - 1, j)),
                        events: getMonthDayEvents(this.events, dayStart, dayEnd),
                    });
                }
                const daysLeft = 7 - week.length;
                for (let j = 0; j < daysLeft; j++) {
                    dayStart = startOfDay(new Date(year, month, dayNumber));
                    dayEnd = endOfDay(new Date(year, month, dayNumber));
                    week.push({
                        dayNumber: dayNumber,
                        isToday: isToday(new Date(year, month, dayNumber)),
                        isWeekend: isWeekend(new Date(year, month, dayNumber)),
                        month: month,
                        startOfDay: startOfDay(new Date(year, month, dayNumber)),
                        endOfDay: endOfDay(new Date(year, month, dayNumber)),
                        events: getMonthDayEvents(this.events, dayStart, dayEnd),
                    });
                    dayNumber++;
                }
            }
            else {
                for (let j = 1; j < 8; j++) {
                    if (dayNumber > daysInMonth) {
                        dayNumber = 1;
                        monthNumber = month + 1;
                    }
                    dayStart = startOfDay(new Date(year, monthNumber, dayNumber));
                    dayEnd = endOfDay(new Date(year, monthNumber, dayNumber));
                    week.push({
                        dayNumber: dayNumber,
                        isToday: isToday(new Date(year, monthNumber, dayNumber)),
                        isWeekend: isWeekend(new Date(year, monthNumber, dayNumber)),
                        month: monthNumber,
                        startOfDay: startOfDay(new Date(year, monthNumber, dayNumber)),
                        endOfDay: endOfDay(new Date(year, monthNumber, dayNumber)),
                        events: getMonthDayEvents(this.events, dayStart, dayEnd),
                    });
                    dayNumber++;
                }
            }
            dates.push({ week });
        }
        this.dates = dates;
    }
}
MdbCalendarMonthViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-calendar-month-view',
                template: "<div class=\"mdb-month-view\">\n  <div class=\"mdb-calendar-tools d-flex justify-content-between mb-3\">\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-previous-btn px-4\"\n        (click)=\"previous()\"\n      >\n        <mdb-icon fas icon=\"chevron-left\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-next-btn px-4\"\n        (click)=\"next()\"\n      >\n        <mdb-icon fas icon=\"chevron-right\"></mdb-icon>\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-today-btn px-4\"\n        (click)=\"goToToday()\"\n      >\n        {{ options.todayBtnTxt }}\n      </button>\n    </div>\n    <h2 class=\"mdb-calendar-heading\">{{ months[selectedMonth] }} {{ selectedYear }}</h2>\n    <div class=\"btn-group btn-group-sm\" role=\"group\">\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-month-btn px-4\"\n        (click)=\"onViewChange('month')\"\n      >\n        {{ options.monthViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-week-btn px-4\"\n        (click)=\"onViewChange('week')\"\n      >\n        {{ options.weekViewBtnTxt }}\n      </button>\n      <button\n        mdbBtn\n        color=\"info\"\n        outline=\"true\"\n        class=\"mdb-calendar-list-btn px-4\"\n        (click)=\"onViewChange('list')\"\n      >\n        {{ options.listViewBtnTxt }}\n      </button>\n    </div>\n  </div>\n  <table>\n    <thead>\n      <th *ngFor=\"let day of weekDaysShort; trackBy: trackByFn\">{{ day }}</th>\n    </thead>\n\n    <tbody>\n      <tr *ngFor=\"let week of dates; trackBy: trackByFn\">\n        <td\n          #dayEl\n          *ngFor=\"let day of week.week; trackBy: trackByFn\"\n          [ngClass]=\"{\n            'mdb-today-cell': day.isToday,\n            'rgba-mdb-color-slight': day.isWeekend && !day.isToday\n          }\"\n          (click)=\"onDayClick(day)\"\n          (mousedown)=\"onMouseDown($event, day)\"\n          (mouseup)=\"onMouseUp($event, day)\"\n          (mouseenter)=\"onMouseMove($event)\"\n        >\n          <span class=\"mdb-day-field\" [ngClass]=\"{ 'text-light': day.month !== selectedMonth }\">{{\n            day.dayNumber\n          }}</span>\n          <div\n            class=\"mdb-event mdb-event-long text-white small px-1 bg-{{ event.color }}\"\n            [ngClass]=\"{\n              'mdb-event-long': event.longEvent && !event.eventStart && !event.eventEnd,\n              'mdb-event-start': event.longEvent && event.eventStart,\n              'mdb-event-end': event.longEvent && event.eventEnd,\n              'mdb-event-single': !event.longEvent\n            }\"\n            mdbTooltip=\"{{ event.name }}\"\n            placement=\"top\"\n            *ngFor=\"let event of day.events; trackBy: trackByEvent\"\n            (click)=\"onEventClick(event); $event.stopPropagation()\"\n          >\n            <span>{{ event.name }}</span>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n",
                styles: [".mdb-today-cell{background-color:#e1f5fe}.mdb-month-view table{table-layout:fixed;width:100%}.mdb-month-view table th{text-align:center!important;height:30px;font-weight:700;border:1px solid #ddd}.mdb-month-view table td{height:12vh;padding-top:25px;vertical-align:top;position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:1px solid #ddd}.mdb-month-view table td:hover{background-color:#45526e0d!important}.mdb-day-field{position:absolute;right:8px;top:5px}.mdb-event{cursor:pointer;font-weight:700;text-align:left!important}.mdb-event-start{margin:1px -2px 1px 2px}.mdb-event-end{margin:1px 2px 1px -2px;text-indent:-9999px}.mdb-event-long{margin:1px -2px;text-indent:-9999px}.mdb-event-single{margin:1px 2px}\n"]
            },] }
];
MdbCalendarMonthViewComponent.ctorParameters = () => [
    { type: Renderer2 }
];
MdbCalendarMonthViewComponent.propDecorators = {
    days: [{ type: ViewChildren, args: ['dayEl',] }],
    initDate: [{ type: Input }],
    events: [{ type: Input }],
    weekDaysShort: [{ type: Input }],
    months: [{ type: Input }],
    weekDayIndex: [{ type: Input }],
    options: [{ type: Input }],
    dayClicked: [{ type: Output }],
    eventClicked: [{ type: Output }],
    viewChanged: [{ type: Output }],
    monthChanged: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,