import { ElementRef, Renderer2, OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { MdbSortableService } from './mdb-sortable.service';
import * as ɵngcc0 from '@angular/core';
export interface Position {
    x: number;
    y: number;
}
export interface Boundaries {
    minX: number;
    maxX: number;
    minY: number;
    maxY: number;
}
export declare class MdbSortableDirective implements OnInit, OnDestroy {
    el: ElementRef;
    private renderer;
    private _document;
    private sortableService;
    disabled: boolean;
    disabledDragElements: ElementRef[];
    sortThreshold: number;
    dragStart: EventEmitter<any>;
    dragEnd: EventEmitter<any>;
    sortable: boolean;
    _helper: HTMLElement;
    private _elRect;
    _placeholder: HTMLElement;
    private _pickUpPos;
    private _startPos;
    _elPos: Position;
    private activeEl;
    start$: Observable<any>;
    move$: Observable<any>;
    end$: Observable<any>;
    private _isDragging;
    private destroy$;
    constructor(el: ElementRef, renderer: Renderer2, _document: any, sortableService: MdbSortableService);
    private _subscribeToEvents;
    private _createPlaceholder;
    private _createHelper;
    private _initSortableElements;
    onDragStart(event: any): boolean;
    onDragMove(event: any): boolean;
    onDragEnd(event: any): boolean;
    private _getDocumentScrollPos;
    private _getPointerPos;
    private _isTouchEvent;
    private _getTransform;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MdbSortableDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MdbSortableDirective, "[mdbSortable]", never, { "disabled": "disabled"; "sortThreshold": "sortThreshold"; "disabledDragElements": "disabledDragElements"; }, { "dragStart": "dragStart"; "dragEnd": "dragEnd"; }, never>;
}

//# sourceMappingURL=mdb-sortable.directive.d.ts.map