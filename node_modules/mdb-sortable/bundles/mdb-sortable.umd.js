(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('mdb-sortable', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['mdb-sortable'] = {}, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common));
}(this, (function (exports, i0, rxjs, operators, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var MdbSortableService = /** @class */ (function () {
        function MdbSortableService() {
            this.dragStart = new rxjs.Subject();
            this.dragMove = new rxjs.Subject();
            this.dragEnd = new rxjs.Subject();
        }
        MdbSortableService.prototype.ngOnDestroy = function () {
            this.dragStart.complete();
            this.dragMove.complete();
            this.dragEnd.complete();
        };
        return MdbSortableService;
    }());
    MdbSortableService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function MdbSortableService_Factory() { return new MdbSortableService(); }, token: MdbSortableService, providedIn: "root" });
    MdbSortableService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    MdbSortableService.ctorParameters = function () { return []; };

    function cloneEl(node) {
        var clone = node.cloneNode(true);
        clone.removeAttribute('id');
        return clone;
    }
    var MdbSortableDirective = /** @class */ (function () {
        function MdbSortableDirective(el, renderer, _document, sortableService) {
            this.el = el;
            this.renderer = renderer;
            this._document = _document;
            this.sortableService = sortableService;
            this.disabled = false;
            this.sortThreshold = 5;
            this.dragStart = new i0.EventEmitter();
            this.dragEnd = new i0.EventEmitter();
            this.sortable = true;
            this._startPos = { x: 0, y: 0 };
            this._elPos = { x: 0, y: 0 };
            this._isDragging = false;
            this.destroy$ = new rxjs.Subject();
        }
        MdbSortableDirective.prototype._subscribeToEvents = function () {
            var _this = this;
            var drag = this.start$.pipe(operators.filter(function (event) { return event.button !== 2; }), operators.concatMap(function (event) {
                _this.onDragStart(event);
                return _this.move$.pipe(operators.tap(function (moveEvent) {
                    _this.onDragMove(moveEvent);
                }), operators.takeUntil(_this.end$));
            }), operators.takeUntil(this.destroy$));
            var drop = this.start$.pipe(operators.filter(function (event) { return event.button !== 2; }), operators.concatMap(function (event) {
                return _this.end$.pipe(operators.first(), operators.tap(function () {
                    _this.onDragEnd(event);
                }));
            }), operators.takeUntil(this.destroy$));
            drag.subscribe();
            drop.subscribe();
        };
        MdbSortableDirective.prototype._createPlaceholder = function () {
            var placeholder = cloneEl(this.el.nativeElement);
            this.renderer.addClass(placeholder, 'mdb-sortable-placeholder');
            return placeholder;
        };
        MdbSortableDirective.prototype._createHelper = function () {
            var helper = cloneEl(this.el.nativeElement);
            this.renderer.setStyle(helper, 'position', 'fixed');
            this.renderer.setStyle(helper, 'top', '0');
            this.renderer.setStyle(helper, 'left', '0');
            this.renderer.setStyle(helper, 'width', this._elRect.width + "px");
            this.renderer.setStyle(helper, 'height', this._elRect.height + "px");
            this.renderer.setStyle(helper, 'transform', this._getTransform(this._elRect.left, this._elRect.top));
            this.renderer.addClass(helper, 'mdb-sortable-helper');
            return helper;
        };
        MdbSortableDirective.prototype._initSortableElements = function () {
            var el = this.el.nativeElement;
            var placeholder = this._placeholder = this._createPlaceholder();
            var helper = this._helper = this._createHelper();
            this.renderer.appendChild(this._document.body, el.parentNode.replaceChild(placeholder, el));
            this.renderer.appendChild(this._document.body, helper);
            this.renderer.setStyle(el, 'display', 'none');
        };
        MdbSortableDirective.prototype.onDragStart = function (event) {
            this.activeEl = event.target;
            if (this.disabledDragElements && this.disabledDragElements.find(function (el) { return el === event.target; })) {
                return false;
            }
            else {
                event.stopPropagation();
                if (this.disabled) {
                    return;
                }
                if (event instanceof MouseEvent && event.button === 2) {
                    return;
                }
                var elRect = this._elRect = this.el.nativeElement.getBoundingClientRect();
                this._pickUpPos = this._getPointerPos(event);
                this._startPos.x = elRect.left;
                this._startPos.y = elRect.top;
                this.dragStart.emit(this);
                this.sortableService.dragStart.next(this);
            }
        };
        MdbSortableDirective.prototype.onDragMove = function (event) {
            this.activeEl = event.target;
            if (this.disabledDragElements && this.disabledDragElements.find(function (el) { return el === event.target; })) {
                return false;
            }
            else {
                if (this.disabled) {
                    return;
                }
                var pointerPosition = this._getPointerPos(event);
                var diffX = Math.abs(pointerPosition.x - this._pickUpPos.x);
                var diffY = Math.abs(pointerPosition.y - this._pickUpPos.y);
                var isOverThreshold = diffX + diffY >= this.sortThreshold;
                // event.preventDefault();
                if (this._pickUpPos && isOverThreshold) {
                    if (!this._isDragging) {
                        this._isDragging = true;
                        this._initSortableElements();
                    }
                    this._elPos.x = pointerPosition.x - this._pickUpPos.x + this._startPos.x;
                    this._elPos.y = pointerPosition.y - this._pickUpPos.y + this._startPos.y;
                    this._helper.style.transform = this._getTransform(this._elPos.x, this._elPos.y);
                    this.sortableService.dragMove.next({
                        pointerPosition: pointerPosition,
                        placeholder: this._placeholder,
                        helper: this._helper
                    });
                }
            }
        };
        MdbSortableDirective.prototype.onDragEnd = function (event) {
            if (this.disabledDragElements && this.disabledDragElements.find(function (el) { return el === event.target; })) {
                return false;
            }
            else {
                if (this.disabled) {
                    return;
                }
                if (this._isDragging) {
                    this.renderer.removeStyle(this.el.nativeElement, 'transform');
                    if (this._helper) {
                        this.renderer.removeChild(this._document.body, this._helper);
                    }
                    if (this._placeholder) {
                        this.renderer
                            .appendChild(this._document.body, this._placeholder.parentNode.replaceChild(this.el.nativeElement, this._placeholder));
                    }
                    this.renderer.removeStyle(this.el.nativeElement, 'display');
                    if (this._placeholder && this._placeholder.parentNode) {
                        this.renderer.removeChild(this._placeholder.parentNode, this._placeholder);
                    }
                }
                this.dragEnd.emit();
                this.sortableService.dragEnd.next(this);
                this.activeEl = null;
                this._isDragging = false;
            }
        };
        MdbSortableDirective.prototype._getDocumentScrollPos = function () {
            var documentElement = this._document.documentElement;
            var body = this._document.body;
            var top = documentElement.scrollTop || body.scrollTop;
            var left = documentElement.scrollLeft || body.scrollLeft;
            return { top: top, left: left };
        };
        MdbSortableDirective.prototype._getPointerPos = function (event) {
            var point = this._isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;
            var scrollPos = this._getDocumentScrollPos();
            return {
                x: point.pageX - scrollPos.left,
                y: point.pageY - scrollPos.top
            };
        };
        MdbSortableDirective.prototype._isTouchEvent = function (event) {
            return event.type.startsWith('touch');
        };
        MdbSortableDirective.prototype._getTransform = function (x, y) {
            return "translate3d(" + Math.round(x) + "px, " + Math.round(y) + "px, 0)";
        };
        MdbSortableDirective.prototype.ngOnInit = function () {
            this.start$ = rxjs.merge(rxjs.fromEvent(this.el.nativeElement, 'mousedown', { passive: false }), rxjs.fromEvent(this.el.nativeElement, 'touchstart', { passive: false }));
            this.move$ = rxjs.merge(rxjs.fromEvent(this._document, 'mousemove', { passive: false }), rxjs.fromEvent(this._document, 'touchmove', { passive: false }));
            this.end$ = rxjs.merge(rxjs.fromEvent(this._document, 'mouseup', { passive: false }), rxjs.fromEvent(this._document, 'touchend', { passive: false }));
            this._subscribeToEvents();
            this._elRect = this.el.nativeElement.getBoundingClientRect();
        };
        MdbSortableDirective.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        return MdbSortableDirective;
    }());
    MdbSortableDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[mdbSortable]'
                },] }
    ];
    MdbSortableDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: undefined, decorators: [{ type: i0.Inject, args: [common.DOCUMENT,] }] },
        { type: MdbSortableService }
    ]; };
    MdbSortableDirective.propDecorators = {
        disabled: [{ type: i0.HostBinding, args: ['class.mdb-sortable-disabled',] }, { type: i0.Input }],
        disabledDragElements: [{ type: i0.Input }],
        sortThreshold: [{ type: i0.Input }],
        dragStart: [{ type: i0.Output }],
        dragEnd: [{ type: i0.Output }],
        sortable: [{ type: i0.HostBinding, args: ['class.mdb-sortable',] }]
    };

    var MdbSortableListDirective = /** @class */ (function () {
        function MdbSortableListDirective(el, _document, sortableService) {
            this.el = el;
            this._document = _document;
            this.sortableService = sortableService;
            this.autoScroll = false;
            this.drop = new i0.EventEmitter();
            this.destroy$ = new rxjs.Subject();
            this._scrollSpeed = 10;
            this._scrollSensitivity = 20;
        }
        MdbSortableListDirective.prototype.ngOnInit = function () { };
        MdbSortableListDirective.prototype.ngAfterContentInit = function () {
            var _this = this;
            this._sortables.changes.subscribe(function (result) {
                _this._sortables = result;
            });
            var drag = this.sortableService.dragStart.pipe(operators.switchMap(function (event) {
                if (_this._sortables.toArray().find(function (el) { return event === el; })) {
                    _this._previousList = _this._currentList = _this;
                    _this._currentIndex = _this._sortables
                        .toArray()
                        .findIndex(function (el) { return event === el; });
                    _this._newIndex = _this._currentIndex;
                    return _this.sortableService.dragMove.pipe(operators.tap(function (moveEvent) {
                        _this.onSort(moveEvent.pointerPosition, moveEvent.placeholder, moveEvent.helper);
                    }), operators.takeUntil(drop));
                }
                else {
                    return rxjs.empty();
                }
            }), operators.takeUntil(this.destroy$));
            var drop = this.sortableService.dragStart.pipe(operators.switchMap(function (event) {
                if (_this._sortables.toArray().find(function (el) { return event === el; })) {
                    return _this.sortableService.dragEnd.pipe(operators.first(), operators.tap(function () {
                        _this.onDragEnd();
                    }));
                }
                else {
                    return rxjs.empty();
                }
            }), operators.takeUntil(this.destroy$));
            drag.subscribe();
            drop.subscribe();
        };
        MdbSortableListDirective.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        MdbSortableListDirective.prototype._sortItems = function (dragged, hovered) {
            var draggedParent = dragged.parentNode;
            var hoveredParent = hovered.parentNode;
            if (draggedParent !== hoveredParent) {
                hoveredParent.insertBefore(dragged, hovered);
            }
            else {
                var temp = this._document.createElement('div');
                draggedParent.insertBefore(temp, dragged);
                hoveredParent.insertBefore(dragged, hovered);
                draggedParent.insertBefore(hovered, temp);
                draggedParent.removeChild(temp);
            }
        };
        MdbSortableListDirective.prototype._updateScrollPos = function (sortableElement) {
            var el = this.el.nativeElement;
            var elRect = sortableElement.getBoundingClientRect();
            var height = el.clientHeight;
            var width = el.clientWidth;
            if (elRect.top < this._scrollSensitivity) {
                el.scrollTop -= this._scrollSpeed;
            }
            if (elRect.top + elRect.height > height - this._scrollSensitivity) {
                el.scrollTop += this._scrollSpeed;
            }
            if (elRect.left < this._scrollSensitivity) {
                el.scrollLeft -= this._scrollSpeed;
            }
            if (elRect.left + elRect.width > width - this._scrollSensitivity) {
                el.scrollLeft += this._scrollSpeed;
            }
        };
        MdbSortableListDirective.prototype._isPointerOverItem = function (item, x, y) {
            var _a = item.getBoundingClientRect(), top = _a.top, bottom = _a.bottom, left = _a.left, right = _a.right;
            return y >= top && y <= bottom && x >= left && x <= right;
        };
        MdbSortableListDirective.prototype.onSort = function (pointerPosition, placeholder, helper) {
            var _this = this;
            var lists;
            if (this.connectedWith) {
                lists = this.connectedWith.slice();
            }
            var currentItem = placeholder;
            var container = this._sortables;
            this._previousList = this;
            this._currentList = this._previousList;
            var activeList = this.el.nativeElement;
            if (this.autoScroll) {
                this._updateScrollPos(helper);
            }
            if (lists && lists.length) {
                lists.forEach(function (list) {
                    if (_this._isPointerOverItem(list.el.nativeElement, pointerPosition.x, pointerPosition.y)) {
                        container = list._sortables;
                        activeList = list.el.nativeElement;
                        _this._currentList = list;
                    }
                    else if (_this._isPointerOverItem(_this.el.nativeElement, pointerPosition.x, pointerPosition.y)) {
                        container = _this._sortables;
                        activeList = _this.el.nativeElement;
                        _this._currentList = _this._previousList;
                    }
                });
            }
            var sortables = container;
            sortables.forEach(function (item) {
                if (_this._isPointerOverItem(item.el.nativeElement, pointerPosition.x, pointerPosition.y)) {
                    _this._sortItems(currentItem, item.el.nativeElement);
                    var list = Array.from(activeList.children);
                    _this._newIndex = list.findIndex(function (el) { return el === currentItem; });
                }
            });
        };
        MdbSortableListDirective.prototype.onDragEnd = function () {
            this.drop.emit({
                currentList: this._currentList,
                previousList: this._previousList,
                oldIndex: this._currentIndex,
                newIndex: this._newIndex
            });
        };
        return MdbSortableListDirective;
    }());
    MdbSortableListDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[mdbSortableList]',
                    exportAs: 'mdbSortableList'
                },] }
    ];
    MdbSortableListDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [common.DOCUMENT,] }] },
        { type: MdbSortableService }
    ]; };
    MdbSortableListDirective.propDecorators = {
        _sortables: [{ type: i0.ContentChildren, args: [MdbSortableDirective,] }],
        autoScroll: [{ type: i0.Input }],
        connectedWith: [{ type: i0.Input }],
        data: [{ type: i0.Input }],
        drop: [{ type: i0.Output }]
    };

    function moveItemToNewList(currentList, targetList, oldIndex, newIndex) {
        if (currentList.length > 0) {
            var item = currentList.splice(oldIndex, 1)[0];
            targetList.splice(newIndex, 0, item);
        }
    }
    function moveItemInList(list, oldIndex, newIndex) {
        var item = list[oldIndex];
        list.splice(oldIndex, 1);
        list.splice(newIndex, 0, item);
    }

    var MdbSortableModule = /** @class */ (function () {
        function MdbSortableModule() {
        }
        return MdbSortableModule;
    }());
    MdbSortableModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [MdbSortableDirective, MdbSortableListDirective],
                    imports: [],
                    exports: [MdbSortableDirective, MdbSortableListDirective],
                    providers: [MdbSortableService]
                },] }
    ];

    /*
     * Public API Surface of mdb-sortable
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbSortableDirective = MdbSortableDirective;
    exports.MdbSortableListDirective = MdbSortableListDirective;
    exports.MdbSortableModule = MdbSortableModule;
    exports.MdbSortableService = MdbSortableService;
    exports.moveItemInList = moveItemInList;
    exports.moveItemToNewList = moveItemToNewList;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-sortable.umd.js.map
