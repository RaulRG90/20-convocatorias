import { Directive, ElementRef, Renderer2, Input, Inject, EventEmitter, Output, HostBinding, } from '@angular/core';
import { fromEvent, merge, Subject } from 'rxjs';
import { takeUntil, tap, first, concatMap, filter } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
import { MdbSortableService } from './mdb-sortable.service';
function cloneEl(node) {
    const clone = node.cloneNode(true);
    clone.removeAttribute('id');
    return clone;
}
export class MdbSortableDirective {
    constructor(el, renderer, _document, sortableService) {
        this.el = el;
        this.renderer = renderer;
        this._document = _document;
        this.sortableService = sortableService;
        this.disabled = false;
        this.sortThreshold = 5;
        this.dragStart = new EventEmitter();
        this.dragEnd = new EventEmitter();
        this.sortable = true;
        this._startPos = { x: 0, y: 0 };
        this._elPos = { x: 0, y: 0 };
        this._isDragging = false;
        this.destroy$ = new Subject();
    }
    _subscribeToEvents() {
        const drag = this.start$.pipe(filter((event) => event.button !== 2), concatMap((event) => {
            this.onDragStart(event);
            return this.move$.pipe(tap((moveEvent) => {
                this.onDragMove(moveEvent);
            }), takeUntil(this.end$));
        }), takeUntil(this.destroy$));
        const drop = this.start$.pipe(filter((event) => event.button !== 2), concatMap((event) => {
            return this.end$.pipe(first(), tap(() => {
                this.onDragEnd(event);
            }));
        }), takeUntil(this.destroy$));
        drag.subscribe();
        drop.subscribe();
    }
    _createPlaceholder() {
        const placeholder = cloneEl(this.el.nativeElement);
        this.renderer.addClass(placeholder, 'mdb-sortable-placeholder');
        return placeholder;
    }
    _createHelper() {
        const helper = cloneEl(this.el.nativeElement);
        this.renderer.setStyle(helper, 'position', 'fixed');
        this.renderer.setStyle(helper, 'top', '0');
        this.renderer.setStyle(helper, 'left', '0');
        this.renderer.setStyle(helper, 'width', `${this._elRect.width}px`);
        this.renderer.setStyle(helper, 'height', `${this._elRect.height}px`);
        this.renderer.setStyle(helper, 'transform', this._getTransform(this._elRect.left, this._elRect.top));
        this.renderer.addClass(helper, 'mdb-sortable-helper');
        return helper;
    }
    _initSortableElements() {
        const el = this.el.nativeElement;
        const placeholder = this._placeholder = this._createPlaceholder();
        const helper = this._helper = this._createHelper();
        this.renderer.appendChild(this._document.body, el.parentNode.replaceChild(placeholder, el));
        this.renderer.appendChild(this._document.body, helper);
        this.renderer.setStyle(el, 'display', 'none');
    }
    onDragStart(event) {
        this.activeEl = event.target;
        if (this.disabledDragElements && this.disabledDragElements.find((el) => el === event.target)) {
            return false;
        }
        else {
            event.stopPropagation();
            if (this.disabled) {
                return;
            }
            if (event instanceof MouseEvent && event.button === 2) {
                return;
            }
            const elRect = this._elRect = this.el.nativeElement.getBoundingClientRect();
            this._pickUpPos = this._getPointerPos(event);
            this._startPos.x = elRect.left;
            this._startPos.y = elRect.top;
            this.dragStart.emit(this);
            this.sortableService.dragStart.next(this);
        }
    }
    onDragMove(event) {
        this.activeEl = event.target;
        if (this.disabledDragElements && this.disabledDragElements.find((el) => el === event.target)) {
            return false;
        }
        else {
            if (this.disabled) {
                return;
            }
            const pointerPosition = this._getPointerPos(event);
            const diffX = Math.abs(pointerPosition.x - this._pickUpPos.x);
            const diffY = Math.abs(pointerPosition.y - this._pickUpPos.y);
            const isOverThreshold = diffX + diffY >= this.sortThreshold;
            // event.preventDefault();
            if (this._pickUpPos && isOverThreshold) {
                if (!this._isDragging) {
                    this._isDragging = true;
                    this._initSortableElements();
                }
                this._elPos.x = pointerPosition.x - this._pickUpPos.x + this._startPos.x;
                this._elPos.y = pointerPosition.y - this._pickUpPos.y + this._startPos.y;
                this._helper.style.transform = this._getTransform(this._elPos.x, this._elPos.y);
                this.sortableService.dragMove.next({
                    pointerPosition: pointerPosition,
                    placeholder: this._placeholder,
                    helper: this._helper
                });
            }
        }
    }
    onDragEnd(event) {
        if (this.disabledDragElements && this.disabledDragElements.find((el) => el === event.target)) {
            return false;
        }
        else {
            if (this.disabled) {
                return;
            }
            if (this._isDragging) {
                this.renderer.removeStyle(this.el.nativeElement, 'transform');
                if (this._helper) {
                    this.renderer.removeChild(this._document.body, this._helper);
                }
                if (this._placeholder) {
                    this.renderer
                        .appendChild(this._document.body, this._placeholder.parentNode.replaceChild(this.el.nativeElement, this._placeholder));
                }
                this.renderer.removeStyle(this.el.nativeElement, 'display');
                if (this._placeholder && this._placeholder.parentNode) {
                    this.renderer.removeChild(this._placeholder.parentNode, this._placeholder);
                }
            }
            this.dragEnd.emit();
            this.sortableService.dragEnd.next(this);
            this.activeEl = null;
            this._isDragging = false;
        }
    }
    _getDocumentScrollPos() {
        const documentElement = this._document.documentElement;
        const body = this._document.body;
        const top = documentElement.scrollTop || body.scrollTop;
        const left = documentElement.scrollLeft || body.scrollLeft;
        return { top, left };
    }
    _getPointerPos(event) {
        const point = this._isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;
        const scrollPos = this._getDocumentScrollPos();
        return {
            x: point.pageX - scrollPos.left,
            y: point.pageY - scrollPos.top
        };
    }
    _isTouchEvent(event) {
        return event.type.startsWith('touch');
    }
    _getTransform(x, y) {
        return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;
    }
    ngOnInit() {
        this.start$ = merge(fromEvent(this.el.nativeElement, 'mousedown', { passive: false }), fromEvent(this.el.nativeElement, 'touchstart', { passive: false }));
        this.move$ = merge(fromEvent(this._document, 'mousemove', { passive: false }), fromEvent(this._document, 'touchmove', { passive: false }));
        this.end$ = merge(fromEvent(this._document, 'mouseup', { passive: false }), fromEvent(this._document, 'touchend', { passive: false }));
        this._subscribeToEvents();
        this._elRect = this.el.nativeElement.getBoundingClientRect();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
MdbSortableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mdbSortable]'
            },] }
];
MdbSortableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: MdbSortableService }
];
MdbSortableDirective.propDecorators = {
    disabled: [{ type: HostBinding, args: ['class.mdb-sortable-disabled',] }, { type: Input }],
    disabledDragElements: [{ type: Input }],
    sortThreshold: [{ type: Input }],
    dragStart: [{ type: Output }],
    dragEnd: [{ type: Output }],
    sortable: [{ type: HostBinding, args: ['class.mdb-sortable',] }]
};
//# sourceMappingURL=data:application/json;base64,