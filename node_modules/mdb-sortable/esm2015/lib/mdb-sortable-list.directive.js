import { Directive, ElementRef, ContentChildren, Output, EventEmitter, Input, Inject } from '@angular/core';
import { MdbSortableDirective } from './mdb-sortable.directive';
import { DOCUMENT } from '@angular/common';
import { MdbSortableService } from './mdb-sortable.service';
import { Subject, empty } from 'rxjs';
import { tap, takeUntil, first, switchMap } from 'rxjs/operators';
export class MdbSortableListDirective {
    constructor(el, _document, sortableService) {
        this.el = el;
        this._document = _document;
        this.sortableService = sortableService;
        this.autoScroll = false;
        this.drop = new EventEmitter();
        this.destroy$ = new Subject();
        this._scrollSpeed = 10;
        this._scrollSensitivity = 20;
    }
    ngOnInit() { }
    ngAfterContentInit() {
        this._sortables.changes.subscribe(result => {
            this._sortables = result;
        });
        const drag = this.sortableService.dragStart.pipe(switchMap((event) => {
            if (this._sortables.toArray().find(el => event === el)) {
                this._previousList = this._currentList = this;
                this._currentIndex = this._sortables
                    .toArray()
                    .findIndex((el) => event === el);
                this._newIndex = this._currentIndex;
                return this.sortableService.dragMove.pipe(tap((moveEvent) => {
                    this.onSort(moveEvent.pointerPosition, moveEvent.placeholder, moveEvent.helper);
                }), takeUntil(drop));
            }
            else {
                return empty();
            }
        }), takeUntil(this.destroy$));
        const drop = this.sortableService.dragStart.pipe(switchMap((event) => {
            if (this._sortables.toArray().find(el => event === el)) {
                return this.sortableService.dragEnd.pipe(first(), tap(() => {
                    this.onDragEnd();
                }));
            }
            else {
                return empty();
            }
        }), takeUntil(this.destroy$));
        drag.subscribe();
        drop.subscribe();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    _sortItems(dragged, hovered) {
        const draggedParent = dragged.parentNode;
        const hoveredParent = hovered.parentNode;
        if (draggedParent !== hoveredParent) {
            hoveredParent.insertBefore(dragged, hovered);
        }
        else {
            const temp = this._document.createElement('div');
            draggedParent.insertBefore(temp, dragged);
            hoveredParent.insertBefore(dragged, hovered);
            draggedParent.insertBefore(hovered, temp);
            draggedParent.removeChild(temp);
        }
    }
    _updateScrollPos(sortableElement) {
        const el = this.el.nativeElement;
        const elRect = sortableElement.getBoundingClientRect();
        const height = el.clientHeight;
        const width = el.clientWidth;
        if (elRect.top < this._scrollSensitivity) {
            el.scrollTop -= this._scrollSpeed;
        }
        if (elRect.top + elRect.height > height - this._scrollSensitivity) {
            el.scrollTop += this._scrollSpeed;
        }
        if (elRect.left < this._scrollSensitivity) {
            el.scrollLeft -= this._scrollSpeed;
        }
        if (elRect.left + elRect.width > width - this._scrollSensitivity) {
            el.scrollLeft += this._scrollSpeed;
        }
    }
    _isPointerOverItem(item, x, y) {
        const { top, bottom, left, right } = item.getBoundingClientRect();
        return y >= top && y <= bottom && x >= left && x <= right;
    }
    onSort(pointerPosition, placeholder, helper) {
        let lists;
        if (this.connectedWith) {
            lists = this.connectedWith.slice();
        }
        const currentItem = placeholder;
        let container = this._sortables;
        this._previousList = this;
        this._currentList = this._previousList;
        let activeList = this.el.nativeElement;
        if (this.autoScroll) {
            this._updateScrollPos(helper);
        }
        if (lists && lists.length) {
            lists.forEach(list => {
                if (this._isPointerOverItem(list.el.nativeElement, pointerPosition.x, pointerPosition.y)) {
                    container = list._sortables;
                    activeList = list.el.nativeElement;
                    this._currentList = list;
                }
                else if (this._isPointerOverItem(this.el.nativeElement, pointerPosition.x, pointerPosition.y)) {
                    container = this._sortables;
                    activeList = this.el.nativeElement;
                    this._currentList = this._previousList;
                }
            });
        }
        const sortables = container;
        sortables.forEach(item => {
            if (this._isPointerOverItem(item.el.nativeElement, pointerPosition.x, pointerPosition.y)) {
                this._sortItems(currentItem, item.el.nativeElement);
                const list = Array.from(activeList.children);
                this._newIndex = list.findIndex((el) => el === currentItem);
            }
        });
    }
    onDragEnd() {
        this.drop.emit({
            currentList: this._currentList,
            previousList: this._previousList,
            oldIndex: this._currentIndex,
            newIndex: this._newIndex
        });
    }
}
MdbSortableListDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mdbSortableList]',
                exportAs: 'mdbSortableList'
            },] }
];
MdbSortableListDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: MdbSortableService }
];
MdbSortableListDirective.propDecorators = {
    _sortables: [{ type: ContentChildren, args: [MdbSortableDirective,] }],
    autoScroll: [{ type: Input }],
    connectedWith: [{ type: Input }],
    data: [{ type: Input }],
    drop: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,