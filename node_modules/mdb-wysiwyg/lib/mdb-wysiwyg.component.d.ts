import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Renderer2, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class MdbWysiwygComponent implements AfterViewInit, OnDestroy {
    private renderer;
    private cdRef;
    private el;
    get value(): string;
    set value(newValue: string);
    private _value;
    options: {
        tooltips: boolean;
        translations: Array<any>;
        colors: Array<any>;
    };
    valueChange: EventEmitter<string>;
    valueContent: EventEmitter<string>;
    textarea: ElementRef;
    isTextStyleDropdownVisible: boolean;
    isTextColorDropdownVisible: boolean;
    selectedTextStyle: string;
    selectedTextColor: string;
    showTooltips: boolean;
    optionsLength: number;
    textStyleItems: {
        type: string;
        selector: string;
        text: string;
    }[];
    textColorItems: {
        name: string;
        color: string;
    }[];
    textDecorationItems: {
        type: string;
        icon: string;
        tooltip: string;
    }[];
    alignItems: {
        type: string;
        icon: string;
        tooltip: string;
    }[];
    imageHrefItems: ({
        type: string;
        icon: string;
        tooltip: string;
        linkURLPlaceholder: string;
        imageURLPlaceholder?: undefined;
    } | {
        type: string;
        icon: string;
        tooltip: string;
        imageURLPlaceholder: string;
        linkURLPlaceholder?: undefined;
    })[];
    listItems: {
        type: string;
        icon: string;
        tooltip: string;
    }[];
    private _destroy;
    private _htmlIsVisible;
    private wysiwygValueChange$;
    valueChange$(): Observable<any>;
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    valueChanged(): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisableState(isDisabled: boolean): void;
    constructor(renderer: Renderer2, cdRef: ChangeDetectorRef, el: ElementRef);
    selectTextStyle(item: any, event: any): void;
    selectTextColor(item: any, event: any): void;
    performAction(action: string, event: any): void;
    toggleHTMLCode(): void;
    changeTooltipTranslation(array: Array<any>, el: string, value: any): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MdbWysiwygComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<MdbWysiwygComponent, "mdb-wysiwyg", never, { "options": "options"; "value": "value"; }, { "valueChange": "valueChange"; "valueContent": "valueContent"; }, never, never>;
}

//# sourceMappingURL=mdb-wysiwyg.component.d.ts.map