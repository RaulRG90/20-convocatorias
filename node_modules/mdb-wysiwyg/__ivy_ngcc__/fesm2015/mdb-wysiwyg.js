import { forwardRef, EventEmitter, Component, ViewEncapsulation, Renderer2, ChangeDetectorRef, ElementRef, Input, Output, ViewChild, NgModule } from '@angular/core';
import { Subject, fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { TooltipModule } from 'angular-bootstrap-md';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'angular-bootstrap-md';

const _c0 = ["textarea"];
function MdbWysiwygComponent_li_10_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 14);
    ɵngcc0.ɵɵlistener("click", function MdbWysiwygComponent_li_10_Template_li_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const item_r11 = restoredCtx.$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.selectTextStyle(item_r11, $event); });
    ɵngcc0.ɵɵelementStart(1, "button", 20);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r11 = ctx.$implicit;
    const i_r12 = ctx.index;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(item_r11.type === "heading" ? item_r11.text + " " + i_r12 : item_r11.text);
} }
const _c1 = function (a1) { return { "btn-clear": true, "mdb-wysiwyg-toolbar-dropdown-toggle": a1 }; };
function MdbWysiwygComponent_button_12_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 21);
    ɵngcc0.ɵɵlistener("click", function MdbWysiwygComponent_button_12_Template_button_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r18); const item_r15 = restoredCtx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.performAction(item_r15.type, $event); });
    ɵngcc0.ɵɵelement(1, "i");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r15 = ctx.$implicit;
    const i_r16 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c1, i_r16 == ctx_r1.textDecorationItems.length - 1))("mdbTooltip", ctx_r1.showTooltips ? item_r15.tooltip : "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(item_r15.icon);
} }
const _c2 = function (a0, a1) { return { "visible": a0, "hidden": a1 }; };
const _c3 = function (a0) { return { "background-color": a0 }; };
function MdbWysiwygComponent_li_14_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 22);
    ɵngcc0.ɵɵlistener("click", function MdbWysiwygComponent_li_14_Template_li_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r22); const item_r19 = restoredCtx.$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.selectTextColor(item_r19, $event); });
    ɵngcc0.ɵɵelement(1, "button", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r19 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c2, ctx_r2.isTextColorDropdownVisible, !ctx_r2.isTextColorDropdownVisible));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(5, _c3, item_r19.color));
} }
function MdbWysiwygComponent_li_17_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 14);
    ɵngcc0.ɵɵlistener("click", function MdbWysiwygComponent_li_17_Template_li_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r26); const item_r23 = restoredCtx.$implicit; const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.performAction(item_r23.type, $event); });
    ɵngcc0.ɵɵelementStart(1, "button", 24);
    ɵngcc0.ɵɵelement(2, "i");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r23 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("mdbTooltip", ctx_r3.showTooltips ? item_r23.tooltip : "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(item_r23.icon);
} }
function MdbWysiwygComponent_li_20_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 14);
    ɵngcc0.ɵɵlistener("click", function MdbWysiwygComponent_li_20_Template_li_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r30); const item_r27 = restoredCtx.$implicit; const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.performAction(item_r27.type, $event); });
    ɵngcc0.ɵɵelementStart(1, "button", 24);
    ɵngcc0.ɵɵelement(2, "i");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r27 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("mdbTooltip", ctx_r4.showTooltips ? item_r27.tooltip : "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(item_r27.icon);
} }
function MdbWysiwygComponent_li_23_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 14);
    ɵngcc0.ɵɵlistener("click", function MdbWysiwygComponent_li_23_Template_li_click_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r34); const item_r31 = restoredCtx.$implicit; const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.performAction(item_r31.type, $event); });
    ɵngcc0.ɵɵelementStart(1, "button", 24);
    ɵngcc0.ɵɵelement(2, "i");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r31 = ctx.$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("mdbTooltip", ctx_r5.showTooltips ? item_r31.tooltip : "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(item_r31.icon);
} }
function MdbWysiwygComponent_button_27_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 24);
    ɵngcc0.ɵɵelement(1, "i", 25);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mdbTooltip", ctx_r6.options && ctx_r6.options.translations ? ctx_r6.options.translations["showHTML"] : "Show HTML Code");
} }
function MdbWysiwygComponent_button_28_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 24);
    ɵngcc0.ɵɵelement(1, "i", 25);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mdbTooltip", ctx_r7.options && !ctx_r7.options.tooltips && ctx_r7.showTooltips ? "Show HTML Code" : "");
} }
function MdbWysiwygComponent_ng_template_29_button_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 24);
    ɵngcc0.ɵɵelement(1, "i", 25);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r35 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("mdbTooltip", ctx_r35.optionsLength === 0 ? "Show HTML Code" : "");
} }
function MdbWysiwygComponent_ng_template_29_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MdbWysiwygComponent_ng_template_29_button_0_Template, 2, 1, "button", 15);
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.optionsLength === 0);
} }
const TEXT_STYLE_ITEMS = [
    { type: 'paragraph', selector: 'p', text: 'Paragraph' },
    { type: 'heading', selector: 'h1', text: 'Heading' },
    { type: 'heading', selector: 'h2', text: 'Heading' },
    { type: 'heading', selector: 'h3', text: 'Heading' },
    { type: 'heading', selector: 'h4', text: 'Heading' },
    { type: 'heading', selector: 'h5', text: 'Heading' },
    { type: 'heading', selector: 'h6', text: 'Heading' },
    { type: 'preformatted', selector: 'pre', text: 'Preformatted' },
];
const TEXT_COLOR_ITEMS = [
    { name: 'red', color: '#f44336' },
    { name: 'pink', color: '#e91e63' },
    { name: 'purple', color: '#9c27b0' },
    { name: 'deep-purple', color: '#673ab7' },
    { name: 'indigo', color: '#3f51b5' },
    { name: 'blue', color: '#2196f3' },
    { name: 'light-blue', color: '#03a9f4' },
    { name: 'cyan', color: '#00bcd4' },
    { name: 'teal', color: '#009688' },
    { name: 'green', color: '#4caf50' },
    { name: 'light-green', color: '#8bc34a' },
    { name: 'lime', color: '#cddc39' },
    { name: 'yellow', color: '#ffeb3b' },
    { name: 'amber', color: '#ffc107' },
    { name: 'orange', color: '#ff9800' },
    { name: 'deep-orange', color: '#ff5722' },
    { name: 'brown', color: '#795548' },
    { name: 'grey', color: '#9e9e9e' },
    { name: 'blue-grey', color: '#607d8b' },
    { name: 'mdb-color', color: '#45526e' },
    { name: 'white', color: '#fff' },
    { name: 'black', color: '#000' },
];
const TEXT_DECORATION_ITEMS = [
    { type: 'bold', icon: 'fas fa-bold', tooltip: 'Bold' },
    { type: 'italic', icon: 'fas fa-italic', tooltip: 'Italic' },
    { type: 'strikethrough', icon: 'fas fa-strikethrough', tooltip: 'Strikethrough' },
    { type: 'underline', icon: 'fas fa-underline', tooltip: 'Underline' },
    { type: 'color', icon: 'fas fa-font', tooltip: 'Color' }
];
const ALIGN_ITEMS = [
    { type: 'justifyLeft', icon: 'fas fa-align-left', tooltip: 'Align Left' },
    { type: 'justifyCenter', icon: 'fas fa-align-center', tooltip: 'Align Center' },
    { type: 'justifyRight', icon: 'fas fa-align-right', tooltip: 'Align Right' },
    { type: 'justifyFull', icon: 'fas fa-align-justify', tooltip: 'Align Justify' },
];
const IMAGE_HREF_ITEMS = [
    { type: 'createLink', icon: 'fas fa-paperclip', tooltip: 'Insert Link', linkURLPlaceholder: 'Enter Link URL' },
    { type: 'insertImage', icon: 'fas fa-image', tooltip: 'Insert Image', imageURLPlaceholder: 'Enter image URL' },
];
const LIST_ITEMS = [
    { type: 'insertOrderedList', icon: 'fas fa-list-ol', tooltip: 'Numbered List' },
    { type: 'insertUnorderedList', icon: 'fas fa-list-ul', tooltip: 'Ordered List' },
];

const VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => MdbWysiwygComponent),
    multi: true
};
class MdbWysiwygComponent {
    constructor(renderer, cdRef, el) {
        this.renderer = renderer;
        this.cdRef = cdRef;
        this.el = el;
        this._value = '';
        this.options = null;
        this.valueChange = new EventEmitter();
        this.valueContent = new EventEmitter();
        this.isTextStyleDropdownVisible = false;
        this.isTextColorDropdownVisible = false;
        this.selectedTextStyle = 'Paragraph';
        this.selectedTextColor = '#000';
        this.showTooltips = true;
        this.optionsLength = 0;
        this.textStyleItems = TEXT_STYLE_ITEMS;
        this.textColorItems = TEXT_COLOR_ITEMS;
        this.textDecorationItems = TEXT_DECORATION_ITEMS;
        this.alignItems = ALIGN_ITEMS;
        this.imageHrefItems = IMAGE_HREF_ITEMS;
        this.listItems = LIST_ITEMS;
        this._destroy = new Subject();
        this._htmlIsVisible = false;
        this.wysiwygValueChange$ = new Subject();
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (newValue || newValue === '') {
            this._value = newValue;
            this.textarea.nativeElement.innerHTML = newValue;
        }
        else {
            this._value = '';
            this.textarea.nativeElement.innerHTML = '';
        }
        this.valueChange.emit(newValue);
        this.wysiwygValueChange$.next(newValue);
    }
    valueChange$() {
        return this.wysiwygValueChange$;
    }
    writeValue(value) {
        if (value || value === '') {
            this.value = value;
            this.textarea.nativeElement.innerHTML = this.value;
            this.wysiwygValueChange$.next(value);
            this.valueChange.emit(value);
            this.onChange(value);
            this.onTouched();
        }
    }
    valueChanged() {
        this.onChange(this.value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisableState(isDisabled) { }
    selectTextStyle(item, event) {
        event.preventDefault();
        if (!this.options || !this.options.translations) {
            this.selectedTextStyle =
                item.text === 'Heading'
                    ? item.text + item.selector.toString().replace('h', ' ')
                    : item.text;
        }
        else {
            this.selectedTextStyle =
                item.text === this.options.translations['textElements'].heading
                    ? item.text + item.selector.toString().replace('h', ' ')
                    : item.text;
        }
        this.isTextStyleDropdownVisible = false;
        if (this.textStyleItems.findIndex(el => el.text === window.getSelection().anchorNode.textContent) === -1) {
            document.execCommand('formatBlock', false, `<${item.selector}>`);
        }
    }
    selectTextColor(item, event) {
        event.preventDefault();
        this.selectedTextColor = item.color;
        this.isTextColorDropdownVisible = false;
        document.execCommand('styleWithCSS', false, item.color);
        document.execCommand('foreColor', false, item.color);
    }
    performAction(action, event) {
        event.preventDefault();
        const selection = window.getSelection().anchorNode &&
            window.getSelection().anchorNode.parentElement.firstChild;
        if (selection) {
            if (this.textStyleItems.findIndex(el => el.text === window.getSelection().anchorNode.textContent) === -1) {
                if (action === 'color') {
                    this.isTextColorDropdownVisible = !this.isTextColorDropdownVisible;
                }
                document.execCommand(action);
            }
            const actions = [
                'justifyLeft',
                'justifyCenter',
                'justifyRight',
                'justifyFull',
                'createLink',
                'insertImage'
            ];
            if (actions.find(el => el === action)) {
                let value = null;
                if (action === 'createLink' || action === 'insertImage') {
                    const link = window.getSelection().getRangeAt(0).toString() || 'https://';
                    if (!this.options || !this.options.translations) {
                        value = prompt('Insert URL: ', link);
                    }
                    else {
                        value = prompt(`${action === 'createLink'
                            ? this.options.translations['imageAndLink'].linkURLPlaceholder
                            : this.options.translations['imageAndLink'].imageURLPlaceholder}`, link);
                    }
                    document.execCommand('delete', false);
                }
                document.execCommand(action, false, value);
            }
        }
    }
    toggleHTMLCode() {
        if (!this._htmlIsVisible) {
            this.textarea.nativeElement.textContent = this.textarea.nativeElement.innerHTML;
            this._htmlIsVisible = true;
        }
        else {
            this.textarea.nativeElement.innerHTML = this.textarea.nativeElement.innerText;
            this._htmlIsVisible = false;
        }
    }
    changeTooltipTranslation(array, el, value) {
        array.forEach((element) => {
            element[el] = value[element.type];
        });
    }
    ngAfterViewInit() {
        if (this.value || this.value === '') {
            this.textarea.nativeElement.innerHTML = this.value;
        }
        else {
            this.textarea.nativeElement.innerHTML = '';
        }
        this.renderer.listen(this.textarea.nativeElement, 'click', () => {
            this.isTextStyleDropdownVisible = false;
            this.isTextColorDropdownVisible = false;
        });
        fromEvent(this.el.nativeElement, 'input')
            .pipe(debounceTime(100), distinctUntilChanged(), takeUntil(this._destroy))
            .subscribe((event) => {
            this.wysiwygValueChange$.next(event.target.innerHTML);
            this.valueChange.emit(event.target.innerHTML);
            this.onChange(event.target.innerHTML);
            this.valueContent.emit(event.target.textContent);
            this.onTouched();
        });
        if (this.options) {
            this.optionsLength = Object.entries(this.options).length;
            if (this.options.translations) {
                Object.entries(this.options.translations).forEach(([key, value]) => {
                    switch (key) {
                        case 'textElements': {
                            this.selectedTextStyle = value.paragraph;
                            this.changeTooltipTranslation(TEXT_STYLE_ITEMS, 'text', value);
                            break;
                        }
                        case 'textStyle': {
                            this.changeTooltipTranslation(TEXT_DECORATION_ITEMS, 'tooltip', value);
                            break;
                        }
                        case 'textAlign': {
                            this.changeTooltipTranslation(ALIGN_ITEMS, 'tooltip', value);
                            break;
                        }
                        case 'imageAndLink': {
                            this.changeTooltipTranslation(IMAGE_HREF_ITEMS, 'tooltip', value);
                            break;
                        }
                        case 'lists': {
                            this.changeTooltipTranslation(LIST_ITEMS, 'tooltip', value);
                            break;
                        }
                        default: {
                            this.options.translations['showHTML'] = value;
                            break;
                        }
                    }
                    if (!this.options.translations['showHTML']) {
                        this.options.translations['showHTML'] = 'Show HTML Code';
                    }
                });
            }
            if (this.options.colors) {
                this.textColorItems = [];
                Object.entries(this.options.colors).forEach((color) => {
                    this.textColorItems.push({ name: color[0], color: color[1] });
                });
            }
        }
        if (!this.options || Object.entries(this.options).length === 0) {
            this.showTooltips = true;
        }
        else if (this.options && !this.options.tooltips) {
            this.showTooltips = false;
        }
        this.cdRef.detectChanges();
    }
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
    }
}
MdbWysiwygComponent.ɵfac = function MdbWysiwygComponent_Factory(t) { return new (t || MdbWysiwygComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MdbWysiwygComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MdbWysiwygComponent, selectors: [["mdb-wysiwyg"]], viewQuery: function MdbWysiwygComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textarea = _t.first);
    } }, inputs: { options: "options", value: "value" }, outputs: { valueChange: "valueChange", valueContent: "valueContent" }, features: [ɵngcc0.ɵɵProvidersFeature([VALUE_ACCESSOR])], decls: 33, vars: 18, consts: [[1, ""], ["id", "demo", "cols", "30", "rows", "10", 2, "width", "0px", "height", "0px", "visibility", "hidden"], [1, "mdb-wysiwyg-container"], [1, "mdb-wysiwyg-toolbar"], [1, "mdb-wysiwyg-toolbar-group"], [1, "mdb-wysiwyg-toolbar-dropdown"], [1, "mdb-wysiwyg-toolbar-dropdown-toggle", "text-style-dropdown", 3, "click"], ["type", "button", 1, "btn-clear"], [1, "mdb-wysiwyg-toolbar-options-list", 3, "ngClass"], [3, "click", 4, "ngFor", "ngForOf"], ["type", "button", "placement", "bottom", "triggers", "hover click", 3, "ngClass", "mdbTooltip", "click", 4, "ngFor", "ngForOf"], [1, "mdb-wysiwyg-toolbar-options-list", "mdb-wysiwyg-toolbar-color-palette", 3, "ngClass"], [3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "mdb-wysiwyg-toolbar-options"], [3, "click"], ["type", "button", "class", "btn-clear", "placement", "bottom", "triggers", "hover click", 3, "mdbTooltip", 4, "ngIf"], ["type", "button", "class", "btn-clear", "placement", "bottom", "triggers", "hover click", 3, "mdbTooltip", 4, "ngIf", "ngIfElse"], ["showHTML", ""], ["contenteditable", "true", 1, "mdb-wysiwyg-textarea"], ["textarea", ""], ["type", "button", 1, "btn-clear", "w-100"], ["type", "button", "placement", "bottom", "triggers", "hover click", 3, "ngClass", "mdbTooltip", "click"], [3, "ngClass", "click"], ["type", "button", 1, "btn-clear", 3, "ngStyle"], ["type", "button", "placement", "bottom", "triggers", "hover click", 1, "btn-clear", 3, "mdbTooltip"], [1, "fas", "fa-code"]], template: function MdbWysiwygComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "textarea", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵelementStart(6, "div", 6);
        ɵngcc0.ɵɵlistener("click", function MdbWysiwygComponent_Template_div_click_6_listener() { return ctx.isTextStyleDropdownVisible = !ctx.isTextStyleDropdownVisible; });
        ɵngcc0.ɵɵelementStart(7, "button", 7);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "ul", 8);
        ɵngcc0.ɵɵtemplate(10, MdbWysiwygComponent_li_10_Template, 3, 1, "li", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 4);
        ɵngcc0.ɵɵtemplate(12, MdbWysiwygComponent_button_12_Template, 2, 7, "button", 10);
        ɵngcc0.ɵɵelementStart(13, "ul", 11);
        ɵngcc0.ɵɵtemplate(14, MdbWysiwygComponent_li_14_Template, 2, 7, "li", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "div", 4);
        ɵngcc0.ɵɵelementStart(16, "ul", 13);
        ɵngcc0.ɵɵtemplate(17, MdbWysiwygComponent_li_17_Template, 3, 4, "li", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 4);
        ɵngcc0.ɵɵelementStart(19, "ul", 13);
        ɵngcc0.ɵɵtemplate(20, MdbWysiwygComponent_li_20_Template, 3, 4, "li", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 4);
        ɵngcc0.ɵɵelementStart(22, "ul", 13);
        ɵngcc0.ɵɵtemplate(23, MdbWysiwygComponent_li_23_Template, 3, 4, "li", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "div", 4);
        ɵngcc0.ɵɵelementStart(25, "ul", 13);
        ɵngcc0.ɵɵelementStart(26, "li", 14);
        ɵngcc0.ɵɵlistener("click", function MdbWysiwygComponent_Template_li_click_26_listener() { return ctx.toggleHTMLCode(); });
        ɵngcc0.ɵɵtemplate(27, MdbWysiwygComponent_button_27_Template, 2, 1, "button", 15);
        ɵngcc0.ɵɵtemplate(28, MdbWysiwygComponent_button_28_Template, 2, 1, "button", 16);
        ɵngcc0.ɵɵtemplate(29, MdbWysiwygComponent_ng_template_29_Template, 1, 1, "ng-template", null, 17, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(31, "div", 18, 19);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r8 = ɵngcc0.ɵɵreference(30);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵtextInterpolate(ctx.selectedTextStyle);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(12, _c2, ctx.isTextStyleDropdownVisible, !ctx.isTextStyleDropdownVisible));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.textStyleItems);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.textDecorationItems);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(15, _c2, ctx.isTextColorDropdownVisible, !ctx.isTextColorDropdownVisible));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.textColorItems);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.alignItems);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.imageHrefItems);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.listItems);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options && ctx.options.tooltips);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options && !ctx.options.tooltips)("ngIfElse", _r8);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc2.TooltipDirective, ɵngcc1.NgStyle], styles: [".mdb-wysiwyg-container{display:block;border:1px solid #ededed;border-radius:3px 3px 0 0}.mdb-wysiwyg-toolbar-dropdown-toggle.text-style-dropdown:after{content:\"\";display:inline-block;border-style:solid;border-width:3px;border-color:#888 transparent transparent;right:0;margin-left:0}.mdb-wysiwyg-toolbar-color-palette{margin-top:26px}.btn-clear{background:transparent;border:0;cursor:pointer}.mdb-wysiwyg-toolbar{display:flex;flex-wrap:wrap;justify-content:space-between;padding-left:8px;padding-right:8px;border-top:1px solid #fff;border-bottom:1px solid #d9dad9;border-radius:3px 3px 0 0;background:#f4f4f4;background:linear-gradient(#f4f4f4,#efeeee)}.mdb-wysiwyg-toolbar-options{list-style:none;margin:5px 0;padding-left:0}.mdb-wysiwyg-toolbar-options li{display:inline-block;padding-left:0}.mdb-wysiwyg-toolbar-options button{color:#555;background:transparent;border:none;border-radius:3px;cursor:pointer}.mdb-wysiwyg-toolbar-options button:focus{outline:0}.mdb-wysiwyg-toolbar-options button.active{border:1px solid #ccc;box-shadow:inset 0 0 13px #00000025}.mdb-wysiwyg-toolbar-options-list{visibility:hidden;position:absolute;background:#fff;box-shadow:0 2px 4px #0003;border:1px solid rgba(0,0,0,.2);list-style:none;font-size:.8rem;padding-left:0;z-index:99;opacity:0;transition:opacity .2s}.mdb-wysiwyg-toolbar-options-list.visible{visibility:visible;opacity:1}.mdb-wysiwyg-toolbar-options-list li{display:block}.mdb-wysiwyg-toolbar-options-list button{display:block;padding:4px 10px;color:#000;cursor:pointer}.mdb-wysiwyg-toolbar-options-list button:hover{background:#eee}.mdb-wysiwyg-toolbar-group{display:flex}.mdb-wysiwyg-toolbar-dropdown{align-self:center}.mdb-wysiwyg-toolbar-dropdown-toggle{font-size:.875rem;color:#555;border:0;background:transparent;cursor:pointer}.mdb-wysiwyg-toolbar-dropdown-toggle:focus{outline:0}.mdb-wysiwyg-toolbar-dropdown-toggle:after{content:\"\";display:inline-block;border-style:solid;border-width:3px;border-color:#888 transparent transparent;right:0;margin-left:5px}.mdb-wysiwyg-toolbar-color-palette{display:grid;grid-template-columns:repeat(5,1fr);grid-gap:3px;padding:3px}.mdb-wysiwyg-toolbar-color-palette li{padding:0}.mdb-wysiwyg-toolbar-color-palette button{display:block;width:14px;height:14px;border:1px solid rgba(0,0,0,.15);border-radius:0}.mdb-wysiwyg-textarea{display:block;padding:15px;width:100%;height:450px;border:0;resize:none;overflow:auto;background:#fff}.mdb-wysiwyg-textarea.show-raw{white-space:pre-line}.mdb-wysiwyg-textarea:focus{outline:0}.mdb-wysiwyg-textarea b,.mdb-wysiwyg-textarea strong{font-weight:bold}\n"], encapsulation: 2 });
MdbWysiwygComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
MdbWysiwygComponent.propDecorators = {
    value: [{ type: Input }],
    options: [{ type: Input }],
    valueChange: [{ type: Output }],
    valueContent: [{ type: Output }],
    textarea: [{ type: ViewChild, args: ['textarea', { static: true },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbWysiwygComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'mdb-wysiwyg',
                template: "<div class=\"\">\n  <textarea id=\"demo\" style=\"width: 0px; height: 0px; visibility: hidden\" cols=\"30\" rows=\"10\"></textarea>\n  <div class=\"mdb-wysiwyg-container\">\n    <div class=\"mdb-wysiwyg-toolbar\">\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <div class=\"mdb-wysiwyg-toolbar-dropdown\">\n          <div class=\"mdb-wysiwyg-toolbar-dropdown-toggle text-style-dropdown\"\n               (click)=\"isTextStyleDropdownVisible = !isTextStyleDropdownVisible\">\n            <button type=\"button\" class=\"btn-clear\">{{selectedTextStyle}}</button>\n          </div>\n          <ul class=\"mdb-wysiwyg-toolbar-options-list\"\n              [ngClass]=\"{'visible': isTextStyleDropdownVisible, 'hidden': !isTextStyleDropdownVisible}\">\n            <li *ngFor=\"let item of textStyleItems; let i = index\" (click)=\"selectTextStyle(item, $event)\">\n              <button type=\"button\" class=\"btn-clear w-100\">{{item.type === 'heading' ? item.text + ' ' + i : item.text}}</button>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <button type=\"button\" *ngFor=\"let item of textDecorationItems; let i = index\"\n                (click)=\"performAction(item.type, $event)\"\n                [ngClass]=\"{'btn-clear': true, 'mdb-wysiwyg-toolbar-dropdown-toggle': i == textDecorationItems.length - 1}\"\n                [mdbTooltip]=\"showTooltips ? item.tooltip : ''\" placement=\"bottom\" triggers=\"hover click\">\n          <i class=\"{{item.icon}}\"></i>\n        </button>\n\n        <ul class=\"mdb-wysiwyg-toolbar-options-list mdb-wysiwyg-toolbar-color-palette\"\n            [ngClass]=\"{'visible': isTextColorDropdownVisible, 'hidden': !isTextColorDropdownVisible}\">\n          <li *ngFor=\"let item of textColorItems; let i = index\" (click)=\"selectTextColor(item, $event)\"\n              [ngClass]=\"{'visible': isTextColorDropdownVisible, 'hidden': !isTextColorDropdownVisible}\">\n            <button type=\"button\" class=\"btn-clear\" [ngStyle]=\"{'background-color': item.color}\"></button>\n          </li>\n        </ul>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <ul class=\"mdb-wysiwyg-toolbar-options\">\n          <li *ngFor=\"let item of alignItems; let i = index\" (click)=\"performAction(item.type, $event)\">\n            <button type=\"button\" class=\"btn-clear\" [mdbTooltip]=\"showTooltips  ? item.tooltip : ''\" placement=\"bottom\"\n                    triggers=\"hover click\">\n              <i class=\"{{item.icon}}\"></i>\n            </button>\n          </li>\n        </ul>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <ul class=\"mdb-wysiwyg-toolbar-options\">\n          <li *ngFor=\"let item of imageHrefItems; let i = index\" (click)=\"performAction(item.type, $event)\">\n            <button type=\"button\" class=\"btn-clear\" [mdbTooltip]=\"showTooltips  ? item.tooltip : ''\" placement=\"bottom\"\n                    triggers=\"hover click\">\n              <i class=\"{{item.icon}}\"></i>\n            </button>\n          </li>\n        </ul>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <ul class=\"mdb-wysiwyg-toolbar-options\">\n          <li *ngFor=\"let item of listItems; let i = index\" (click)=\"performAction(item.type, $event)\">\n            <button type=\"button\" class=\"btn-clear\" [mdbTooltip]=\"showTooltips  ? item.tooltip : ''\" placement=\"bottom\"\n                    triggers=\"hover click\">\n              <i class=\"{{item.icon}}\"></i>\n            </button>\n          </li>\n        </ul>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <ul class=\"mdb-wysiwyg-toolbar-options\">\n          <li (click)=\"toggleHTMLCode()\">\n            <button type=\"button\" class=\"btn-clear\" *ngIf=\"options && options.tooltips\"\n                    [mdbTooltip]=\"options && options.translations ? options.translations['showHTML'] : 'Show HTML Code'\"\n                    placement=\"bottom\" triggers=\"hover click\">\n              <i class=\"fas fa-code\"></i>\n            </button>\n\n            <button type=\"button\" class=\"btn-clear\" *ngIf=\"options && !options.tooltips; else showHTML\"\n                    [mdbTooltip]=\"options && !options.tooltips && showTooltips ? 'Show HTML Code' : ''\"\n                    placement=\"bottom\"\n                    triggers=\"hover click\">\n              <i class=\"fas fa-code\"></i>\n            </button>\n\n            <ng-template #showHTML>\n              <button type=\"button\" class=\"btn-clear\" *ngIf=\"optionsLength === 0\"\n                      [mdbTooltip]=\"optionsLength === 0 ? 'Show HTML Code' : ''\" placement=\"bottom\" triggers=\"hover click\">\n                <i class=\"fas fa-code\"></i>\n              </button>\n            </ng-template>\n          </li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"mdb-wysiwyg-textarea\" #textarea contenteditable=\"true\">\n    </div>\n  </div>\n</div>\n",
                providers: [VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None,
                styles: [".mdb-wysiwyg-container{display:block;border:1px solid #ededed;border-radius:3px 3px 0 0}.mdb-wysiwyg-toolbar-dropdown-toggle.text-style-dropdown:after{content:\"\";display:inline-block;border-style:solid;border-width:3px;border-color:#888 transparent transparent;right:0;margin-left:0}.mdb-wysiwyg-toolbar-color-palette{margin-top:26px}.btn-clear{background:transparent;border:0;cursor:pointer}.mdb-wysiwyg-toolbar{display:flex;flex-wrap:wrap;justify-content:space-between;padding-left:8px;padding-right:8px;border-top:1px solid #fff;border-bottom:1px solid #d9dad9;border-radius:3px 3px 0 0;background:#f4f4f4;background:linear-gradient(#f4f4f4,#efeeee)}.mdb-wysiwyg-toolbar-options{list-style:none;margin:5px 0;padding-left:0}.mdb-wysiwyg-toolbar-options li{display:inline-block;padding-left:0}.mdb-wysiwyg-toolbar-options button{color:#555;background:transparent;border:none;border-radius:3px;cursor:pointer}.mdb-wysiwyg-toolbar-options button:focus{outline:0}.mdb-wysiwyg-toolbar-options button.active{border:1px solid #ccc;box-shadow:inset 0 0 13px #00000025}.mdb-wysiwyg-toolbar-options-list{visibility:hidden;position:absolute;background:#fff;box-shadow:0 2px 4px #0003;border:1px solid rgba(0,0,0,.2);list-style:none;font-size:.8rem;padding-left:0;z-index:99;opacity:0;transition:opacity .2s}.mdb-wysiwyg-toolbar-options-list.visible{visibility:visible;opacity:1}.mdb-wysiwyg-toolbar-options-list li{display:block}.mdb-wysiwyg-toolbar-options-list button{display:block;padding:4px 10px;color:#000;cursor:pointer}.mdb-wysiwyg-toolbar-options-list button:hover{background:#eee}.mdb-wysiwyg-toolbar-group{display:flex}.mdb-wysiwyg-toolbar-dropdown{align-self:center}.mdb-wysiwyg-toolbar-dropdown-toggle{font-size:.875rem;color:#555;border:0;background:transparent;cursor:pointer}.mdb-wysiwyg-toolbar-dropdown-toggle:focus{outline:0}.mdb-wysiwyg-toolbar-dropdown-toggle:after{content:\"\";display:inline-block;border-style:solid;border-width:3px;border-color:#888 transparent transparent;right:0;margin-left:5px}.mdb-wysiwyg-toolbar-color-palette{display:grid;grid-template-columns:repeat(5,1fr);grid-gap:3px;padding:3px}.mdb-wysiwyg-toolbar-color-palette li{padding:0}.mdb-wysiwyg-toolbar-color-palette button{display:block;width:14px;height:14px;border:1px solid rgba(0,0,0,.15);border-radius:0}.mdb-wysiwyg-textarea{display:block;padding:15px;width:100%;height:450px;border:0;resize:none;overflow:auto;background:#fff}.mdb-wysiwyg-textarea.show-raw{white-space:pre-line}.mdb-wysiwyg-textarea:focus{outline:0}.mdb-wysiwyg-textarea b,.mdb-wysiwyg-textarea strong{font-weight:bold}\n"]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { options: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], valueContent: [{
            type: Output
        }], value: [{
            type: Input
        }], textarea: [{
            type: ViewChild,
            args: ['textarea', { static: true }]
        }] }); })();

class MdbWysiwygModule {
}
MdbWysiwygModule.ɵfac = function MdbWysiwygModule_Factory(t) { return new (t || MdbWysiwygModule)(); };
MdbWysiwygModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MdbWysiwygModule });
MdbWysiwygModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            TooltipModule.forRoot()
        ], CommonModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MdbWysiwygModule, [{
        type: NgModule,
        args: [{
                declarations: [MdbWysiwygComponent],
                imports: [
                    CommonModule,
                    TooltipModule.forRoot()
                ],
                exports: [MdbWysiwygComponent, CommonModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdbWysiwygModule, { declarations: function () { return [MdbWysiwygComponent]; }, imports: function () { return [CommonModule, ɵngcc2.TooltipModule]; }, exports: function () { return [MdbWysiwygComponent, CommonModule]; } }); })();

/*
 * Public API Surface of mdb-wysiwyg
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ALIGN_ITEMS, IMAGE_HREF_ITEMS, LIST_ITEMS, MdbWysiwygComponent, MdbWysiwygModule, TEXT_COLOR_ITEMS, TEXT_DECORATION_ITEMS, TEXT_STYLE_ITEMS };

//# sourceMappingURL=mdb-wysiwyg.js.map