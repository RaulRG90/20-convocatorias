import { forwardRef, EventEmitter, Component, ViewEncapsulation, Renderer2, ChangeDetectorRef, ElementRef, Input, Output, ViewChild, NgModule } from '@angular/core';
import { Subject, fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { TooltipModule } from 'angular-bootstrap-md';

const TEXT_STYLE_ITEMS = [
    { type: 'paragraph', selector: 'p', text: 'Paragraph' },
    { type: 'heading', selector: 'h1', text: 'Heading' },
    { type: 'heading', selector: 'h2', text: 'Heading' },
    { type: 'heading', selector: 'h3', text: 'Heading' },
    { type: 'heading', selector: 'h4', text: 'Heading' },
    { type: 'heading', selector: 'h5', text: 'Heading' },
    { type: 'heading', selector: 'h6', text: 'Heading' },
    { type: 'preformatted', selector: 'pre', text: 'Preformatted' },
];
const TEXT_COLOR_ITEMS = [
    { name: 'red', color: '#f44336' },
    { name: 'pink', color: '#e91e63' },
    { name: 'purple', color: '#9c27b0' },
    { name: 'deep-purple', color: '#673ab7' },
    { name: 'indigo', color: '#3f51b5' },
    { name: 'blue', color: '#2196f3' },
    { name: 'light-blue', color: '#03a9f4' },
    { name: 'cyan', color: '#00bcd4' },
    { name: 'teal', color: '#009688' },
    { name: 'green', color: '#4caf50' },
    { name: 'light-green', color: '#8bc34a' },
    { name: 'lime', color: '#cddc39' },
    { name: 'yellow', color: '#ffeb3b' },
    { name: 'amber', color: '#ffc107' },
    { name: 'orange', color: '#ff9800' },
    { name: 'deep-orange', color: '#ff5722' },
    { name: 'brown', color: '#795548' },
    { name: 'grey', color: '#9e9e9e' },
    { name: 'blue-grey', color: '#607d8b' },
    { name: 'mdb-color', color: '#45526e' },
    { name: 'white', color: '#fff' },
    { name: 'black', color: '#000' },
];
const TEXT_DECORATION_ITEMS = [
    { type: 'bold', icon: 'fas fa-bold', tooltip: 'Bold' },
    { type: 'italic', icon: 'fas fa-italic', tooltip: 'Italic' },
    { type: 'strikethrough', icon: 'fas fa-strikethrough', tooltip: 'Strikethrough' },
    { type: 'underline', icon: 'fas fa-underline', tooltip: 'Underline' },
    { type: 'color', icon: 'fas fa-font', tooltip: 'Color' }
];
const ALIGN_ITEMS = [
    { type: 'justifyLeft', icon: 'fas fa-align-left', tooltip: 'Align Left' },
    { type: 'justifyCenter', icon: 'fas fa-align-center', tooltip: 'Align Center' },
    { type: 'justifyRight', icon: 'fas fa-align-right', tooltip: 'Align Right' },
    { type: 'justifyFull', icon: 'fas fa-align-justify', tooltip: 'Align Justify' },
];
const IMAGE_HREF_ITEMS = [
    { type: 'createLink', icon: 'fas fa-paperclip', tooltip: 'Insert Link', linkURLPlaceholder: 'Enter Link URL' },
    { type: 'insertImage', icon: 'fas fa-image', tooltip: 'Insert Image', imageURLPlaceholder: 'Enter image URL' },
];
const LIST_ITEMS = [
    { type: 'insertOrderedList', icon: 'fas fa-list-ol', tooltip: 'Numbered List' },
    { type: 'insertUnorderedList', icon: 'fas fa-list-ul', tooltip: 'Ordered List' },
];

const VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => MdbWysiwygComponent),
    multi: true
};
class MdbWysiwygComponent {
    constructor(renderer, cdRef, el) {
        this.renderer = renderer;
        this.cdRef = cdRef;
        this.el = el;
        this._value = '';
        this.options = null;
        this.valueChange = new EventEmitter();
        this.valueContent = new EventEmitter();
        this.isTextStyleDropdownVisible = false;
        this.isTextColorDropdownVisible = false;
        this.selectedTextStyle = 'Paragraph';
        this.selectedTextColor = '#000';
        this.showTooltips = true;
        this.optionsLength = 0;
        this.textStyleItems = TEXT_STYLE_ITEMS;
        this.textColorItems = TEXT_COLOR_ITEMS;
        this.textDecorationItems = TEXT_DECORATION_ITEMS;
        this.alignItems = ALIGN_ITEMS;
        this.imageHrefItems = IMAGE_HREF_ITEMS;
        this.listItems = LIST_ITEMS;
        this._destroy = new Subject();
        this._htmlIsVisible = false;
        this.wysiwygValueChange$ = new Subject();
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (newValue || newValue === '') {
            this._value = newValue;
            this.textarea.nativeElement.innerHTML = newValue;
        }
        else {
            this._value = '';
            this.textarea.nativeElement.innerHTML = '';
        }
        this.valueChange.emit(newValue);
        this.wysiwygValueChange$.next(newValue);
    }
    valueChange$() {
        return this.wysiwygValueChange$;
    }
    writeValue(value) {
        if (value || value === '') {
            this.value = value;
            this.textarea.nativeElement.innerHTML = this.value;
            this.wysiwygValueChange$.next(value);
            this.valueChange.emit(value);
            this.onChange(value);
            this.onTouched();
        }
    }
    valueChanged() {
        this.onChange(this.value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisableState(isDisabled) { }
    selectTextStyle(item, event) {
        event.preventDefault();
        if (!this.options || !this.options.translations) {
            this.selectedTextStyle =
                item.text === 'Heading'
                    ? item.text + item.selector.toString().replace('h', ' ')
                    : item.text;
        }
        else {
            this.selectedTextStyle =
                item.text === this.options.translations['textElements'].heading
                    ? item.text + item.selector.toString().replace('h', ' ')
                    : item.text;
        }
        this.isTextStyleDropdownVisible = false;
        if (this.textStyleItems.findIndex(el => el.text === window.getSelection().anchorNode.textContent) === -1) {
            document.execCommand('formatBlock', false, `<${item.selector}>`);
        }
    }
    selectTextColor(item, event) {
        event.preventDefault();
        this.selectedTextColor = item.color;
        this.isTextColorDropdownVisible = false;
        document.execCommand('styleWithCSS', false, item.color);
        document.execCommand('foreColor', false, item.color);
    }
    performAction(action, event) {
        event.preventDefault();
        const selection = window.getSelection().anchorNode &&
            window.getSelection().anchorNode.parentElement.firstChild;
        if (selection) {
            if (this.textStyleItems.findIndex(el => el.text === window.getSelection().anchorNode.textContent) === -1) {
                if (action === 'color') {
                    this.isTextColorDropdownVisible = !this.isTextColorDropdownVisible;
                }
                document.execCommand(action);
            }
            const actions = [
                'justifyLeft',
                'justifyCenter',
                'justifyRight',
                'justifyFull',
                'createLink',
                'insertImage'
            ];
            if (actions.find(el => el === action)) {
                let value = null;
                if (action === 'createLink' || action === 'insertImage') {
                    const link = window.getSelection().getRangeAt(0).toString() || 'https://';
                    if (!this.options || !this.options.translations) {
                        value = prompt('Insert URL: ', link);
                    }
                    else {
                        value = prompt(`${action === 'createLink'
                            ? this.options.translations['imageAndLink'].linkURLPlaceholder
                            : this.options.translations['imageAndLink'].imageURLPlaceholder}`, link);
                    }
                    document.execCommand('delete', false);
                }
                document.execCommand(action, false, value);
            }
        }
    }
    toggleHTMLCode() {
        if (!this._htmlIsVisible) {
            this.textarea.nativeElement.textContent = this.textarea.nativeElement.innerHTML;
            this._htmlIsVisible = true;
        }
        else {
            this.textarea.nativeElement.innerHTML = this.textarea.nativeElement.innerText;
            this._htmlIsVisible = false;
        }
    }
    changeTooltipTranslation(array, el, value) {
        array.forEach((element) => {
            element[el] = value[element.type];
        });
    }
    ngAfterViewInit() {
        if (this.value || this.value === '') {
            this.textarea.nativeElement.innerHTML = this.value;
        }
        else {
            this.textarea.nativeElement.innerHTML = '';
        }
        this.renderer.listen(this.textarea.nativeElement, 'click', () => {
            this.isTextStyleDropdownVisible = false;
            this.isTextColorDropdownVisible = false;
        });
        fromEvent(this.el.nativeElement, 'input')
            .pipe(debounceTime(100), distinctUntilChanged(), takeUntil(this._destroy))
            .subscribe((event) => {
            this.wysiwygValueChange$.next(event.target.innerHTML);
            this.valueChange.emit(event.target.innerHTML);
            this.onChange(event.target.innerHTML);
            this.valueContent.emit(event.target.textContent);
            this.onTouched();
        });
        if (this.options) {
            this.optionsLength = Object.entries(this.options).length;
            if (this.options.translations) {
                Object.entries(this.options.translations).forEach(([key, value]) => {
                    switch (key) {
                        case 'textElements': {
                            this.selectedTextStyle = value.paragraph;
                            this.changeTooltipTranslation(TEXT_STYLE_ITEMS, 'text', value);
                            break;
                        }
                        case 'textStyle': {
                            this.changeTooltipTranslation(TEXT_DECORATION_ITEMS, 'tooltip', value);
                            break;
                        }
                        case 'textAlign': {
                            this.changeTooltipTranslation(ALIGN_ITEMS, 'tooltip', value);
                            break;
                        }
                        case 'imageAndLink': {
                            this.changeTooltipTranslation(IMAGE_HREF_ITEMS, 'tooltip', value);
                            break;
                        }
                        case 'lists': {
                            this.changeTooltipTranslation(LIST_ITEMS, 'tooltip', value);
                            break;
                        }
                        default: {
                            this.options.translations['showHTML'] = value;
                            break;
                        }
                    }
                    if (!this.options.translations['showHTML']) {
                        this.options.translations['showHTML'] = 'Show HTML Code';
                    }
                });
            }
            if (this.options.colors) {
                this.textColorItems = [];
                Object.entries(this.options.colors).forEach((color) => {
                    this.textColorItems.push({ name: color[0], color: color[1] });
                });
            }
        }
        if (!this.options || Object.entries(this.options).length === 0) {
            this.showTooltips = true;
        }
        else if (this.options && !this.options.tooltips) {
            this.showTooltips = false;
        }
        this.cdRef.detectChanges();
    }
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
    }
}
MdbWysiwygComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'mdb-wysiwyg',
                template: "<div class=\"\">\n  <textarea id=\"demo\" style=\"width: 0px; height: 0px; visibility: hidden\" cols=\"30\" rows=\"10\"></textarea>\n  <div class=\"mdb-wysiwyg-container\">\n    <div class=\"mdb-wysiwyg-toolbar\">\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <div class=\"mdb-wysiwyg-toolbar-dropdown\">\n          <div class=\"mdb-wysiwyg-toolbar-dropdown-toggle text-style-dropdown\"\n               (click)=\"isTextStyleDropdownVisible = !isTextStyleDropdownVisible\">\n            <button type=\"button\" class=\"btn-clear\">{{selectedTextStyle}}</button>\n          </div>\n          <ul class=\"mdb-wysiwyg-toolbar-options-list\"\n              [ngClass]=\"{'visible': isTextStyleDropdownVisible, 'hidden': !isTextStyleDropdownVisible}\">\n            <li *ngFor=\"let item of textStyleItems; let i = index\" (click)=\"selectTextStyle(item, $event)\">\n              <button type=\"button\" class=\"btn-clear w-100\">{{item.type === 'heading' ? item.text + ' ' + i : item.text}}</button>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <button type=\"button\" *ngFor=\"let item of textDecorationItems; let i = index\"\n                (click)=\"performAction(item.type, $event)\"\n                [ngClass]=\"{'btn-clear': true, 'mdb-wysiwyg-toolbar-dropdown-toggle': i == textDecorationItems.length - 1}\"\n                [mdbTooltip]=\"showTooltips ? item.tooltip : ''\" placement=\"bottom\" triggers=\"hover click\">\n          <i class=\"{{item.icon}}\"></i>\n        </button>\n\n        <ul class=\"mdb-wysiwyg-toolbar-options-list mdb-wysiwyg-toolbar-color-palette\"\n            [ngClass]=\"{'visible': isTextColorDropdownVisible, 'hidden': !isTextColorDropdownVisible}\">\n          <li *ngFor=\"let item of textColorItems; let i = index\" (click)=\"selectTextColor(item, $event)\"\n              [ngClass]=\"{'visible': isTextColorDropdownVisible, 'hidden': !isTextColorDropdownVisible}\">\n            <button type=\"button\" class=\"btn-clear\" [ngStyle]=\"{'background-color': item.color}\"></button>\n          </li>\n        </ul>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <ul class=\"mdb-wysiwyg-toolbar-options\">\n          <li *ngFor=\"let item of alignItems; let i = index\" (click)=\"performAction(item.type, $event)\">\n            <button type=\"button\" class=\"btn-clear\" [mdbTooltip]=\"showTooltips  ? item.tooltip : ''\" placement=\"bottom\"\n                    triggers=\"hover click\">\n              <i class=\"{{item.icon}}\"></i>\n            </button>\n          </li>\n        </ul>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <ul class=\"mdb-wysiwyg-toolbar-options\">\n          <li *ngFor=\"let item of imageHrefItems; let i = index\" (click)=\"performAction(item.type, $event)\">\n            <button type=\"button\" class=\"btn-clear\" [mdbTooltip]=\"showTooltips  ? item.tooltip : ''\" placement=\"bottom\"\n                    triggers=\"hover click\">\n              <i class=\"{{item.icon}}\"></i>\n            </button>\n          </li>\n        </ul>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <ul class=\"mdb-wysiwyg-toolbar-options\">\n          <li *ngFor=\"let item of listItems; let i = index\" (click)=\"performAction(item.type, $event)\">\n            <button type=\"button\" class=\"btn-clear\" [mdbTooltip]=\"showTooltips  ? item.tooltip : ''\" placement=\"bottom\"\n                    triggers=\"hover click\">\n              <i class=\"{{item.icon}}\"></i>\n            </button>\n          </li>\n        </ul>\n      </div>\n      <div class=\"mdb-wysiwyg-toolbar-group\">\n        <ul class=\"mdb-wysiwyg-toolbar-options\">\n          <li (click)=\"toggleHTMLCode()\">\n            <button type=\"button\" class=\"btn-clear\" *ngIf=\"options && options.tooltips\"\n                    [mdbTooltip]=\"options && options.translations ? options.translations['showHTML'] : 'Show HTML Code'\"\n                    placement=\"bottom\" triggers=\"hover click\">\n              <i class=\"fas fa-code\"></i>\n            </button>\n\n            <button type=\"button\" class=\"btn-clear\" *ngIf=\"options && !options.tooltips; else showHTML\"\n                    [mdbTooltip]=\"options && !options.tooltips && showTooltips ? 'Show HTML Code' : ''\"\n                    placement=\"bottom\"\n                    triggers=\"hover click\">\n              <i class=\"fas fa-code\"></i>\n            </button>\n\n            <ng-template #showHTML>\n              <button type=\"button\" class=\"btn-clear\" *ngIf=\"optionsLength === 0\"\n                      [mdbTooltip]=\"optionsLength === 0 ? 'Show HTML Code' : ''\" placement=\"bottom\" triggers=\"hover click\">\n                <i class=\"fas fa-code\"></i>\n              </button>\n            </ng-template>\n          </li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"mdb-wysiwyg-textarea\" #textarea contenteditable=\"true\">\n    </div>\n  </div>\n</div>\n",
                providers: [VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None,
                styles: [".mdb-wysiwyg-container{display:block;border:1px solid #ededed;border-radius:3px 3px 0 0}.mdb-wysiwyg-toolbar-dropdown-toggle.text-style-dropdown:after{content:\"\";display:inline-block;border-style:solid;border-width:3px;border-color:#888 transparent transparent;right:0;margin-left:0}.mdb-wysiwyg-toolbar-color-palette{margin-top:26px}.btn-clear{background:transparent;border:0;cursor:pointer}.mdb-wysiwyg-toolbar{display:flex;flex-wrap:wrap;justify-content:space-between;padding-left:8px;padding-right:8px;border-top:1px solid #fff;border-bottom:1px solid #d9dad9;border-radius:3px 3px 0 0;background:#f4f4f4;background:linear-gradient(#f4f4f4,#efeeee)}.mdb-wysiwyg-toolbar-options{list-style:none;margin:5px 0;padding-left:0}.mdb-wysiwyg-toolbar-options li{display:inline-block;padding-left:0}.mdb-wysiwyg-toolbar-options button{color:#555;background:transparent;border:none;border-radius:3px;cursor:pointer}.mdb-wysiwyg-toolbar-options button:focus{outline:0}.mdb-wysiwyg-toolbar-options button.active{border:1px solid #ccc;box-shadow:inset 0 0 13px #00000025}.mdb-wysiwyg-toolbar-options-list{visibility:hidden;position:absolute;background:#fff;box-shadow:0 2px 4px #0003;border:1px solid rgba(0,0,0,.2);list-style:none;font-size:.8rem;padding-left:0;z-index:99;opacity:0;transition:opacity .2s}.mdb-wysiwyg-toolbar-options-list.visible{visibility:visible;opacity:1}.mdb-wysiwyg-toolbar-options-list li{display:block}.mdb-wysiwyg-toolbar-options-list button{display:block;padding:4px 10px;color:#000;cursor:pointer}.mdb-wysiwyg-toolbar-options-list button:hover{background:#eee}.mdb-wysiwyg-toolbar-group{display:flex}.mdb-wysiwyg-toolbar-dropdown{align-self:center}.mdb-wysiwyg-toolbar-dropdown-toggle{font-size:.875rem;color:#555;border:0;background:transparent;cursor:pointer}.mdb-wysiwyg-toolbar-dropdown-toggle:focus{outline:0}.mdb-wysiwyg-toolbar-dropdown-toggle:after{content:\"\";display:inline-block;border-style:solid;border-width:3px;border-color:#888 transparent transparent;right:0;margin-left:5px}.mdb-wysiwyg-toolbar-color-palette{display:grid;grid-template-columns:repeat(5,1fr);grid-gap:3px;padding:3px}.mdb-wysiwyg-toolbar-color-palette li{padding:0}.mdb-wysiwyg-toolbar-color-palette button{display:block;width:14px;height:14px;border:1px solid rgba(0,0,0,.15);border-radius:0}.mdb-wysiwyg-textarea{display:block;padding:15px;width:100%;height:450px;border:0;resize:none;overflow:auto;background:#fff}.mdb-wysiwyg-textarea.show-raw{white-space:pre-line}.mdb-wysiwyg-textarea:focus{outline:0}.mdb-wysiwyg-textarea b,.mdb-wysiwyg-textarea strong{font-weight:bold}\n"]
            },] }
];
MdbWysiwygComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
MdbWysiwygComponent.propDecorators = {
    value: [{ type: Input }],
    options: [{ type: Input }],
    valueChange: [{ type: Output }],
    valueContent: [{ type: Output }],
    textarea: [{ type: ViewChild, args: ['textarea', { static: true },] }]
};

class MdbWysiwygModule {
}
MdbWysiwygModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MdbWysiwygComponent],
                imports: [
                    CommonModule,
                    TooltipModule.forRoot()
                ],
                exports: [MdbWysiwygComponent, CommonModule]
            },] }
];

/*
 * Public API Surface of mdb-wysiwyg
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ALIGN_ITEMS, IMAGE_HREF_ITEMS, LIST_ITEMS, MdbWysiwygComponent, MdbWysiwygModule, TEXT_COLOR_ITEMS, TEXT_DECORATION_ITEMS, TEXT_STYLE_ITEMS };
//# sourceMappingURL=mdb-wysiwyg.js.map
