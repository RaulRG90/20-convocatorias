import { EventEmitter, Component, ViewChild, Input, Output, NgModule } from '@angular/core';
import { faCloudUploadAlt, faFile, faTrashAlt } from '@fortawesome/free-solid-svg-icons';
import { FaIconLibrary, FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { CommonModule } from '@angular/common';

class MdbFileUploadComponent {
    constructor(library) {
        this.disabled = false;
        this.height = 200;
        this.textTranslation = {
            fileText: 'Drag and drop a file here or click',
            removeText: 'Remove',
            imageFileText: 'Drag and drop or click to replace',
        };
        this.fileAdded = new EventEmitter();
        this.fileRemoved = new EventEmitter();
        this.imageFileExtensions = ['png', 'jpg', 'jpeg', 'bmp', 'gif'];
        this.isFileAdded = false;
        this.isImageFile = false;
        this.defaultPreview = false;
        library.addIcons(faCloudUploadAlt, faFile, faTrashAlt);
    }
    get defaultFile() {
        return this._defaultFile;
    }
    set defaultFile(value) {
        if (value) {
            this._defaultFile = value;
            this._setDefaultPreview(value);
        }
    }
    _setDefaultPreview(url) {
        this.url = url;
        this.fileName = this._cleanFileName(url);
        this.defaultPreview = true;
        if (this.isImage(this.fileName)) {
            this.isImageFile = true;
        }
        else {
            this.isImageFile = false;
        }
    }
    ngOnChanges(changes) {
        if (changes['customText']) {
            const currentValue = changes['customText'].currentValue;
            Object.keys(currentValue).forEach((k) => {
                this.textTranslation[k] = currentValue[k];
            });
        }
    }
    onFilesAdded() {
        if (!this.dragging && !this.disabled) {
            const file = this.fileInput.nativeElement.files[0];
            if (file) {
                this.fileType = this.getFileType(file.name);
                this.fileName = file.name;
                this.isFileAdded = true;
                this.showPreview(file);
                this.fileAdded.emit(file);
            }
        }
    }
    onFileDrop(event) {
        if (event.dataTransfer && this.dragging && !this.disabled) {
            event.dataTransfer.dropEffect = 'copy';
            const file = event.dataTransfer.files[0];
            this.fileType = this.getFileType(file.name);
            this.fileName = file.name;
            this.showPreview(file);
        }
        this.dragging = false;
    }
    onDragOver(event) {
        if (!this.disabled) {
            this.dragging = true;
            event.preventDefault();
            event.stopPropagation();
        }
    }
    onDragLeave(event) {
        if (!this.disabled) {
            this.dragging = false;
            event.preventDefault();
            event.stopPropagation();
        }
    }
    reset() {
        if (this.isFileAdded) {
            this.removePreview();
            this.fileInput.nativeElement.value = '';
            this.fileRemoved.emit();
        }
        if (this.defaultPreview) {
            this.fileInput.nativeElement.value = '';
            this.defaultPreview = false;
        }
    }
    showPreview(file) {
        if (this.isImage(file.name)) {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => {
                this.url = reader.result;
            };
            this.isImageFile = true;
        }
        else {
            this.isImageFile = false;
        }
        if (this.defaultPreview) {
            this.defaultPreview = false;
        }
    }
    removePreview() {
        this.isFileAdded = false;
    }
    getFileType(fileName) {
        return fileName.split('.').pop().toLowerCase();
    }
    isImage(fileName) {
        return this.imageFileExtensions.indexOf(this.getFileType(fileName)) !== -1;
    }
    _cleanFileName(url) {
        return url.split('/').pop();
    }
}
MdbFileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-file-upload',
                template: "<div class=\"mdb-file-upload-wrapper\" (drop)=\"onFileDrop($event)\" (dragover)=\"onDragOver($event)\" (dragleave)=\"onDragLeave($event)\" (click)=\"$event.stopPropagation()\">\n  <div class=\"mdb-file-upload view\" [ngClass]=\"{'disabled': disabled }\" [style.height.px]=\"height\">\n    <div class=\"upload-message\" *ngIf=\"!isFileAdded && !this.defaultPreview\">\n      <fa-icon size=\"4x\" [icon]=\"['fas','cloud-upload-alt']\"></fa-icon>\n      <p>{{textTranslation.fileText}}</p>\n    </div>\n    <div class=\"mask rgba-stylish-slight\"></div>\n    <input #fileInput type=\"file\" (change)=\"onFilesAdded()\" [disabled]=\"disabled\">\n    <button *ngIf=\"isFileAdded || this.defaultPreview\" class=\"remove-button\" (click)=\"reset()\">\n        <span>{{textTranslation.removeText}}</span>\n        <fa-icon [icon]=\"['fas', 'trash-alt']\"></fa-icon>\n    </button>\n    <div #filePreview class=\"file-preview\" *ngIf=\"isFileAdded || this.defaultPreview\">\n      <span *ngIf=\"(isFileAdded || this.defaultPreview) && isImageFile\">\n        <img class=\"file-preview-img\" src=\"{{ url }}\">\n      </span>\n\n      <span *ngIf=\"!isImageFile\" class=\"file-icon\">\n        <fa-icon size=\"5x\" [icon]=\"['fas', 'file']\"></fa-icon>\n        <span class=\"file-extension\">{{ fileType }}</span>\n      </span>\n      <div class=\"preview-message\">\n        <div class=\"preview-message-inner\">\n          <p class=\"preview-filename\">{{ fileName }}</p>\n          <p class=\"preview-description\">{{textTranslation.imageFileText}}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                styles: [".mdb-file-upload-wrapper{background-color:#fff;box-shadow:0 2px 5px #00000029,0 2px 10px #0000001f}.mdb-file-upload{display:flex;justify-content:center;align-items:center;position:relative;max-width:100%;overflow:hidden;color:#ccc;text-align:center}.mdb-file-upload .mask.rgba-stylish-slight{opacity:0;transition:all .15s linear}.mdb-file-upload .rgba-stylish-slight{background-color:#3e45511a}.mdb-file-upload input{position:absolute;top:0;right:0;bottom:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer;z-index:5}.mdb-file-upload .upload-message{text-align:center;font-size:1rem}.mdb-file-upload .file-preview{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;overflow:hidden;text-align:center;display:flex;justify-content:center;align-items:center}.mdb-file-upload .view .mask{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden;width:100%;height:100%;background-attachment:fixed}.mdb-file-upload .preview-message{position:absolute;left:0;top:0;right:0;bottom:0;z-index:3;background:rgba(0,0,0,.7);opacity:0;transition:opacity .15s linear}.mdb-file-upload .preview-message-inner{margin-top:-5px;position:absolute;top:50%;transform:translateY(-40%);-webkit-backface-visibility:hidden;backface-visibility:hidden;width:100%;max-width:100%;transition:all .2s ease}.mdb-file-upload .preview-filename{padding:0;margin:0;position:relative;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:#fff;text-align:center;line-height:25px;font-weight:700}.mdb-file-upload .preview-description{margin-top:15px;padding-top:15px;font-size:14px;position:relative;opacity:.8}.mdb-file-upload .preview-description:before{content:\"\";position:absolute;top:0;left:50%;transform:translate(-50%);background:#fff;width:30px;height:2px}.mdb-file-upload .file-icon fa-icon{top:50%;left:50%;transform:translate(-50%,-50%);position:absolute;color:#777}.mdb-file-upload .file-extension{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);margin-top:10px;text-transform:uppercase;font-weight:900;font-size:1rem;color:#fff;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mdb-file-upload .remove-button{opacity:0;position:absolute;top:10px;right:10px;z-index:7;cursor:pointer;padding:.5rem 1.6rem;font-size:.64rem;font-weight:400;line-height:1.5;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;background-color:#ff3547;color:#fff;border:0;border-radius:.125rem;text-transform:uppercase;white-space:normal;word-wrap:break-word;box-shadow:0 2px 5px #00000029,0 2px 10px #0000001f;margin:.375rem;transition:all .15s ease}.mdb-file-upload .remove-button span{padding-right:5px}.mdb-file-upload.disabled input{cursor:not-allowed}.mdb-file-upload.disabled:hover .mask.rgba-stylish-slight{opacity:0}.mdb-file-upload.disabled .upload-message{opacity:.5;text-decoration:line-through}.mdb-file-upload.disabled .preview-description{display:none}.mdb-file-upload:hover .preview-message{opacity:1}.mdb-file-upload:hover .remove-button{opacity:1}.mdb-file-upload:hover .mask.rgba-stylish-slight{opacity:.8}.rgba-stylish-slight{background-color:#3e45511a}.view .mask{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden;width:100%;height:100%;background-attachment:fixed}\n"]
            },] }
];
MdbFileUploadComponent.ctorParameters = () => [
    { type: FaIconLibrary }
];
MdbFileUploadComponent.propDecorators = {
    fileInput: [{ type: ViewChild, args: ['fileInput', { static: true },] }],
    disabled: [{ type: Input }],
    height: [{ type: Input }],
    defaultFile: [{ type: Input }],
    customText: [{ type: Input }],
    fileAdded: [{ type: Output }],
    fileRemoved: [{ type: Output }]
};

class MdbFileUploadModule {
}
MdbFileUploadModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MdbFileUploadComponent],
                imports: [
                    CommonModule,
                    FontAwesomeModule
                ],
                exports: [MdbFileUploadComponent]
            },] }
];

/*
 * Public API Surface of mdb-file-upload
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MdbFileUploadComponent, MdbFileUploadModule };
//# sourceMappingURL=mdb-file-upload.js.map
