(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('mdb-filter', ['exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['mdb-filter'] = {}, global.ng.core, global.rxjs, global.ng.common));
}(this, (function (exports, i0, rxjs, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var MdbFilterItemDirective = /** @class */ (function () {
        function MdbFilterItemDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
        }
        MdbFilterItemDirective.prototype.ngOnInit = function () {
            this.renderer.setAttribute(this.el.nativeElement, 'data-filter-item', this.mdbFilterItem);
        };
        return MdbFilterItemDirective;
    }());
    MdbFilterItemDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[mdbFilterItem]' },] }
    ];
    MdbFilterItemDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    MdbFilterItemDirective.propDecorators = {
        mdbFilterItem: [{ type: i0.Input }]
    };

    var MdbFilterService = /** @class */ (function () {
        function MdbFilterService() {
            this._items = [];
            this._items$ = new rxjs.Subject();
            this._filter = '';
            this._filter$ = new rxjs.Subject();
            this._previousCurrentFilter = { previousValue: '', currentValue: '' };
            this._previousCurrentFilter$ = new rxjs.Subject();
        }
        MdbFilterService.prototype.setPreviousCurrentFilter = function (value) {
            this._previousCurrentFilter = value;
            this._previousCurrentFilter$.next(this.getPreviousCurrentFilter());
        };
        MdbFilterService.prototype.getPreviousCurrentFilter = function () {
            return this._previousCurrentFilter;
        };
        MdbFilterService.prototype.previousCurrentFilterChange = function () {
            return this._previousCurrentFilter$;
        };
        MdbFilterService.prototype.setFilter = function (value) {
            this._filter = value;
            this._filter$.next(this.getFilter());
        };
        MdbFilterService.prototype.getFilter = function () {
            return this._filter;
        };
        MdbFilterService.prototype.filterChange = function () {
            return this._filter$;
        };
        MdbFilterService.prototype.setItems = function (items) {
            this._items = items;
            this._items$.next(this.getItems());
        };
        MdbFilterService.prototype.getItems = function () {
            return this._items;
        };
        MdbFilterService.prototype.itemsChange = function () {
            return this._items$;
        };
        return MdbFilterService;
    }());
    MdbFilterService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function MdbFilterService_Factory() { return new MdbFilterService(); }, token: MdbFilterService, providedIn: "root" });
    MdbFilterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    MdbFilterService.ctorParameters = function () { return []; };

    var MdbFilterDirective = /** @class */ (function () {
        function MdbFilterDirective(filterService, renderer, document) {
            var _this = this;
            this.filterService = filterService;
            this.renderer = renderer;
            this.document = document;
            this.mdbFilter = '';
            this.surroundingFilterItem = true;
            this.filters = { previousValue: '', currentValue: '' };
            this.animationClass = ['animated', 'zoomIn', 'faster'];
            this.filterService.previousCurrentFilterChange().subscribe(function (filters) {
                _this.filters = filters;
            });
        }
        MdbFilterDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.mdbFilter.length <= 0) {
                this.filterService.getItems().forEach(function (el) {
                    _this.renderer.addClass(el, 'd-none');
                });
                this.onClick(new Event('click'));
            }
        };
        MdbFilterDirective.prototype.addAnimationClasses = function (el) {
            var _this = this;
            if (this.animationClass) {
                var elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
                elements.forEach(function (element) {
                    _this.animationClass.forEach(function (className) {
                        _this.renderer.addClass(element, className);
                    });
                    _this.renderer.removeClass(element, 'd-none');
                });
            }
        };
        MdbFilterDirective.prototype.removeAnimationClasses = function (el) {
            var _this = this;
            if (this.animationClass) {
                var elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
                elements.forEach(function (element) {
                    _this.renderer.addClass(element, 'd-none');
                    _this.animationClass.forEach(function (className) {
                        _this.renderer.removeClass(element, className);
                    });
                });
            }
        };
        MdbFilterDirective.prototype._getClosestEl = function (el, selector) {
            for (; el && el !== this.document; el = el.parentNode) {
                if (el.matches(selector)) {
                    return el;
                }
            }
            return null;
        };
        MdbFilterDirective.prototype.onClick = function (event) {
            var _this = this;
            if (this._getClosestEl(event.target, '.item') === null) {
                this.filterService.setFilter(this.mdbFilter);
                this.filterService.getItems().forEach(function (el) {
                    _this.animationClass = el.getAttribute('data-animation-class').split(',');
                    if (_this.filters.previousValue === '' || _this.filters.previousValue == 'undefined' || _this.filters.previousValue == undefined || _this.filters == undefined) {
                        if (el.getAttribute('data-filter-item') == _this.filters.currentValue) {
                            _this.removeAnimationClasses(el);
                            setTimeout(function () {
                                _this.addAnimationClasses(el);
                            }, 15);
                        }
                    }
                    if (_this.mdbFilter == '') {
                        if (el.getAttribute('data-filter-item') == _this.filters.previousValue) {
                            _this.removeAnimationClasses(el);
                            setTimeout(function () {
                                _this.addAnimationClasses(el);
                            }, 15);
                        }
                        setTimeout(function () {
                            var elements = _this.surroundingFilterItem ? [el, el.parentElement] : [el];
                            elements.forEach(function (element) {
                                _this.renderer.addClass(element, 'd-none');
                            });
                            _this.addAnimationClasses(el);
                        }, 15);
                    }
                    else if (el.getAttribute('data-filter-item') !== _this.mdbFilter) {
                        var elements = _this.surroundingFilterItem ? [el, el.parentElement] : [el];
                        elements.forEach(function (element) {
                            _this.renderer.addClass(element, 'd-none');
                        });
                    }
                    else {
                        setTimeout(function () {
                            var elements = _this.surroundingFilterItem ? [el, el.parentElement] : [el];
                            elements.forEach(function (element) {
                                _this.renderer.removeClass(element, 'd-none');
                            });
                        }, 15);
                    }
                });
            }
        };
        return MdbFilterDirective;
    }());
    MdbFilterDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[mdbFilter]' },] }
    ];
    MdbFilterDirective.ctorParameters = function () { return [
        { type: MdbFilterService },
        { type: i0.Renderer2 },
        { type: undefined, decorators: [{ type: i0.Inject, args: [common.DOCUMENT,] }] }
    ]; };
    MdbFilterDirective.propDecorators = {
        mdbFilter: [{ type: i0.Input }],
        surroundingFilterItem: [{ type: i0.Input }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var MdbFilterItemComponent = /** @class */ (function () {
        function MdbFilterItemComponent(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.animationClass = '';
            this.thisElement = null;
            this.thisElement = this.el.nativeElement;
        }
        MdbFilterItemComponent.prototype.ngOnInit = function () {
            this.renderer.setAttribute(this.el.nativeElement, 'data-animation-class', this.animationClass);
        };
        return MdbFilterItemComponent;
    }());
    MdbFilterItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'mdb-filter-item',
                    template: "<div class=\"item-content\">\n  <ng-content></ng-content>\n</div>\n",
                    styles: [""]
                },] }
    ];
    MdbFilterItemComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    MdbFilterItemComponent.propDecorators = {
        animationClass: [{ type: i0.Input }]
    };

    var MdbFilterContentComponent = /** @class */ (function () {
        function MdbFilterContentComponent(filterService) {
            this.filterService = filterService;
            this.filterItems = new i0.QueryList();
        }
        MdbFilterContentComponent.prototype.ngAfterContentInit = function () {
            this.filterService.setItems(this.filterItems.map(function (el) { return el.nativeElement; }));
        };
        return MdbFilterContentComponent;
    }());
    MdbFilterContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'mdb-filter-content',
                    template: "<div class=\"filter-gallery\">\n  <ng-content></ng-content>\n</div>\n",
                    styles: [""]
                },] }
    ];
    MdbFilterContentComponent.ctorParameters = function () { return [
        { type: MdbFilterService }
    ]; };
    MdbFilterContentComponent.propDecorators = {
        filterItems: [{ type: i0.ContentChildren, args: [MdbFilterItemComponent, { read: i0.ElementRef, descendants: true },] }]
    };

    var MdbFilterComponent = /** @class */ (function () {
        function MdbFilterComponent(filterService) {
            var _this = this;
            this.filterService = filterService;
            this._filter = '';
            this.filterService.filterChange().subscribe(function (filter) {
                _this.filter = filter;
            });
        }
        Object.defineProperty(MdbFilterComponent.prototype, "filter", {
            get: function () {
                return this._filter;
            },
            set: function (value) {
                var previousValue = this.filter;
                this._filter = value;
                this.filterService.setPreviousCurrentFilter({ previousValue: previousValue, currentValue: this._filter });
            },
            enumerable: false,
            configurable: true
        });
        return MdbFilterComponent;
    }());
    MdbFilterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'mdb-filter',
                    template: "<div class=\"filter filter-basic\">\n<ng-content></ng-content>\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".filter .filter-gallery{position:relative}.filter .item{display:block;z-index:1}.filter .item-panoramic{width:410px}.filter .item-content{position:relative;width:100%;height:100%}.filter .item-content img{width:100%;height:auto}.filter-draggable .item{cursor:move}.filter-fillgaps .item{cursor:move}\n"]
                },] }
    ];
    MdbFilterComponent.ctorParameters = function () { return [
        { type: MdbFilterService }
    ]; };
    MdbFilterComponent.propDecorators = {
        filter: [{ type: i0.Input, args: ['filter',] }]
    };

    var MdbFilterModule = /** @class */ (function () {
        function MdbFilterModule() {
        }
        return MdbFilterModule;
    }());
    MdbFilterModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        MdbFilterDirective,
                        MdbFilterItemDirective,
                        MdbFilterComponent,
                        MdbFilterContentComponent,
                        MdbFilterItemComponent
                    ],
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        MdbFilterDirective,
                        MdbFilterItemDirective,
                        MdbFilterComponent,
                        MdbFilterContentComponent,
                        MdbFilterItemComponent
                    ],
                    providers: [MdbFilterService]
                },] }
    ];

    /*
     * Public API Surface of mdb-filter
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbFilterComponent = MdbFilterComponent;
    exports.MdbFilterContentComponent = MdbFilterContentComponent;
    exports.MdbFilterDirective = MdbFilterDirective;
    exports.MdbFilterItemComponent = MdbFilterItemComponent;
    exports.MdbFilterItemDirective = MdbFilterItemDirective;
    exports.MdbFilterModule = MdbFilterModule;
    exports.MdbFilterService = MdbFilterService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-filter.umd.js.map
