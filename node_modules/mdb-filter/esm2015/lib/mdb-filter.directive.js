import { Directive, HostListener, Inject, Input, Renderer2 } from '@angular/core';
import { MdbFilterService } from "./mdb-filter.service";
import { DOCUMENT } from "@angular/common";
export class MdbFilterDirective {
    constructor(filterService, renderer, document) {
        this.filterService = filterService;
        this.renderer = renderer;
        this.document = document;
        this.mdbFilter = '';
        this.surroundingFilterItem = true;
        this.filters = { previousValue: '', currentValue: '' };
        this.animationClass = ['animated', 'zoomIn', 'faster'];
        this.filterService.previousCurrentFilterChange().subscribe((filters) => {
            this.filters = filters;
        });
    }
    ngAfterViewInit() {
        if (this.mdbFilter.length <= 0) {
            this.filterService.getItems().forEach((el) => {
                this.renderer.addClass(el, 'd-none');
            });
            this.onClick(new Event('click'));
        }
    }
    addAnimationClasses(el) {
        if (this.animationClass) {
            const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
            elements.forEach((element) => {
                this.animationClass.forEach((className) => {
                    this.renderer.addClass(element, className);
                });
                this.renderer.removeClass(element, 'd-none');
            });
        }
    }
    removeAnimationClasses(el) {
        if (this.animationClass) {
            const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
            elements.forEach((element) => {
                this.renderer.addClass(element, 'd-none');
                this.animationClass.forEach((className) => {
                    this.renderer.removeClass(element, className);
                });
            });
        }
    }
    _getClosestEl(el, selector) {
        for (; el && el !== this.document; el = el.parentNode) {
            if (el.matches(selector)) {
                return el;
            }
        }
        return null;
    }
    onClick(event) {
        if (this._getClosestEl(event.target, '.item') === null) {
            this.filterService.setFilter(this.mdbFilter);
            this.filterService.getItems().forEach((el) => {
                this.animationClass = el.getAttribute('data-animation-class').split(',');
                if (this.filters.previousValue === '' || this.filters.previousValue == 'undefined' || this.filters.previousValue == undefined || this.filters == undefined) {
                    if (el.getAttribute('data-filter-item') == this.filters.currentValue) {
                        this.removeAnimationClasses(el);
                        setTimeout(() => {
                            this.addAnimationClasses(el);
                        }, 15);
                    }
                }
                if (this.mdbFilter == '') {
                    if (el.getAttribute('data-filter-item') == this.filters.previousValue) {
                        this.removeAnimationClasses(el);
                        setTimeout(() => {
                            this.addAnimationClasses(el);
                        }, 15);
                    }
                    setTimeout(() => {
                        const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
                        elements.forEach((element) => {
                            this.renderer.addClass(element, 'd-none');
                        });
                        this.addAnimationClasses(el);
                    }, 15);
                }
                else if (el.getAttribute('data-filter-item') !== this.mdbFilter) {
                    const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
                    elements.forEach((element) => {
                        this.renderer.addClass(element, 'd-none');
                    });
                }
                else {
                    setTimeout(() => {
                        const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
                        elements.forEach((element) => {
                            this.renderer.removeClass(element, 'd-none');
                        });
                    }, 15);
                }
            });
        }
    }
}
MdbFilterDirective.decorators = [
    { type: Directive, args: [{ selector: '[mdbFilter]' },] }
];
MdbFilterDirective.ctorParameters = () => [
    { type: MdbFilterService },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
MdbFilterDirective.propDecorators = {
    mdbFilter: [{ type: Input }],
    surroundingFilterItem: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,