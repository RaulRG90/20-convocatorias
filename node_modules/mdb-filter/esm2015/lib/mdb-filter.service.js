import { Injectable } from '@angular/core';
import { Subject } from "rxjs";
import * as i0 from "@angular/core";
export class MdbFilterService {
    constructor() {
        this._items = [];
        this._items$ = new Subject();
        this._filter = '';
        this._filter$ = new Subject();
        this._previousCurrentFilter = { previousValue: '', currentValue: '' };
        this._previousCurrentFilter$ = new Subject();
    }
    setPreviousCurrentFilter(value) {
        this._previousCurrentFilter = value;
        this._previousCurrentFilter$.next(this.getPreviousCurrentFilter());
    }
    getPreviousCurrentFilter() {
        return this._previousCurrentFilter;
    }
    previousCurrentFilterChange() {
        return this._previousCurrentFilter$;
    }
    setFilter(value) {
        this._filter = value;
        this._filter$.next(this.getFilter());
    }
    getFilter() {
        return this._filter;
    }
    filterChange() {
        return this._filter$;
    }
    setItems(items) {
        this._items = items;
        this._items$.next(this.getItems());
    }
    getItems() {
        return this._items;
    }
    itemsChange() {
        return this._items$;
    }
}
MdbFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MdbFilterService_Factory() { return new MdbFilterService(); }, token: MdbFilterService, providedIn: "root" });
MdbFilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
MdbFilterService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbWRiLWZpbHRlci9zcmMvbGliL21kYi1maWx0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBYSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBS3pDLE1BQU0sT0FBTyxnQkFBZ0I7SUFrRDNCO1FBaERRLFdBQU0sR0FBZSxFQUFFLENBQUM7UUFDeEIsWUFBTyxHQUFpQixJQUFJLE9BQU8sRUFBTyxDQUFDO1FBRTNDLFlBQU8sR0FBVyxFQUFFLENBQUM7UUFDckIsYUFBUSxHQUFvQixJQUFJLE9BQU8sRUFBVSxDQUFDO1FBRWxELDJCQUFzQixHQUFrRCxFQUFDLGFBQWEsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBQyxDQUFDO1FBQzlHLDRCQUF1QixHQUEyRCxJQUFJLE9BQU8sRUFBaUQsQ0FBQTtJQTBDdEosQ0FBQztJQXhDRCx3QkFBd0IsQ0FBQyxLQUFvRDtRQUMzRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsd0JBQXdCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDO0lBQ3JDLENBQUM7SUFFRCwyQkFBMkI7UUFDekIsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUM7SUFDdEMsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBaUI7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7OztZQW5ERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tIFwicnhqc1wiO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNZGJGaWx0ZXJTZXJ2aWNlIHtcblxuICBwcml2YXRlIF9pdGVtczogQXJyYXk8YW55PiA9IFtdO1xuICBwcml2YXRlIF9pdGVtcyQ6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcblxuICBwcml2YXRlIF9maWx0ZXI6IHN0cmluZyA9ICcnO1xuICBwcml2YXRlIF9maWx0ZXIkOiBTdWJqZWN0PHN0cmluZz4gPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG5cbiAgcHJpdmF0ZSBfcHJldmlvdXNDdXJyZW50RmlsdGVyOiB7cHJldmlvdXNWYWx1ZTogc3RyaW5nLCBjdXJyZW50VmFsdWU6IHN0cmluZ30gPSB7cHJldmlvdXNWYWx1ZTogJycsIGN1cnJlbnRWYWx1ZTogJyd9O1xuICBwcml2YXRlIF9wcmV2aW91c0N1cnJlbnRGaWx0ZXIkOiBTdWJqZWN0PHtwcmV2aW91c1ZhbHVlOiBzdHJpbmcsIGN1cnJlbnRWYWx1ZTogc3RyaW5nfT4gPSBuZXcgU3ViamVjdDx7cHJldmlvdXNWYWx1ZTogc3RyaW5nLCBjdXJyZW50VmFsdWU6IHN0cmluZ30+KClcblxuICBzZXRQcmV2aW91c0N1cnJlbnRGaWx0ZXIodmFsdWU6IHtwcmV2aW91c1ZhbHVlOiBzdHJpbmcsIGN1cnJlbnRWYWx1ZTogc3RyaW5nfSkge1xuICAgIHRoaXMuX3ByZXZpb3VzQ3VycmVudEZpbHRlciA9IHZhbHVlO1xuICAgIHRoaXMuX3ByZXZpb3VzQ3VycmVudEZpbHRlciQubmV4dCh0aGlzLmdldFByZXZpb3VzQ3VycmVudEZpbHRlcigpKTtcbiAgfVxuXG4gIGdldFByZXZpb3VzQ3VycmVudEZpbHRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJldmlvdXNDdXJyZW50RmlsdGVyO1xuICB9XG5cbiAgcHJldmlvdXNDdXJyZW50RmlsdGVyQ2hhbmdlKCk6IE9ic2VydmFibGU8e3ByZXZpb3VzVmFsdWU6IHN0cmluZywgY3VycmVudFZhbHVlOiBzdHJpbmd9PiB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzQ3VycmVudEZpbHRlciQ7XG4gIH1cblxuICBzZXRGaWx0ZXIodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2ZpbHRlciA9IHZhbHVlO1xuICAgIHRoaXMuX2ZpbHRlciQubmV4dCh0aGlzLmdldEZpbHRlcigpKTtcbiAgfVxuXG4gIGdldEZpbHRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyO1xuICB9XG5cbiAgZmlsdGVyQ2hhbmdlKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbHRlciQ7XG4gIH1cblxuICBzZXRJdGVtcyhpdGVtczogQXJyYXk8YW55Pikge1xuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgdGhpcy5faXRlbXMkLm5leHQodGhpcy5nZXRJdGVtcygpKTtcbiAgfVxuXG4gIGdldEl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLl9pdGVtcztcbiAgfVxuXG4gIGl0ZW1zQ2hhbmdlKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZW1zJDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG59XG4iXX0=