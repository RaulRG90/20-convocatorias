import * as i0 from '@angular/core';
import { Directive, ElementRef, Renderer2, Input, Injectable, Inject, HostListener, Component, QueryList, ContentChildren, ViewEncapsulation, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { DOCUMENT, CommonModule } from '@angular/common';

class MdbFilterItemDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
    }
    ngOnInit() {
        this.renderer.setAttribute(this.el.nativeElement, 'data-filter-item', this.mdbFilterItem);
    }
}
MdbFilterItemDirective.decorators = [
    { type: Directive, args: [{ selector: '[mdbFilterItem]' },] }
];
MdbFilterItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MdbFilterItemDirective.propDecorators = {
    mdbFilterItem: [{ type: Input }]
};

class MdbFilterService {
    constructor() {
        this._items = [];
        this._items$ = new Subject();
        this._filter = '';
        this._filter$ = new Subject();
        this._previousCurrentFilter = { previousValue: '', currentValue: '' };
        this._previousCurrentFilter$ = new Subject();
    }
    setPreviousCurrentFilter(value) {
        this._previousCurrentFilter = value;
        this._previousCurrentFilter$.next(this.getPreviousCurrentFilter());
    }
    getPreviousCurrentFilter() {
        return this._previousCurrentFilter;
    }
    previousCurrentFilterChange() {
        return this._previousCurrentFilter$;
    }
    setFilter(value) {
        this._filter = value;
        this._filter$.next(this.getFilter());
    }
    getFilter() {
        return this._filter;
    }
    filterChange() {
        return this._filter$;
    }
    setItems(items) {
        this._items = items;
        this._items$.next(this.getItems());
    }
    getItems() {
        return this._items;
    }
    itemsChange() {
        return this._items$;
    }
}
MdbFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MdbFilterService_Factory() { return new MdbFilterService(); }, token: MdbFilterService, providedIn: "root" });
MdbFilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
MdbFilterService.ctorParameters = () => [];

class MdbFilterDirective {
    constructor(filterService, renderer, document) {
        this.filterService = filterService;
        this.renderer = renderer;
        this.document = document;
        this.mdbFilter = '';
        this.surroundingFilterItem = true;
        this.filters = { previousValue: '', currentValue: '' };
        this.animationClass = ['animated', 'zoomIn', 'faster'];
        this.filterService.previousCurrentFilterChange().subscribe((filters) => {
            this.filters = filters;
        });
    }
    ngAfterViewInit() {
        if (this.mdbFilter.length <= 0) {
            this.filterService.getItems().forEach((el) => {
                this.renderer.addClass(el, 'd-none');
            });
            this.onClick(new Event('click'));
        }
    }
    addAnimationClasses(el) {
        if (this.animationClass) {
            const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
            elements.forEach((element) => {
                this.animationClass.forEach((className) => {
                    this.renderer.addClass(element, className);
                });
                this.renderer.removeClass(element, 'd-none');
            });
        }
    }
    removeAnimationClasses(el) {
        if (this.animationClass) {
            const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
            elements.forEach((element) => {
                this.renderer.addClass(element, 'd-none');
                this.animationClass.forEach((className) => {
                    this.renderer.removeClass(element, className);
                });
            });
        }
    }
    _getClosestEl(el, selector) {
        for (; el && el !== this.document; el = el.parentNode) {
            if (el.matches(selector)) {
                return el;
            }
        }
        return null;
    }
    onClick(event) {
        if (this._getClosestEl(event.target, '.item') === null) {
            this.filterService.setFilter(this.mdbFilter);
            this.filterService.getItems().forEach((el) => {
                this.animationClass = el.getAttribute('data-animation-class').split(',');
                if (this.filters.previousValue === '' || this.filters.previousValue == 'undefined' || this.filters.previousValue == undefined || this.filters == undefined) {
                    if (el.getAttribute('data-filter-item') == this.filters.currentValue) {
                        this.removeAnimationClasses(el);
                        setTimeout(() => {
                            this.addAnimationClasses(el);
                        }, 15);
                    }
                }
                if (this.mdbFilter == '') {
                    if (el.getAttribute('data-filter-item') == this.filters.previousValue) {
                        this.removeAnimationClasses(el);
                        setTimeout(() => {
                            this.addAnimationClasses(el);
                        }, 15);
                    }
                    setTimeout(() => {
                        const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
                        elements.forEach((element) => {
                            this.renderer.addClass(element, 'd-none');
                        });
                        this.addAnimationClasses(el);
                    }, 15);
                }
                else if (el.getAttribute('data-filter-item') !== this.mdbFilter) {
                    const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
                    elements.forEach((element) => {
                        this.renderer.addClass(element, 'd-none');
                    });
                }
                else {
                    setTimeout(() => {
                        const elements = this.surroundingFilterItem ? [el, el.parentElement] : [el];
                        elements.forEach((element) => {
                            this.renderer.removeClass(element, 'd-none');
                        });
                    }, 15);
                }
            });
        }
    }
}
MdbFilterDirective.decorators = [
    { type: Directive, args: [{ selector: '[mdbFilter]' },] }
];
MdbFilterDirective.ctorParameters = () => [
    { type: MdbFilterService },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
MdbFilterDirective.propDecorators = {
    mdbFilter: [{ type: Input }],
    surroundingFilterItem: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

class MdbFilterItemComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.animationClass = '';
        this.thisElement = null;
        this.thisElement = this.el.nativeElement;
    }
    ngOnInit() {
        this.renderer.setAttribute(this.el.nativeElement, 'data-animation-class', this.animationClass);
    }
}
MdbFilterItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-filter-item',
                template: "<div class=\"item-content\">\n  <ng-content></ng-content>\n</div>\n",
                styles: [""]
            },] }
];
MdbFilterItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MdbFilterItemComponent.propDecorators = {
    animationClass: [{ type: Input }]
};

class MdbFilterContentComponent {
    constructor(filterService) {
        this.filterService = filterService;
        this.filterItems = new QueryList();
    }
    ngAfterContentInit() {
        this.filterService.setItems(this.filterItems.map(el => el.nativeElement));
    }
}
MdbFilterContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-filter-content',
                template: "<div class=\"filter-gallery\">\n  <ng-content></ng-content>\n</div>\n",
                styles: [""]
            },] }
];
MdbFilterContentComponent.ctorParameters = () => [
    { type: MdbFilterService }
];
MdbFilterContentComponent.propDecorators = {
    filterItems: [{ type: ContentChildren, args: [MdbFilterItemComponent, { read: ElementRef, descendants: true },] }]
};

class MdbFilterComponent {
    constructor(filterService) {
        this.filterService = filterService;
        this._filter = '';
        this.filterService.filterChange().subscribe((filter) => {
            this.filter = filter;
        });
    }
    set filter(value) {
        const previousValue = this.filter;
        this._filter = value;
        this.filterService.setPreviousCurrentFilter({ previousValue: previousValue, currentValue: this._filter });
    }
    get filter() {
        return this._filter;
    }
}
MdbFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-filter',
                template: "<div class=\"filter filter-basic\">\n<ng-content></ng-content>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".filter .filter-gallery{position:relative}.filter .item{display:block;z-index:1}.filter .item-panoramic{width:410px}.filter .item-content{position:relative;width:100%;height:100%}.filter .item-content img{width:100%;height:auto}.filter-draggable .item{cursor:move}.filter-fillgaps .item{cursor:move}\n"]
            },] }
];
MdbFilterComponent.ctorParameters = () => [
    { type: MdbFilterService }
];
MdbFilterComponent.propDecorators = {
    filter: [{ type: Input, args: ['filter',] }]
};

class MdbFilterModule {
}
MdbFilterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MdbFilterDirective,
                    MdbFilterItemDirective,
                    MdbFilterComponent,
                    MdbFilterContentComponent,
                    MdbFilterItemComponent
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    MdbFilterDirective,
                    MdbFilterItemDirective,
                    MdbFilterComponent,
                    MdbFilterContentComponent,
                    MdbFilterItemComponent
                ],
                providers: [MdbFilterService]
            },] }
];

/*
 * Public API Surface of mdb-filter
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MdbFilterComponent, MdbFilterContentComponent, MdbFilterDirective, MdbFilterItemComponent, MdbFilterItemDirective, MdbFilterModule, MdbFilterService };
//# sourceMappingURL=mdb-filter.js.map
